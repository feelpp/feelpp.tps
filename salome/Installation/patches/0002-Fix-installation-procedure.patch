From 666357233782eef835091658666150328694afbc Mon Sep 17 00:00:00 2001
From: Christophe Trophime <christrophime@googlemail.com>
Date: Mon, 3 Feb 2014 13:57:40 +0100
Subject: [PATCH 02/12] Fix installation procedure

---
 config_Debian_jessie_64bit.xml      | 1247 +++++++++++++++++++++++++++++++
 config_Ubuntu_13.04_64bit.xml       | 1235 ++++++++++++++++++++++++++++++
 config_Ubuntu_13.10_64bit.xml       | 1247 +++++++++++++++++++++++++++++++
 config_files/ATOMGEN.sh             |    8 +-
 config_files/ATOMIC.sh              |    8 +-
 config_files/ATOMSOLV.sh            |    8 +-
 config_files/BLSURFPLUGIN.sh        |   35 +-
 config_files/CALCULATOR.sh          |    8 +-
 config_files/COMPONENT.sh           |    8 +-
 config_files/DEBIANFORSALOME-3.1.sh |    8 +-
 config_files/DISTENE.sh             |  170 +++--
 config_files/DOCUMENTATION.sh       |    8 +-
 config_files/GEOM.sh                |   35 +-
 config_files/GHS3DPLUGIN.sh         |   35 +-
 config_files/GHS3DPRLPLUGIN.sh      |   35 +-
 config_files/GUI.sh                 |   31 +-
 config_files/HELLO.sh               |    8 +-
 config_files/HEXABLOCK.sh           |   35 +-
 config_files/HEXABLOCKPLUGIN.sh     |   10 +-
 config_files/HOMARD.sh              |   33 +-
 config_files/HXX2SALOME.sh          |    9 +-
 config_files/HXX2SALOMEDOC.sh       |    7 +-
 config_files/HexoticPLUGIN.sh       |   35 +-
 config_files/JOBMANAGER.sh          |    8 +-
 config_files/KERNEL.sh              |   80 +-
 config_files/LIGHT.sh               |    8 +-
 config_files/MED.sh                 |   35 +-
 config_files/NETGENPLUGIN.sh        |   35 +-
 config_files/OCCT.sh                |  375 +++++-----
 config_files/PARAVIS.sh             |    9 +-
 config_files/PYCALCULATOR.sh        |    8 +-
 config_files/PYHELLO.sh             |    8 +-
 config_files/PYLIGHT.sh             |    8 +-
 config_files/ParaView.sh            |   92 ++-
 config_files/PyQt.sh                |   26 +-
 config_files/Python.sh              |   25 +-
 config_files/RANDOMIZER.sh          |    8 +-
 config_files/SAMPLES.sh             |    7 +-
 config_files/SIERPINSKY.sh          |    8 +-
 config_files/SIMAN.sh               |    6 +-
 config_files/SMESH.sh               |   35 +-
 config_files/Sphinx.sh              |   22 +-
 config_files/TUTORIAL.sh            |    7 +-
 config_files/YACS.sh                |   37 +-
 config_files/YACSGEN.sh             |   50 +-
 config_files/boost.sh               |   25 +-
 config_files/build.sh               |   16 +-
 config_files/cgnslib.sh             |  237 +++---
 config_files/checkSize.sh           |    2 +-
 config_files/cmake.sh               |   15 +-
 config_files/common.sh              | 1403 ++++++++++++++++++-----------------
 config_files/docutils.sh            |    8 +-
 config_files/doxygen.sh             |  203 ++---
 config_files/expat.sh               |   31 +-
 config_files/freeimage.sh           |   43 +-
 config_files/freetype.sh            |   54 +-
 config_files/ftgl.sh                |   13 +-
 config_files/gcc-common.sh          |    5 +-
 config_files/gl2ps.sh               |   55 +-
 config_files/graphviz.sh            |  283 +++----
 config_files/hdf5.sh                |  235 +++---
 config_files/homard.sh              |  149 ++--
 config_files/libBatch.sh            |   10 +-
 config_files/libgd.sh               |  194 +++++
 config_files/libxml2.sh             |   22 +-
 config_files/med.sh                 |   47 +-
 config_files/metis.sh               |  199 +++--
 config_files/netgen.sh              |  250 ++++---
 config_files/numpy.sh               |   24 +-
 config_files/omniORB.sh             |   39 +-
 config_files/qscintilla.sh          |   26 +-
 config_files/qt.sh                  |  269 ++++---
 config_files/qwt.sh                 |  222 +++---
 config_files/scotch.sh              |  201 ++---
 config_files/simanio.sh             |   10 +-
 config_files/sip.sh                 |   30 +-
 config_files/swig.sh                |   29 +-
 config_files/tbb.sh                 |   31 +-
 config_files/tcltk.sh               |   41 +-
 config_files/wso2.sh                |    9 +-
 config_files/xdata.sh               |    8 +-
 runInstall                          |  242 ++++--
 82 files changed, 7463 insertions(+), 2377 deletions(-)
 create mode 100755 config_Debian_jessie_64bit.xml
 create mode 100755 config_Ubuntu_13.04_64bit.xml
 create mode 100755 config_Ubuntu_13.10_64bit.xml
 create mode 100755 config_files/libgd.sh

diff --git a/config_Debian_jessie_64bit.xml b/config_Debian_jessie_64bit.xml
new file mode 100755
index 0000000..e23a016
--- /dev/null
+++ b/config_Debian_jessie_64bit.xml
@@ -0,0 +1,1247 @@
+<document>
+
+  <config version="7.3.0"
+	  caption="SALOME v%1"
+ 	  copyright="&lt;h5>Copyright (C) 2007-2013 CEA/DEN, EDF R&amp;D, OPEN CASCADE&lt;br>&lt;br>Copyright (C) 2003-2007 OPEN CASCADE,&lt;br>EADS/CCR, LIP6, CEA/DEN, CEDRAT, EDF R&amp;D,&lt;br>LEG, PRINCIPIA R&amp;D, BUREAU VERITAS&lt;/h5>"
+          license="&lt;h5>GNU LGPL&lt;/h5>"
+	  platforms="Debian jessie 64bit"
+	  targetdir="${HOME}/salome_7.3.0"
+	  tempdir="/tmp"
+	  np="8"
+	  conf_opts="-DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_CXX_COMPILER:FILEPATH=/usr/bin/mpic++ -DCMAKE_C_COMPILER:FILEPATH=/usr/bin/mpicc -DSALOME_USE_MPI:BOOL=ON -DMEDFILE_USE_MPI:BOOL=ON -DSALOME_MED_PARTITIONER_PARMETIS:BOOL=OFF"
+	  optionallibs="libcppunit,libblsurf"/>
+
+  <buttons>
+    <button label="Launch SALOME"
+    	    tooltip="Click this button to launch SALOME"
+	    script="start_salome.sh"
+	    disable="false"/>
+    <button label="Release Notes"
+            tooltip="Click this button to read release notes"
+            script="release_notes.sh"
+	    disable="false"/>
+  </buttons>
+  <products>
+    <product name="KERNEL"
+             type="component"
+	     description="SALOME platform KERNEL module">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="50462,13816,149426"
+		    pickupenv="true"
+		    script="KERNEL.sh"/>
+    </product>
+    <product name="GUI"
+             type="component"
+	     description="SALOME platform GUI module">
+      <installation os="Debian jessie 64bit"
+	            version="7.3.0" 
+		    disable="false"
+		    installdiskspace="21881,18564,99969"
+		    script="GUI.sh"/>
+    </product>
+    <product name="GEOM"
+             type="component"
+	     description="SALOME platform GEOM module">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="55126,33456,208482"
+		    script="GEOM.sh"/>
+    </product>
+    <product name="MED"
+             type="component"
+	     description="SALOME platform MED module">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="228968,160420,475400"
+		    script="MED.sh"/>
+    </product>
+    <product name="SMESH"
+             type="component"
+	     description="SALOME platform SMESH module">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="64682,40532,233834"
+		    script="SMESH.sh"/>
+    </product>
+    <product name="VISU"
+             type="component"
+	     description="SALOME platform VISU module">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="true"
+		    installdiskspace="28204,13148,128936"
+		    script="VISU.sh"/>
+    </product>
+    <product name="PARAVIS"
+             type="component"
+	     description="SALOME platform PARAVIS module">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="400524,8724,1603452"
+		    script="PARAVIS.sh"/>
+    </product>
+    <product name="HEXABLOCK"
+             type="component"
+	     description="SALOME platform HEXABLOCK module">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="14157,25752,48601"
+		    script="HEXABLOCK.sh"/>
+    </product>
+    <product name="HEXABLOCKPLUGIN"
+             type="component"
+	     description="SALOME platform HEXABLOCK meshing algorithm plugin">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="800,636,4796"
+		    script="HEXABLOCKPLUGIN.sh"/>
+    </product>
+    <product name="NETGENPLUGIN"
+             type="component"
+	     description="SALOME platform NETGEN meshing algorithm plugin">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="4949,1540,17617"
+		    script="NETGENPLUGIN.sh"/>
+    </product>
+    <product name="GHS3DPLUGIN" 
+             type="component"
+	     description="SALOME platform GHS3D meshing algorithm plugin. For use this plugin you should add the path to ghs3d to your PATH environment variable.">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="4144,1880,13132"
+		    script="GHS3DPLUGIN.sh"/>
+    </product>
+    <product name="GHS3DPRLPLUGIN" 
+             type="component"
+	     description="SMESH plugin from CEA">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="2903,1112,9219"
+		    script="GHS3DPRLPLUGIN.sh"/>
+    </product>
+    <product name="BLSURFPLUGIN"
+             type="component"
+	     description="SMESH plugin from CEA sources">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="5582,2732,18050"
+		    script="BLSURFPLUGIN.sh"/>
+    </product>
+    <product name="HexoticPLUGIN" 
+             type="component"
+	     description="SMESH plugin from CEA">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="6650,4728,16670"
+		    script="HexoticPLUGIN.sh"/>
+    </product>
+    <product name="COMPONENT"
+             type="component"
+	     description="SALOME platform COMPONENT module">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="2789,1208,12209"
+		    script="COMPONENT.sh"/>
+    </product>
+    <product name="PYCALCULATOR"
+             type="component"
+	     description="SALOME platform PYCALCULATOR module">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="280,556,1280"
+		    script="PYCALCULATOR.sh"/>
+    </product>
+    <product name="CALCULATOR"
+             type="component"
+	     description="SALOME platform CALCULATOR module">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="541,728,1849"
+		    script="CALCULATOR.sh"/>
+    </product>
+    <product name="HELLO" 
+             type="component"
+	     description="Example SALOME C++ module: Hello.">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="886,724,3242"
+		    script="HELLO.sh"/>
+    </product>
+    <product name="PYHELLO" 
+             type="component"
+	     description="Example SALOME Python module: Hello.">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="834,692,2346"
+		    script="PYHELLO.sh"/>
+    </product>
+    <product name="ATOMGEN" 
+             type="component"
+	     description="Example from Salome tutorial.">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="421,500,1701"
+		    script="ATOMGEN.sh"/>
+    </product>
+    <product name="ATOMSOLV" 
+             type="component"
+	     description="Example from Salome tutorial.">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="512,576,3192"
+		    script="ATOMSOLV.sh"/>
+    </product>
+    <product name="ATOMIC" 
+             type="component"
+	     description="Example from Salome tutorial.">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="389,564,2989"
+		    script="ATOMIC.sh"/>
+    </product>
+    <product name="LIGHT"
+             type="component"
+	     description="LIGHT (no-CORBA-engine) SALOME module example">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="284,468,1944"
+		    script="LIGHT.sh"/>
+    </product>
+    <product name="PYLIGHT"
+             type="component"
+	     description="LIGHT Python (no-CORBA-engine) SALOME module example">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="140,376,692"
+		    script="PYLIGHT.sh"/>
+    </product>
+    <product name="RANDOMIZER"
+             type="component"
+	     description="SALOME-based module implement simple interface to calculate Sierpinsky fields">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="144,356,992"
+		    script="RANDOMIZER.sh"/>
+    </product>
+    <product name="SIERPINSKY"
+             type="component"
+	     description="SALOME-based module implement simple interface to calculate Sierpinsky fields">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="416,508,2976"
+		    script="SIERPINSKY.sh"/>
+    </product>
+    <product name="FILTER"
+             type="component"
+	     description="Med Memory package">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="true"
+		    installdiskspace="208,221,2958"
+		    script="FILTER.sh"/>
+    </product>
+    <product name="YACS"
+             type="component"
+	     description="Tool to supervise execution of complex interconnected scientific applications">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="30182,20736,141962"
+		    script="YACS.sh"/>
+    </product>
+    <product name="YACSGEN" 
+	     type="component"
+             description="Component and module generator for SALOME">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="646,1716,646"
+		    script="YACSGEN.sh"/>
+
+    </product>
+    <product name="JOBMANAGER" 
+	     type="component"
+             description="Component and module generator for SALOME">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="1970,1748,11402"
+		    script="JOBMANAGER.sh"/>
+    </product>
+    <product name="SAMPLES"
+             type="component"
+	     description="SALOME samples files">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="346780,346780,346780"
+		    script="SAMPLES.sh"/>
+    </product>
+    <product name="TUTORIAL"
+             type="component"
+	     description="Introduction to the developing of an application based on SALOME platform">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="4704,4704,4704"
+		    script="TUTORIAL.sh"/>
+    </product>
+    <product name="HOMARD"
+             type="component"
+	     description="SALOME platform HOMARD module">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="24765,18440,58193"
+		    script="HOMARD.sh"/>
+    </product>
+    <product name="xdata" 
+	     type="component"
+             description="Python module for types declaration in python classes">
+      <installation os="Debian jessie 64bit"
+                    version="0.9.9" 
+		    disable="false"
+		    installdiskspace="6909,4908,6913"
+		    script="xdata.sh"/>
+    </product>
+    <product name="HXX2SALOME"
+	     type="component"
+             description="SALOME module generator">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="801,3520,3513"
+		    script="HXX2SALOME.sh"/>
+    </product>
+    <product name="HXX2SALOMEDOC"
+	     type="component"
+             description="SALOME module generator documentation">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="0,2308,2308"
+		    script="HXX2SALOMEDOC.sh"/>
+    </product>
+    <product name="DOCUMENTATION"
+	     type="component"
+             description="SALOME documentation">
+      <installation os="Debian jessie 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="8471,8224,9835"
+		    script="DOCUMENTATION.sh"/>
+    </product>
+    <product name="SIMAN"
+	     type="component"
+             description="SALOME simulation manager">
+      <installation os="Debian jessie 64bit"
+                    version="1.0" 
+		    disable="false"
+		    installdiskspace="0,93200,0"
+		    script="SIMAN.sh"/>
+    </product>
+    <product name="tcltk" 
+             type="prerequisite"
+	     description="Tcl/Tk library">
+      <installation os="Debian jessie 64bit"
+	            version="8.6.0" 
+		    disable="false"
+		    installdiskspace="16721,66382,96834"
+		    script="tcltk.sh"/>
+    </product>
+    <product name="Python" 
+	     type="prerequisite"
+             description="Python language interpreter">
+      <installation os="Debian jessie 64bit"
+                    version="2.7.3" 
+		    disable="false"
+		    installdiskspace="89540,68459,204651"
+		    script="Python.sh"/>
+    </product>
+    <product name="Qt" 
+	     type="prerequisite"
+	     description="Multiplatform C++ GUI application framework">
+      <installation os="Debian jessie 64bit"
+                    version="4.8.4" 
+		    disable="false"
+		    installdiskspace="495828,736985,2448092"
+		    script="qt.sh"/>
+    </product>
+    <product name="Sip"
+	     type="prerequisite"
+             description="C++ to Python bindings generation tool">
+      <installation os="Debian jessie 64bit"
+                    version="4.14.2" 
+		    disable="false"
+		    installdiskspace="608,4004,6450"
+		    script="sip.sh"/>
+    </product>
+    <product name="PyQt"
+	     type="prerequisite"
+	     description="Python bindings for Qt library">
+      <installation os="Debian jessie 64bit"
+                    version="4.9.6" 
+		    disable="false"
+		    installdiskspace="17774,33593,143198"
+		    script="PyQt.sh"/>
+    </product>
+    <product name="QScintilla" 
+	     type="prerequisite"
+	     description="Auxiliary tool for source code editing and debugging">
+      <installation os="Debian jessie 64bit"
+                    version="2.7" 
+		    disable="false"
+		    installdiskspace="4724,18769,38150"
+		    script="qscintilla.sh"/>
+    </product>
+    <product name="boost"
+	     type="prerequisite"
+	     description="Free peer-reviewed portable STL extension">
+      <installation os="Debian jessie 64bit"
+                    version="1.52.0" 
+		    disable="false"
+		    installdiskspace="148317,437336,837696"
+		    script="boost.sh"/>
+    </product>
+    <product name="Swig" 
+	     type="prerequisite"
+	     description="Simplified Wrapper and Interface Generator">
+      <installation os="Debian jessie 64bit"
+                    version="2.0.8" 
+		    disable="false"
+		    installdiskspace="5753,30745,44713"
+		    script="swig.sh"/>
+    </product>
+    <product name="freetype"
+	     type="prerequisite"
+	     description="Font service engine">
+      <installation os="Debian jessie 64bit"
+                    version="2.4.11" 
+		    disable="false"
+		    installdiskspace="2999,13122,20651"
+		    script="freetype.sh"/>
+    </product>
+    <product name="ftgl"
+	     type="prerequisite"
+	     description="Library for using arbitrary fonts in OpenGL applications">
+      <installation os="Debian jessie 64bit"
+                    version="2.1.3" 
+		    disable="true"
+		    installdiskspace="4083,3568,37844"
+		    script="ftgl.sh"/>
+    </product>
+    <product name="freeimage"
+	     type="prerequisite"
+	     description="Library for supporting different graphical formats PNG, BMP, JPEG, TIFF and others">
+      <installation os="Debian jessie 64bit"
+                    version="3.15.4" 
+		    disable="false"
+		    installdiskspace="20110,25378,92558"
+		    script="freeimage.sh"/>
+    </product>
+    <product name="cmake"
+	     type="prerequisite"
+	     description="The cross-platform, open-source make system">
+      <installation os="Debian jessie 64bit"
+                    version="2.8.10.2" 
+		    disable="false"
+		    installdiskspace="48244,34105,237245"
+		    script="cmake.sh"/>
+    </product>
+    <product name="gl2ps"
+	     type="prerequisite"
+	     description="Library for printing an OpenGL output to PostScript (and PDF, and SVG...).">
+      <installation os="Debian jessie 64bit"
+                    version="1.3.8"
+		    disable="false"
+		    installdiskspace="568,560,2285"
+		    script="gl2ps.sh"/>
+    </product>
+    <product name="tbb"
+	     type="prerequisite"
+	     description="Intel(R) Threading Building Blocks">
+      <installation os="Debian jessie 64bit"
+                    version="30_018oss"
+		    disable="false"
+		    installdiskspace="23534,0,23534"
+		    script="tbb.sh"/>
+    </product>
+    <product name="OpenCascade" 
+	     type="prerequisite"
+             description="Open CASCADE Technology">
+      <installation os="Debian jessie 64bit"
+                    version="6.7.0" 
+		    disable="false"
+		    installdiskspace="157084,428325,1392563"
+		    script="OCCT.sh"/>
+    </product>
+    <product name="Qwt" 
+	     type="prerequisite"
+             description="2-D plotting extension for Qt library">
+      <installation os="Debian jessie 64bit"
+                    version="5.2.1" 
+		    disable="false"
+		    installdiskspace="9990,10685,24336"
+		    script="qwt.sh"/>
+    </product>
+    <product name="OmniORB"
+	     type="prerequisite"
+             description="Open source Object Request Broker (ORB) library that implements the 2.3 specification of the Common Object Request Broker Architecture (CORBA)">
+      <installation os="Debian jessie 64bit"
+                    version="4.1.6" 
+		    disable="false"
+		    installdiskspace="43909,19790,213687"
+		    script="omniORB.sh"/>
+    </product>
+    <product name="Hdf5" 
+	     type="prerequisite"
+	     description="Hierarchical Data Format library">
+      <installation os="Debian jessie 64bit"
+                    version="1.8.10" 
+		    disable="false"
+		    installdiskspace="6058,93351,117456"
+		    script="hdf5.sh"/>
+    </product>
+    <product name="cgnslib"
+	     type="prerequisite"
+	     description="Provides a standard for recording and recovering computer data associated with the numerical solution of the equations of fluid dynamics.">
+      <installation os="Debian jessie 64bit"
+                    version="3.1.3-4" 
+		    disable="false"
+		    installdiskspace="2078,6577,13778"
+		    script="cgnslib.sh"/>
+    </product>
+    <product name="Med"
+	     type="prerequisite"
+	     description="MED format interface library">
+      <installation os="Debian jessie 64bit"
+                    version="3.0.7" 
+		    disable="false"
+		    installdiskspace="140767,165002,375774"
+		    script="med.sh"/>
+    </product>
+    <product name="Metis"
+	     type="prerequisite"
+	     description="Software package for partitioning unstructured graphs, partitioning meshes, and computing fill-reducing orderings of sparse matrices">
+      <installation os="Debian jessie 64bit"
+                    version="4.0" 
+		    disable="false"
+		    installdiskspace="3033,2139,7586"
+		    script="metis.sh"/>
+    </product>
+    <product name="Scotch"
+	     type="prerequisite"
+	     description="Software package and library devoted to static mapping, partitioning and sparce matrix block ordering og graph and meshes">
+      <installation os="Debian jessie 64bit"
+                    version="5.1.11" 
+		    disable="false"
+		    installdiskspace="2970,9509,19100"
+		    script="scotch.sh"/>
+    </product>
+    <product name="ParaView"
+	     type="prerequisite"
+	     description="Scalable, open-source visualization application">
+      <installation os="Debian jessie 64bit"
+                    version="3.98.1" 
+		    disable="false"
+		    installdiskspace="227278,240114,1492710"
+		    script="ParaView.sh"/>
+    </product>
+    <product name="numpy"
+	     type="prerequisite"
+	     description="Fundamental package for scientific computing with Python">
+      <installation os="Debian jessie 64bit"
+                    version="1.7.1" 
+		    disable="false"
+		    installdiskspace="27506,74020,193436"
+		    script="numpy.sh"/>
+    </product>
+    <product name="libBatch" 
+	     type="prerequisite"
+             description="Generic batch management library">
+      <installation os="Debian jessie 64bit"
+                    version="2.1.0" 
+		    disable="false"
+		    installdiskspace="954,1300,5190"
+		    script="libBatch.sh"/>
+    </product>
+    <product name="expat"
+	     type="prerequisite"
+             description="C library for parsing XML">
+      <installation os="Debian jessie 64bit"
+                    version="2.0.1" 
+		    disable="false"
+		    installdiskspace="1129,2391,6233"
+		    script="expat.sh"/>
+    </product>
+    <product name="Graphviz"
+	     type="prerequisite"
+             description="Graph Drawing Programs set">
+      <installation os="Debian jessie 64bit"
+                    version="2.30.0" 
+		    disable="false"
+		    installdiskspace="11771,68067,112612"
+		    script="graphviz.sh"/>
+    </product>
+    <product name="Doxygen"
+	     type="prerequisite"
+             description="Documentation system for C++, C, Java, IDL, etc.">
+      <installation os="Debian jessie 64bit"
+                    version="1.8.3.1" 
+		    disable="false"
+		    installdiskspace="8817,26285,85558"
+		    script="doxygen.sh"/>
+    </product>
+    <product name="docutils"
+	     type="prerequisite"
+             description="Utilites for processing plaintext documentation">
+      <installation os="Debian jessie 64bit"
+                    version="0.10" 
+		    disable="true"
+		    installdiskspace="2163,6605,10858"
+		    script="docutils.sh"/>
+    </product>
+    <product name="Sphinx"
+	     type="prerequisite"
+             description="Tool for creation of documentation for Python projects. Includes docutils, setuptools, Jinja2 and pygments.">
+      <installation os="Debian jessie 64bit"
+                    version="1.1.3" 
+		    disable="false"
+		    installdiskspace="14417,30740,57553"
+		    script="Sphinx.sh"/>
+    </product>
+    <product name="netgen" 
+	     type="prerequisite"
+             description="Quadrangle meshing algorithmic tool">
+      <installation os="Debian jessie 64bit"
+                    version="4.9.13" 
+		    disable="false"
+		    installdiskspace="4634,8804,37071"
+		    script="netgen.sh"/>
+    </product>
+    <product name="MeshGems" 
+	     type="prerequisite"
+             description="DISTENE meshing tools">
+      <installation os="Debian jessie 64bit"
+                    version="1.1" 
+		    disable="false"
+		    installdiskspace="164468,0,164468"
+		    script="DISTENE.sh"/>
+    </product>
+    <product name="homard"
+	     type="prerequisite"
+             description="HOMARD meshing tools">
+      <installation os="Debian jessie 64bit"
+                    version="10.7" 
+		    disable="false"
+		    installdiskspace="18030,0,18030"
+		    script="homard.sh"/>
+    </product>
+    <product name="libxml2" 
+	     type="prerequisite"
+             description="XML C parser">
+      <installation os="Debian jessie 64bit"
+                    version="2.9.0" 
+		    disable="false"
+		    installdiskspace="17681,45113,95387"
+		    script="libxml2.sh"/>
+    </product>
+    <product name="libgd" 
+	     type="prerequisite"
+             description="GD Graphics Library">
+      <installation os="Debian jessie 64bit"
+                    version="2.1.0" 
+		    disable="false"
+		    installdiskspace="17681,45113,95387"
+		    script="libgd.sh"/>
+    </product>
+    <product name="wso2" 
+	     type="prerequisite"
+             description="WSO2 Web Services Framework for C++ (WSF/C++) is an extension to WSO2 Web Services Framework for C (WSF/C) wrapping the existing API.">
+      <installation os="Debian jessie 64bit"
+                    version="2.1.0" 
+		    disable="false"
+		    installdiskspace="45118,89260,202957"
+		    script="wso2.sh"/>
+    </product>
+    <product name="simanio" 
+	     type="prerequisite"
+             description="Interface library for SALOME Simulation manager (SIMAN).">
+      <installation os="Debian jessie 64bit"
+                    version="0.1" 
+		    disable="false"
+		    installdiskspace="268,620,1796"
+		    script="simanio.sh"/>
+    </product>
+  </products>
+  <dependencies>
+    <product name="KERNEL">
+      <dep>boost</dep>
+      <dep>Python</dep>
+      <dep>numpy</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>libxml2</dep>
+      <dep>Sphinx</dep>
+      <dep>libBatch</dep>
+      <dep>simanio</dep>
+    </product>
+    <product name="GUI">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Qwt</dep>
+      <dep>Hdf5</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Sip</dep>
+      <dep>PyQt</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>libxml2</dep>
+      <dep>KERNEL</dep>
+    </product>
+    <product name="GEOM">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>Sphinx</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="MED">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>ParaView</dep>
+      <dep>Med</dep>
+      <dep>Metis</dep>
+      <dep>Scotch</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>libxml2</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="SMESH">
+      <dep>cgnslib</dep>
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>ParaView</dep>
+      <dep>Med</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>Sphinx</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="HEXABLOCK">
+      <dep>boost</dep>
+      <dep>Python</dep>
+      <dep>OmniORB</dep>
+      <dep>Qt</dep>
+      <dep>OpenCascade</dep>
+      <dep>ParaView</dep>
+      <dep>Sphinx</dep>
+      <dep>libxml2</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+    </product>
+    <product name="HOMARD">
+      <dep>homard</dep>
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>Sphinx</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+      <dep>SMESH</dep>      
+    </product>
+    <product name="VISU">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Qwt</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="PARAVIS">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Qwt</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="HEXABLOCKPLUGIN">
+      <dep>boost</dep>
+      <dep>OmniORB</dep>
+      <dep>OpenCascade</dep>
+      <dep>Doxygen</dep>
+      <dep>Qt</dep>
+      <dep>ParaView</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+      <dep>SMESH</dep>
+      <dep>HEXABLOCK</dep>
+    </product>
+    <product name="NETGENPLUGIN">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>netgen</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+      <dep>SMESH</dep>
+    </product>
+    <product name="GHS3DPLUGIN">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>MeshGems</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>SMESH</dep>
+    </product>
+    <product name="GHS3DPRLPLUGIN">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>MeshGems</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+      <dep>SMESH</dep>
+    </product>
+    <product name="BLSURFPLUGIN">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>MeshGems</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+      <dep>SMESH</dep>
+    </product>
+    <product name="HexoticPLUGIN">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>MeshGems</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+      <dep>SMESH</dep>
+      <dep>BLSURFPLUGIN</dep>
+    </product>
+    <product name="COMPONENT">
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Qwt</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Sip</dep>
+      <dep>PyQt</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="PYCALCULATOR">
+      <dep>Python</dep>
+      <dep>OmniORB</dep>
+      <dep>Med</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="CALCULATOR">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>OmniORB</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="HELLO">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>OmniORB</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="PYHELLO">
+      <dep>Python</dep>
+      <dep>OmniORB</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="LIGHT">
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>Hdf5</dep>
+      <dep>ParaView</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="PYLIGHT">
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>Hdf5</dep>
+      <dep>ParaView</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="RANDOMIZER">
+      <dep>Python</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="SIERPINSKY">
+      <dep>libgd</dep>
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>SMESH</dep>
+      <dep>RANDOMIZER</dep>
+    </product>
+    <product name="FILTER">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Qwt</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="YACS">
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>Sphinx</dep>
+      <dep>QScintilla</dep>
+      <dep>libxml2</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="Python">
+      <dep>tcltk</dep>
+    </product>
+    <product name="Sip">
+      <dep>Python</dep>
+      <dep>Qt</dep>
+    </product>
+    <product name="PyQt">
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>Sip</dep>
+    </product>
+    <product name="QScintilla">
+      <dep>Qt</dep>
+      <dep>Python</dep>
+      <dep>Sip</dep>
+      <dep>PyQt</dep>
+    </product>
+    <product name="Sphinx">
+      <dep>Python</dep>
+    </product>
+    <product name="boost">
+      <dep>Python</dep>
+    </product>
+    <product name="Swig">
+      <dep>Python</dep>
+      <dep>tcltk</dep>
+      <dep>boost</dep>
+    </product>
+    <product name="ftgl">
+      <dep>freetype</dep>
+    </product>
+    <product name="gl2ps">
+      <dep>cmake</dep>
+    </product>
+    <product name="OpenCascade">
+      <dep>tbb</dep>
+      <dep>gl2ps</dep>
+      <dep>freeimage</dep>
+      <dep>freetype</dep>
+      <dep>tcltk</dep>
+    </product>
+    <product name="PatchForOpenCascade">
+      <dep>OpenCascade</dep>
+    </product>
+    <product name="Qwt">
+      <dep>Qt</dep>
+    </product>
+    <product name="OmniORB">
+      <dep>Python</dep>
+    </product>
+    <product name="Hdf5">
+      <dep>cmake</dep>
+    </product>
+    <product name="Med">
+      <dep>Hdf5</dep>
+      <dep>Python</dep>
+      <dep>cmake</dep>
+    </product>
+    <product name="cgnslib">
+      <dep>Hdf5</dep>
+    </product>
+    <product name="ParaView">
+      <dep>Python</dep>
+      <dep>tcltk</dep>
+      <dep>Hdf5</dep>
+      <dep>cmake</dep>
+      <dep>Qt</dep>
+      <dep>boost</dep>
+      <dep>gl2ps</dep>
+    </product>
+    <product name="numpy">
+      <dep>Python</dep>
+    </product>
+    <product name="Graphviz">
+      <dep>Python</dep>
+      <dep>tcltk</dep>
+      <dep>Swig</dep>
+      <dep>expat</dep>
+    </product>
+    <product name="Doxygen">
+      <dep>Graphviz</dep>
+    </product>
+    <product name="docutils">
+      <dep>Python</dep>
+    </product>
+    <product name="libxml2">
+      <dep>Python</dep>
+    </product>    
+    <product name="netgen">
+      <dep>tcltk</dep>
+      <dep>OpenCascade</dep>
+    </product>
+    <product name="libBatch">
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>cmake</dep>
+    </product>
+    <product name="YACSGEN">
+      <dep>Python</dep>
+    </product>
+    <product name="JOBMANAGER">
+      <dep>Qt</dep>
+      <dep>OmniORB</dep>
+      <dep>Sphinx</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="xdata">
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>PyQt</dep>
+      <dep>OmniORB</dep>
+      <dep>ParaView</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>MED</dep>
+      <dep>GEOM</dep>
+    </product>
+    <product name="HXX2SALOME">
+      <dep>Qt</dep>
+      <dep>HXX2SALOMEDOC</dep>
+    </product>
+    <product name="ATOMGEN">
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>PyQt</dep>
+      <dep>OmniORB</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="ATOMSOLV">
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>OmniORB</dep>
+      <dep>ParaView</dep>
+      <dep>OpenCascade</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>ATOMGEN</dep>
+    </product>
+    <product name="ATOMIC">
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>OmniORB</dep>
+      <dep>ParaView</dep>
+      <dep>Hdf5</dep>
+      <dep>OpenCascade</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="simanio">
+      <dep>wso2</dep>
+    </product>
+  </dependencies>
+</document>
diff --git a/config_Ubuntu_13.04_64bit.xml b/config_Ubuntu_13.04_64bit.xml
new file mode 100755
index 0000000..ec98e62
--- /dev/null
+++ b/config_Ubuntu_13.04_64bit.xml
@@ -0,0 +1,1235 @@
+<document>
+
+  <config version="7.3.0"
+	  caption="SALOME v%1"
+ 	  copyright="&lt;h5>Copyright (C) 2007-2013 CEA/DEN, EDF R&amp;D, OPEN CASCADE&lt;br>&lt;br>Copyright (C) 2003-2007 OPEN CASCADE,&lt;br>EADS/CCR, LIP6, CEA/DEN, CEDRAT, EDF R&amp;D,&lt;br>LEG, PRINCIPIA R&amp;D, BUREAU VERITAS&lt;/h5>"
+          license="&lt;h5>GNU LGPL&lt;/h5>"
+	  platforms="Ubuntu 13.04 64bit"
+	  targetdir="${HOME}/salome_7.3.0"
+	  tempdir="/tmp"
+	  optionallibs="libcppunit,libblsurf"/>
+
+  <buttons>
+    <button label="Launch SALOME"
+    	    tooltip="Click this button to launch SALOME"
+	    script="start_salome.sh"
+	    disable="false"/>
+    <button label="Release Notes"
+            tooltip="Click this button to read release notes"
+            script="release_notes.sh"
+	    disable="false"/>
+  </buttons>
+  <products>
+    <product name="KERNEL"
+             type="component"
+	     description="SALOME platform KERNEL module">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="50462,13816,149426"
+		    pickupenv="true"
+		    script="KERNEL.sh"/>
+    </product>
+    <product name="GUI"
+             type="component"
+	     description="SALOME platform GUI module">
+      <installation os="Ubuntu 13.04 64bit"
+	            version="7.3.0" 
+		    disable="false"
+		    installdiskspace="21881,18564,99969"
+		    script="GUI.sh"/>
+    </product>
+    <product name="GEOM"
+             type="component"
+	     description="SALOME platform GEOM module">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="55126,33456,208482"
+		    script="GEOM.sh"/>
+    </product>
+    <product name="MED"
+             type="component"
+	     description="SALOME platform MED module">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="228968,160420,475400"
+		    script="MED.sh"/>
+    </product>
+    <product name="SMESH"
+             type="component"
+	     description="SALOME platform SMESH module">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="64682,40532,233834"
+		    script="SMESH.sh"/>
+    </product>
+    <product name="VISU"
+             type="component"
+	     description="SALOME platform VISU module">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="true"
+		    installdiskspace="28204,13148,128936"
+		    script="VISU.sh"/>
+    </product>
+    <product name="PARAVIS"
+             type="component"
+	     description="SALOME platform PARAVIS module">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="400524,8724,1603452"
+		    script="PARAVIS.sh"/>
+    </product>
+    <product name="HEXABLOCK"
+             type="component"
+	     description="SALOME platform HEXABLOCK module">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="14157,25752,48601"
+		    script="HEXABLOCK.sh"/>
+    </product>
+    <product name="HEXABLOCKPLUGIN"
+             type="component"
+	     description="SALOME platform HEXABLOCK meshing algorithm plugin">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="800,636,4796"
+		    script="HEXABLOCKPLUGIN.sh"/>
+    </product>
+    <product name="NETGENPLUGIN"
+             type="component"
+	     description="SALOME platform NETGEN meshing algorithm plugin">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="4949,1540,17617"
+		    script="NETGENPLUGIN.sh"/>
+    </product>
+    <product name="GHS3DPLUGIN" 
+             type="component"
+	     description="SALOME platform GHS3D meshing algorithm plugin. For use this plugin you should add the path to ghs3d to your PATH environment variable.">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="4144,1880,13132"
+		    script="GHS3DPLUGIN.sh"/>
+    </product>
+    <product name="GHS3DPRLPLUGIN" 
+             type="component"
+	     description="SMESH plugin from CEA">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="2903,1112,9219"
+		    script="GHS3DPRLPLUGIN.sh"/>
+    </product>
+    <product name="BLSURFPLUGIN"
+             type="component"
+	     description="SMESH plugin from CEA sources">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="5582,2732,18050"
+		    script="BLSURFPLUGIN.sh"/>
+    </product>
+    <product name="HexoticPLUGIN" 
+             type="component"
+	     description="SMESH plugin from CEA">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="6650,4728,16670"
+		    script="HexoticPLUGIN.sh"/>
+    </product>
+    <product name="COMPONENT"
+             type="component"
+	     description="SALOME platform COMPONENT module">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="2789,1208,12209"
+		    script="COMPONENT.sh"/>
+    </product>
+    <product name="PYCALCULATOR"
+             type="component"
+	     description="SALOME platform PYCALCULATOR module">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="280,556,1280"
+		    script="PYCALCULATOR.sh"/>
+    </product>
+    <product name="CALCULATOR"
+             type="component"
+	     description="SALOME platform CALCULATOR module">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="541,728,1849"
+		    script="CALCULATOR.sh"/>
+    </product>
+    <product name="HELLO" 
+             type="component"
+	     description="Example SALOME C++ module: Hello.">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="886,724,3242"
+		    script="HELLO.sh"/>
+    </product>
+    <product name="PYHELLO" 
+             type="component"
+	     description="Example SALOME Python module: Hello.">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="834,692,2346"
+		    script="PYHELLO.sh"/>
+    </product>
+    <product name="ATOMGEN" 
+             type="component"
+	     description="Example from Salome tutorial.">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="421,500,1701"
+		    script="ATOMGEN.sh"/>
+    </product>
+    <product name="ATOMSOLV" 
+             type="component"
+	     description="Example from Salome tutorial.">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="512,576,3192"
+		    script="ATOMSOLV.sh"/>
+    </product>
+    <product name="ATOMIC" 
+             type="component"
+	     description="Example from Salome tutorial.">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="389,564,2989"
+		    script="ATOMIC.sh"/>
+    </product>
+    <product name="LIGHT"
+             type="component"
+	     description="LIGHT (no-CORBA-engine) SALOME module example">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="284,468,1944"
+		    script="LIGHT.sh"/>
+    </product>
+    <product name="PYLIGHT"
+             type="component"
+	     description="LIGHT Python (no-CORBA-engine) SALOME module example">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="140,376,692"
+		    script="PYLIGHT.sh"/>
+    </product>
+    <product name="RANDOMIZER"
+             type="component"
+	     description="SALOME-based module implement simple interface to calculate Sierpinsky fields">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="144,356,992"
+		    script="RANDOMIZER.sh"/>
+    </product>
+    <product name="SIERPINSKY"
+             type="component"
+	     description="SALOME-based module implement simple interface to calculate Sierpinsky fields">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="416,508,2976"
+		    script="SIERPINSKY.sh"/>
+    </product>
+    <product name="FILTER"
+             type="component"
+	     description="Med Memory package">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="true"
+		    installdiskspace="208,221,2958"
+		    script="FILTER.sh"/>
+    </product>
+    <product name="YACS"
+             type="component"
+	     description="Tool to supervise execution of complex interconnected scientific applications">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="30182,20736,141962"
+		    script="YACS.sh"/>
+    </product>
+    <product name="YACSGEN" 
+	     type="component"
+             description="Component and module generator for SALOME">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="646,1716,646"
+		    script="YACSGEN.sh"/>
+
+    </product>
+    <product name="JOBMANAGER" 
+	     type="component"
+             description="Component and module generator for SALOME">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="1970,1748,11402"
+		    script="JOBMANAGER.sh"/>
+    </product>
+    <product name="SAMPLES"
+             type="component"
+	     description="SALOME samples files">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="346780,346780,346780"
+		    script="SAMPLES.sh"/>
+    </product>
+    <product name="TUTORIAL"
+             type="component"
+	     description="Introduction to the developing of an application based on SALOME platform">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="4704,4704,4704"
+		    script="TUTORIAL.sh"/>
+    </product>
+    <product name="HOMARD"
+             type="component"
+	     description="SALOME platform HOMARD module">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="24765,18440,58193"
+		    script="HOMARD.sh"/>
+    </product>
+    <product name="xdata" 
+	     type="component"
+             description="Python module for types declaration in python classes">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="0.9.9" 
+		    disable="false"
+		    installdiskspace="6909,4908,6913"
+		    script="xdata.sh"/>
+    </product>
+    <product name="HXX2SALOME"
+	     type="component"
+             description="SALOME module generator">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="801,3520,3513"
+		    script="HXX2SALOME.sh"/>
+    </product>
+    <product name="HXX2SALOMEDOC"
+	     type="component"
+             description="SALOME module generator documentation">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="0,2308,2308"
+		    script="HXX2SALOMEDOC.sh"/>
+    </product>
+    <product name="DOCUMENTATION"
+	     type="component"
+             description="SALOME documentation">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="8471,8224,9835"
+		    script="DOCUMENTATION.sh"/>
+    </product>
+    <product name="SIMAN"
+	     type="component"
+             description="SALOME simulation manager">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="1.0" 
+		    disable="false"
+		    installdiskspace="0,93200,0"
+		    script="SIMAN.sh"/>
+    </product>
+    <product name="tcltk" 
+             type="prerequisite"
+	     description="Tcl/Tk library">
+      <installation os="Ubuntu 13.04 64bit"
+	            version="8.6.0" 
+		    disable="false"
+		    installdiskspace="16721,66382,96834"
+		    script="tcltk.sh"/>
+    </product>
+    <product name="Python" 
+	     type="prerequisite"
+             description="Python language interpreter">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="2.7.3" 
+		    disable="false"
+		    installdiskspace="89540,68459,204651"
+		    script="Python.sh"/>
+    </product>
+    <product name="Qt" 
+	     type="prerequisite"
+	     description="Multiplatform C++ GUI application framework">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="4.8.4" 
+		    disable="false"
+		    installdiskspace="495828,736985,2448092"
+		    script="qt.sh"/>
+    </product>
+    <product name="Sip"
+	     type="prerequisite"
+             description="C++ to Python bindings generation tool">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="4.14.2" 
+		    disable="false"
+		    installdiskspace="608,4004,6450"
+		    script="sip.sh"/>
+    </product>
+    <product name="PyQt"
+	     type="prerequisite"
+	     description="Python bindings for Qt library">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="4.9.6" 
+		    disable="false"
+		    installdiskspace="17774,33593,143198"
+		    script="PyQt.sh"/>
+    </product>
+    <product name="QScintilla" 
+	     type="prerequisite"
+	     description="Auxiliary tool for source code editing and debugging">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="2.7" 
+		    disable="false"
+		    installdiskspace="4724,18769,38150"
+		    script="qscintilla.sh"/>
+    </product>
+    <product name="boost"
+	     type="prerequisite"
+	     description="Free peer-reviewed portable STL extension">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="1.52.0" 
+		    disable="false"
+		    installdiskspace="148317,437336,837696"
+		    script="boost.sh"/>
+    </product>
+    <product name="Swig" 
+	     type="prerequisite"
+	     description="Simplified Wrapper and Interface Generator">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="2.0.8" 
+		    disable="false"
+		    installdiskspace="5753,30745,44713"
+		    script="swig.sh"/>
+    </product>
+    <product name="freetype"
+	     type="prerequisite"
+	     description="Font service engine">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="2.4.11" 
+		    disable="false"
+		    installdiskspace="2999,13122,20651"
+		    script="freetype.sh"/>
+    </product>
+    <product name="ftgl"
+	     type="prerequisite"
+	     description="Library for using arbitrary fonts in OpenGL applications">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="2.1.3" 
+		    disable="true"
+		    installdiskspace="4083,3568,37844"
+		    script="ftgl.sh"/>
+    </product>
+    <product name="freeimage"
+	     type="prerequisite"
+	     description="Library for supporting different graphical formats PNG, BMP, JPEG, TIFF and others">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="3.15.4" 
+		    disable="false"
+		    installdiskspace="20110,25378,92558"
+		    script="freeimage.sh"/>
+    </product>
+    <product name="cmake"
+	     type="prerequisite"
+	     description="The cross-platform, open-source make system">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="2.8.10.2" 
+		    disable="false"
+		    installdiskspace="48244,34105,237245"
+		    script="cmake.sh"/>
+    </product>
+    <product name="gl2ps"
+	     type="prerequisite"
+	     description="Library for printing an OpenGL output to PostScript (and PDF, and SVG...).">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="1.3.8"
+		    disable="false"
+		    installdiskspace="568,560,2285"
+		    script="gl2ps.sh"/>
+    </product>
+    <product name="tbb"
+	     type="prerequisite"
+	     description="Intel(R) Threading Building Blocks">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="30_018oss"
+		    disable="false"
+		    installdiskspace="23534,0,23534"
+		    script="tbb.sh"/>
+    </product>
+    <product name="OpenCascade" 
+	     type="prerequisite"
+             description="Open CASCADE Technology">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="6.7.0" 
+		    disable="false"
+		    installdiskspace="157084,428325,1392563"
+		    script="OCCT.sh"/>
+    </product>
+    <product name="Qwt" 
+	     type="prerequisite"
+             description="2-D plotting extension for Qt library">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="5.2.1" 
+		    disable="false"
+		    installdiskspace="9990,10685,24336"
+		    script="qwt.sh"/>
+    </product>
+    <product name="OmniORB"
+	     type="prerequisite"
+             description="Open source Object Request Broker (ORB) library that implements the 2.3 specification of the Common Object Request Broker Architecture (CORBA)">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="4.1.6" 
+		    disable="false"
+		    installdiskspace="43909,19790,213687"
+		    script="omniORB.sh"/>
+    </product>
+    <product name="Hdf5" 
+	     type="prerequisite"
+	     description="Hierarchical Data Format library">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="1.8.10" 
+		    disable="false"
+		    installdiskspace="6058,93351,117456"
+		    script="hdf5.sh"/>
+    </product>
+    <product name="cgnslib"
+	     type="prerequisite"
+	     description="Provides a standard for recording and recovering computer data associated with the numerical solution of the equations of fluid dynamics.">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="3.1.3-4" 
+		    disable="false"
+		    installdiskspace="2078,6577,13778"
+		    script="cgnslib.sh"/>
+    </product>
+    <product name="Med"
+	     type="prerequisite"
+	     description="MED format interface library">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="3.0.7" 
+		    disable="false"
+		    installdiskspace="140767,165002,375774"
+		    script="med.sh"/>
+    </product>
+    <product name="Metis"
+	     type="prerequisite"
+	     description="Software package for partitioning unstructured graphs, partitioning meshes, and computing fill-reducing orderings of sparse matrices">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="4.0" 
+		    disable="false"
+		    installdiskspace="3033,2139,7586"
+		    script="metis.sh"/>
+    </product>
+    <product name="Scotch"
+	     type="prerequisite"
+	     description="Software package and library devoted to static mapping, partitioning and sparce matrix block ordering og graph and meshes">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="5.1.11" 
+		    disable="false"
+		    installdiskspace="2970,9509,19100"
+		    script="scotch.sh"/>
+    </product>
+    <product name="ParaView"
+	     type="prerequisite"
+	     description="Scalable, open-source visualization application">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="3.98.1" 
+		    disable="false"
+		    installdiskspace="227278,240114,1492710"
+		    script="ParaView.sh"/>
+    </product>
+    <product name="numpy"
+	     type="prerequisite"
+	     description="Fundamental package for scientific computing with Python">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="1.7.1" 
+		    disable="false"
+		    installdiskspace="27506,74020,193436"
+		    script="numpy.sh"/>
+    </product>
+    <product name="libBatch" 
+	     type="prerequisite"
+             description="Generic batch management library">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="2.1.0" 
+		    disable="false"
+		    installdiskspace="954,1300,5190"
+		    script="libBatch.sh"/>
+    </product>
+    <product name="expat"
+	     type="prerequisite"
+             description="C library for parsing XML">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="2.0.1" 
+		    disable="false"
+		    installdiskspace="1129,2391,6233"
+		    script="expat.sh"/>
+    </product>
+    <product name="Graphviz"
+	     type="prerequisite"
+             description="Graph Drawing Programs set">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="2.30.0" 
+		    disable="false"
+		    installdiskspace="11771,68067,112612"
+		    script="graphviz.sh"/>
+    </product>
+    <product name="Doxygen"
+	     type="prerequisite"
+             description="Documentation system for C++, C, Java, IDL, etc.">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="1.8.3.1" 
+		    disable="false"
+		    installdiskspace="8817,26285,85558"
+		    script="doxygen.sh"/>
+    </product>
+    <product name="docutils"
+	     type="prerequisite"
+             description="Utilites for processing plaintext documentation">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="0.10" 
+		    disable="true"
+		    installdiskspace="2163,6605,10858"
+		    script="docutils.sh"/>
+    </product>
+    <product name="Sphinx"
+	     type="prerequisite"
+             description="Tool for creation of documentation for Python projects. Includes docutils, setuptools, Jinja2 and pygments.">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="1.1.3" 
+		    disable="false"
+		    installdiskspace="14417,30740,57553"
+		    script="Sphinx.sh"/>
+    </product>
+    <product name="netgen" 
+	     type="prerequisite"
+             description="Quadrangle meshing algorithmic tool">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="4.9.13" 
+		    disable="false"
+		    installdiskspace="4634,8804,37071"
+		    script="netgen.sh"/>
+    </product>
+    <product name="MeshGems" 
+	     type="prerequisite"
+             description="DISTENE meshing tools">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="1.1" 
+		    disable="false"
+		    installdiskspace="164468,0,164468"
+		    script="DISTENE.sh"/>
+    </product>
+    <product name="homard"
+	     type="prerequisite"
+             description="HOMARD meshing tools">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="10.7" 
+		    disable="false"
+		    installdiskspace="18030,0,18030"
+		    script="homard.sh"/>
+    </product>
+    <product name="libxml2" 
+	     type="prerequisite"
+             description="XML C parser">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="2.9.0" 
+		    disable="false"
+		    installdiskspace="17681,45113,95387"
+		    script="libxml2.sh"/>
+    </product>
+    <product name="wso2" 
+	     type="prerequisite"
+             description="WSO2 Web Services Framework for C++ (WSF/C++) is an extension to WSO2 Web Services Framework for C (WSF/C) wrapping the existing API.">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="2.1.0" 
+		    disable="false"
+		    installdiskspace="45118,89260,202957"
+		    script="wso2.sh"/>
+    </product>
+    <product name="simanio" 
+	     type="prerequisite"
+             description="Interface library for SALOME Simulation manager (SIMAN).">
+      <installation os="Ubuntu 13.04 64bit"
+                    version="0.1" 
+		    disable="false"
+		    installdiskspace="268,620,1796"
+		    script="simanio.sh"/>
+    </product>
+  </products>
+  <dependencies>
+    <product name="KERNEL">
+      <dep>boost</dep>
+      <dep>Python</dep>
+      <dep>numpy</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>libxml2</dep>
+      <dep>Sphinx</dep>
+      <dep>libBatch</dep>
+      <dep>simanio</dep>
+    </product>
+    <product name="GUI">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Qwt</dep>
+      <dep>Hdf5</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Sip</dep>
+      <dep>PyQt</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>libxml2</dep>
+      <dep>KERNEL</dep>
+    </product>
+    <product name="GEOM">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>Sphinx</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="MED">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>ParaView</dep>
+      <dep>Med</dep>
+      <dep>Metis</dep>
+      <dep>Scotch</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>libxml2</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="SMESH">
+      <dep>cgnslib</dep>
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>ParaView</dep>
+      <dep>Med</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>Sphinx</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="HEXABLOCK">
+      <dep>boost</dep>
+      <dep>Python</dep>
+      <dep>OmniORB</dep>
+      <dep>Qt</dep>
+      <dep>OpenCascade</dep>
+      <dep>ParaView</dep>
+      <dep>Sphinx</dep>
+      <dep>libxml2</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+    </product>
+    <product name="HOMARD">
+      <dep>homard</dep>
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>Sphinx</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+      <dep>SMESH</dep>      
+    </product>
+    <product name="VISU">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Qwt</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="PARAVIS">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Qwt</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="HEXABLOCKPLUGIN">
+      <dep>boost</dep>
+      <dep>OmniORB</dep>
+      <dep>OpenCascade</dep>
+      <dep>Doxygen</dep>
+      <dep>Qt</dep>
+      <dep>ParaView</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+      <dep>SMESH</dep>
+      <dep>HEXABLOCK</dep>
+    </product>
+    <product name="NETGENPLUGIN">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>netgen</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+      <dep>SMESH</dep>
+    </product>
+    <product name="GHS3DPLUGIN">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>MeshGems</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>SMESH</dep>
+    </product>
+    <product name="GHS3DPRLPLUGIN">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>MeshGems</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+      <dep>SMESH</dep>
+    </product>
+    <product name="BLSURFPLUGIN">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>MeshGems</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+      <dep>SMESH</dep>
+    </product>
+    <product name="HexoticPLUGIN">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>MeshGems</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+      <dep>SMESH</dep>
+      <dep>BLSURFPLUGIN</dep>
+    </product>
+    <product name="COMPONENT">
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Qwt</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Sip</dep>
+      <dep>PyQt</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="PYCALCULATOR">
+      <dep>Python</dep>
+      <dep>OmniORB</dep>
+      <dep>Med</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="CALCULATOR">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>OmniORB</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="HELLO">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>OmniORB</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="PYHELLO">
+      <dep>Python</dep>
+      <dep>OmniORB</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="LIGHT">
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>Hdf5</dep>
+      <dep>ParaView</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="PYLIGHT">
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>Hdf5</dep>
+      <dep>ParaView</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="RANDOMIZER">
+      <dep>Python</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="SIERPINSKY">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>SMESH</dep>
+      <dep>RANDOMIZER</dep>
+    </product>
+    <product name="FILTER">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Qwt</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="YACS">
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>Sphinx</dep>
+      <dep>QScintilla</dep>
+      <dep>libxml2</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="Python">
+      <dep>tcltk</dep>
+    </product>
+    <product name="Sip">
+      <dep>Python</dep>
+      <dep>Qt</dep>
+    </product>
+    <product name="PyQt">
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>Sip</dep>
+    </product>
+    <product name="QScintilla">
+      <dep>Qt</dep>
+      <dep>Python</dep>
+      <dep>Sip</dep>
+      <dep>PyQt</dep>
+    </product>
+    <product name="Sphinx">
+      <dep>Python</dep>
+    </product>
+    <product name="boost">
+      <dep>Python</dep>
+    </product>
+    <product name="Swig">
+      <dep>Python</dep>
+      <dep>tcltk</dep>
+      <dep>boost</dep>
+    </product>
+    <product name="ftgl">
+      <dep>freetype</dep>
+    </product>
+    <product name="gl2ps">
+      <dep>cmake</dep>
+    </product>
+    <product name="OpenCascade">
+      <dep>tbb</dep>
+      <dep>gl2ps</dep>
+      <dep>freeimage</dep>
+      <dep>freetype</dep>
+      <dep>tcltk</dep>
+    </product>
+    <product name="PatchForOpenCascade">
+      <dep>OpenCascade</dep>
+    </product>
+    <product name="Qwt">
+      <dep>Qt</dep>
+    </product>
+    <product name="OmniORB">
+      <dep>Python</dep>
+    </product>
+    <product name="Hdf5">
+      <dep>cmake</dep>
+    </product>
+    <product name="Med">
+      <dep>Hdf5</dep>
+      <dep>Python</dep>
+      <dep>cmake</dep>
+    </product>
+    <product name="cgnslib">
+      <dep>Hdf5</dep>
+    </product>
+    <product name="ParaView">
+      <dep>Python</dep>
+      <dep>tcltk</dep>
+      <dep>Hdf5</dep>
+      <dep>cmake</dep>
+      <dep>Qt</dep>
+      <dep>boost</dep>
+      <dep>gl2ps</dep>
+    </product>
+    <product name="numpy">
+      <dep>Python</dep>
+    </product>
+    <product name="Graphviz">
+      <dep>Python</dep>
+      <dep>tcltk</dep>
+      <dep>Swig</dep>
+      <dep>expat</dep>
+    </product>
+    <product name="Doxygen">
+      <dep>Graphviz</dep>
+    </product>
+    <product name="docutils">
+      <dep>Python</dep>
+    </product>
+    <product name="libxml2">
+      <dep>Python</dep>
+    </product>    
+    <product name="netgen">
+      <dep>tcltk</dep>
+      <dep>OpenCascade</dep>
+    </product>
+    <product name="libBatch">
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>cmake</dep>
+    </product>
+    <product name="YACSGEN">
+      <dep>Python</dep>
+    </product>
+    <product name="JOBMANAGER">
+      <dep>Qt</dep>
+      <dep>OmniORB</dep>
+      <dep>Sphinx</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="xdata">
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>PyQt</dep>
+      <dep>OmniORB</dep>
+      <dep>ParaView</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>MED</dep>
+      <dep>GEOM</dep>
+    </product>
+    <product name="HXX2SALOME">
+      <dep>Qt</dep>
+      <dep>HXX2SALOMEDOC</dep>
+    </product>
+    <product name="ATOMGEN">
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>PyQt</dep>
+      <dep>OmniORB</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="ATOMSOLV">
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>OmniORB</dep>
+      <dep>ParaView</dep>
+      <dep>OpenCascade</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>ATOMGEN</dep>
+    </product>
+    <product name="ATOMIC">
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>OmniORB</dep>
+      <dep>ParaView</dep>
+      <dep>Hdf5</dep>
+      <dep>OpenCascade</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="simanio">
+      <dep>wso2</dep>
+    </product>
+  </dependencies>
+</document>
diff --git a/config_Ubuntu_13.10_64bit.xml b/config_Ubuntu_13.10_64bit.xml
new file mode 100755
index 0000000..99e949b
--- /dev/null
+++ b/config_Ubuntu_13.10_64bit.xml
@@ -0,0 +1,1247 @@
+<document>
+
+  <config version="7.3.0"
+	  caption="SALOME v%1"
+ 	  copyright="&lt;h5>Copyright (C) 2007-2013 CEA/DEN, EDF R&amp;D, OPEN CASCADE&lt;br>&lt;br>Copyright (C) 2003-2007 OPEN CASCADE,&lt;br>EADS/CCR, LIP6, CEA/DEN, CEDRAT, EDF R&amp;D,&lt;br>LEG, PRINCIPIA R&amp;D, BUREAU VERITAS&lt;/h5>"
+          license="&lt;h5>GNU LGPL&lt;/h5>"
+	  platforms="Ubuntu 13.10 64bit"
+	  targetdir="${HOME}/salome_7.3.0"
+	  tempdir="/tmp"
+	  np="4"
+	  conf_opts="-DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_CXX_COMPILER:FILEPATH=/usr/bin/mpic++ -DCMAKE_C_COMPILER:FILEPATH=/usr/bin/mpicc -DMEDFILE_USE_MPI:BOOL=ON -DSALOME_USE_MPI:BOOL=ON -DSALOME_MED_PARTITIONER_PARMETIS:BOOL=OFF"
+	  optionallibs="libcppunit,libblsurf"/>
+
+  <buttons>
+    <button label="Launch SALOME"
+    	    tooltip="Click this button to launch SALOME"
+	    script="start_salome.sh"
+	    disable="false"/>
+    <button label="Release Notes"
+            tooltip="Click this button to read release notes"
+            script="release_notes.sh"
+	    disable="false"/>
+  </buttons>
+  <products>
+    <product name="KERNEL"
+             type="component"
+	     description="SALOME platform KERNEL module">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="50462,13816,149426"
+		    pickupenv="true"
+		    script="KERNEL.sh"/>
+    </product>
+    <product name="GUI"
+             type="component"
+	     description="SALOME platform GUI module">
+      <installation os="Ubuntu 13.10 64bit"
+	            version="7.3.0" 
+		    disable="false"
+		    installdiskspace="21881,18564,99969"
+		    script="GUI.sh"/>
+    </product>
+    <product name="GEOM"
+             type="component"
+	     description="SALOME platform GEOM module">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="55126,33456,208482"
+		    script="GEOM.sh"/>
+    </product>
+    <product name="MED"
+             type="component"
+	     description="SALOME platform MED module">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="228968,160420,475400"
+		    script="MED.sh"/>
+    </product>
+    <product name="SMESH"
+             type="component"
+	     description="SALOME platform SMESH module">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="64682,40532,233834"
+		    script="SMESH.sh"/>
+    </product>
+    <product name="VISU"
+             type="component"
+	     description="SALOME platform VISU module">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="true"
+		    installdiskspace="28204,13148,128936"
+		    script="VISU.sh"/>
+    </product>
+    <product name="PARAVIS"
+             type="component"
+	     description="SALOME platform PARAVIS module">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="400524,8724,1603452"
+		    script="PARAVIS.sh"/>
+    </product>
+    <product name="HEXABLOCK"
+             type="component"
+	     description="SALOME platform HEXABLOCK module">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="14157,25752,48601"
+		    script="HEXABLOCK.sh"/>
+    </product>
+    <product name="HEXABLOCKPLUGIN"
+             type="component"
+	     description="SALOME platform HEXABLOCK meshing algorithm plugin">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="800,636,4796"
+		    script="HEXABLOCKPLUGIN.sh"/>
+    </product>
+    <product name="NETGENPLUGIN"
+             type="component"
+	     description="SALOME platform NETGEN meshing algorithm plugin">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="4949,1540,17617"
+		    script="NETGENPLUGIN.sh"/>
+    </product>
+    <product name="GHS3DPLUGIN" 
+             type="component"
+	     description="SALOME platform GHS3D meshing algorithm plugin. For use this plugin you should add the path to ghs3d to your PATH environment variable.">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="4144,1880,13132"
+		    script="GHS3DPLUGIN.sh"/>
+    </product>
+    <product name="GHS3DPRLPLUGIN" 
+             type="component"
+	     description="SMESH plugin from CEA">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="2903,1112,9219"
+		    script="GHS3DPRLPLUGIN.sh"/>
+    </product>
+    <product name="BLSURFPLUGIN"
+             type="component"
+	     description="SMESH plugin from CEA sources">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="5582,2732,18050"
+		    script="BLSURFPLUGIN.sh"/>
+    </product>
+    <product name="HexoticPLUGIN" 
+             type="component"
+	     description="SMESH plugin from CEA">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    woguimode="true"
+		    installdiskspace="6650,4728,16670"
+		    script="HexoticPLUGIN.sh"/>
+    </product>
+    <product name="COMPONENT"
+             type="component"
+	     description="SALOME platform COMPONENT module">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="2789,1208,12209"
+		    script="COMPONENT.sh"/>
+    </product>
+    <product name="PYCALCULATOR"
+             type="component"
+	     description="SALOME platform PYCALCULATOR module">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="280,556,1280"
+		    script="PYCALCULATOR.sh"/>
+    </product>
+    <product name="CALCULATOR"
+             type="component"
+	     description="SALOME platform CALCULATOR module">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="541,728,1849"
+		    script="CALCULATOR.sh"/>
+    </product>
+    <product name="HELLO" 
+             type="component"
+	     description="Example SALOME C++ module: Hello.">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="886,724,3242"
+		    script="HELLO.sh"/>
+    </product>
+    <product name="PYHELLO" 
+             type="component"
+	     description="Example SALOME Python module: Hello.">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="834,692,2346"
+		    script="PYHELLO.sh"/>
+    </product>
+    <product name="ATOMGEN" 
+             type="component"
+	     description="Example from Salome tutorial.">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="421,500,1701"
+		    script="ATOMGEN.sh"/>
+    </product>
+    <product name="ATOMSOLV" 
+             type="component"
+	     description="Example from Salome tutorial.">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="512,576,3192"
+		    script="ATOMSOLV.sh"/>
+    </product>
+    <product name="ATOMIC" 
+             type="component"
+	     description="Example from Salome tutorial.">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="389,564,2989"
+		    script="ATOMIC.sh"/>
+    </product>
+    <product name="LIGHT"
+             type="component"
+	     description="LIGHT (no-CORBA-engine) SALOME module example">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="284,468,1944"
+		    script="LIGHT.sh"/>
+    </product>
+    <product name="PYLIGHT"
+             type="component"
+	     description="LIGHT Python (no-CORBA-engine) SALOME module example">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="140,376,692"
+		    script="PYLIGHT.sh"/>
+    </product>
+    <product name="RANDOMIZER"
+             type="component"
+	     description="SALOME-based module implement simple interface to calculate Sierpinsky fields">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="144,356,992"
+		    script="RANDOMIZER.sh"/>
+    </product>
+    <product name="SIERPINSKY"
+             type="component"
+	     description="SALOME-based module implement simple interface to calculate Sierpinsky fields">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="416,508,2976"
+		    script="SIERPINSKY.sh"/>
+    </product>
+    <product name="FILTER"
+             type="component"
+	     description="Med Memory package">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="true"
+		    installdiskspace="208,221,2958"
+		    script="FILTER.sh"/>
+    </product>
+    <product name="YACS"
+             type="component"
+	     description="Tool to supervise execution of complex interconnected scientific applications">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="30182,20736,141962"
+		    script="YACS.sh"/>
+    </product>
+    <product name="YACSGEN" 
+	     type="component"
+             description="Component and module generator for SALOME">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="646,1716,646"
+		    script="YACSGEN.sh"/>
+
+    </product>
+    <product name="JOBMANAGER" 
+	     type="component"
+             description="Component and module generator for SALOME">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="1970,1748,11402"
+		    script="JOBMANAGER.sh"/>
+    </product>
+    <product name="SAMPLES"
+             type="component"
+	     description="SALOME samples files">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="346780,346780,346780"
+		    script="SAMPLES.sh"/>
+    </product>
+    <product name="TUTORIAL"
+             type="component"
+	     description="Introduction to the developing of an application based on SALOME platform">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="4704,4704,4704"
+		    script="TUTORIAL.sh"/>
+    </product>
+    <product name="HOMARD"
+             type="component"
+	     description="SALOME platform HOMARD module">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="24765,18440,58193"
+		    script="HOMARD.sh"/>
+    </product>
+    <product name="xdata" 
+	     type="component"
+             description="Python module for types declaration in python classes">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="0.9.9" 
+		    disable="false"
+		    installdiskspace="6909,4908,6913"
+		    script="xdata.sh"/>
+    </product>
+    <product name="HXX2SALOME"
+	     type="component"
+             description="SALOME module generator">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="801,3520,3513"
+		    script="HXX2SALOME.sh"/>
+    </product>
+    <product name="HXX2SALOMEDOC"
+	     type="component"
+             description="SALOME module generator documentation">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="0,2308,2308"
+		    script="HXX2SALOMEDOC.sh"/>
+    </product>
+    <product name="DOCUMENTATION"
+	     type="component"
+             description="SALOME documentation">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="7.3.0" 
+		    disable="false"
+		    installdiskspace="8471,8224,9835"
+		    script="DOCUMENTATION.sh"/>
+    </product>
+    <product name="SIMAN"
+	     type="component"
+             description="SALOME simulation manager">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="1.0" 
+		    disable="false"
+		    installdiskspace="0,93200,0"
+		    script="SIMAN.sh"/>
+    </product>
+    <product name="tcltk" 
+             type="prerequisite"
+	     description="Tcl/Tk library">
+      <installation os="Ubuntu 13.10 64bit"
+	            version="8.6.0" 
+		    disable="false"
+		    installdiskspace="16721,66382,96834"
+		    script="tcltk.sh"/>
+    </product>
+    <product name="Python" 
+	     type="prerequisite"
+             description="Python language interpreter">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="2.7.3" 
+		    disable="false"
+		    installdiskspace="89540,68459,204651"
+		    script="Python.sh"/>
+    </product>
+    <product name="Qt" 
+	     type="prerequisite"
+	     description="Multiplatform C++ GUI application framework">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="4.8.4" 
+		    disable="false"
+		    installdiskspace="495828,736985,2448092"
+		    script="qt.sh"/>
+    </product>
+    <product name="Sip"
+	     type="prerequisite"
+             description="C++ to Python bindings generation tool">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="4.14.2" 
+		    disable="false"
+		    installdiskspace="608,4004,6450"
+		    script="sip.sh"/>
+    </product>
+    <product name="PyQt"
+	     type="prerequisite"
+	     description="Python bindings for Qt library">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="4.9.6" 
+		    disable="false"
+		    installdiskspace="17774,33593,143198"
+		    script="PyQt.sh"/>
+    </product>
+    <product name="QScintilla" 
+	     type="prerequisite"
+	     description="Auxiliary tool for source code editing and debugging">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="2.7" 
+		    disable="false"
+		    installdiskspace="4724,18769,38150"
+		    script="qscintilla.sh"/>
+    </product>
+    <product name="boost"
+	     type="prerequisite"
+	     description="Free peer-reviewed portable STL extension">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="1.52.0" 
+		    disable="false"
+		    installdiskspace="148317,437336,837696"
+		    script="boost.sh"/>
+    </product>
+    <product name="Swig" 
+	     type="prerequisite"
+	     description="Simplified Wrapper and Interface Generator">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="2.0.8" 
+		    disable="false"
+		    installdiskspace="5753,30745,44713"
+		    script="swig.sh"/>
+    </product>
+    <product name="freetype"
+	     type="prerequisite"
+	     description="Font service engine">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="2.4.11" 
+		    disable="false"
+		    installdiskspace="2999,13122,20651"
+		    script="freetype.sh"/>
+    </product>
+    <product name="ftgl"
+	     type="prerequisite"
+	     description="Library for using arbitrary fonts in OpenGL applications">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="2.1.3" 
+		    disable="true"
+		    installdiskspace="4083,3568,37844"
+		    script="ftgl.sh"/>
+    </product>
+    <product name="freeimage"
+	     type="prerequisite"
+	     description="Library for supporting different graphical formats PNG, BMP, JPEG, TIFF and others">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="3.15.4" 
+		    disable="false"
+		    installdiskspace="20110,25378,92558"
+		    script="freeimage.sh"/>
+    </product>
+    <product name="cmake"
+	     type="prerequisite"
+	     description="The cross-platform, open-source make system">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="2.8.10.2" 
+		    disable="false"
+		    installdiskspace="48244,34105,237245"
+		    script="cmake.sh"/>
+    </product>
+    <product name="gl2ps"
+	     type="prerequisite"
+	     description="Library for printing an OpenGL output to PostScript (and PDF, and SVG...).">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="1.3.8"
+		    disable="false"
+		    installdiskspace="568,560,2285"
+		    script="gl2ps.sh"/>
+    </product>
+    <product name="tbb"
+	     type="prerequisite"
+	     description="Intel(R) Threading Building Blocks">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="30_018oss"
+		    disable="false"
+		    installdiskspace="23534,0,23534"
+		    script="tbb.sh"/>
+    </product>
+    <product name="OpenCascade" 
+	     type="prerequisite"
+             description="Open CASCADE Technology">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="6.7.0" 
+		    disable="false"
+		    installdiskspace="157084,428325,1392563"
+		    script="OCCT.sh"/>
+    </product>
+    <product name="Qwt" 
+	     type="prerequisite"
+             description="2-D plotting extension for Qt library">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="5.2.1" 
+		    disable="false"
+		    installdiskspace="9990,10685,24336"
+		    script="qwt.sh"/>
+    </product>
+    <product name="OmniORB"
+	     type="prerequisite"
+             description="Open source Object Request Broker (ORB) library that implements the 2.3 specification of the Common Object Request Broker Architecture (CORBA)">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="4.1.6" 
+		    disable="false"
+		    installdiskspace="43909,19790,213687"
+		    script="omniORB.sh"/>
+    </product>
+    <product name="Hdf5" 
+	     type="prerequisite"
+	     description="Hierarchical Data Format library">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="1.8.10" 
+		    disable="false"
+		    installdiskspace="6058,93351,117456"
+		    script="hdf5.sh"/>
+    </product>
+    <product name="cgnslib"
+	     type="prerequisite"
+	     description="Provides a standard for recording and recovering computer data associated with the numerical solution of the equations of fluid dynamics.">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="3.1.3-4" 
+		    disable="false"
+		    installdiskspace="2078,6577,13778"
+		    script="cgnslib.sh"/>
+    </product>
+    <product name="Med"
+	     type="prerequisite"
+	     description="MED format interface library">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="3.0.7" 
+		    disable="false"
+		    installdiskspace="140767,165002,375774"
+		    script="med.sh"/>
+    </product>
+    <product name="Metis"
+	     type="prerequisite"
+	     description="Software package for partitioning unstructured graphs, partitioning meshes, and computing fill-reducing orderings of sparse matrices">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="4.0" 
+		    disable="false"
+		    installdiskspace="3033,2139,7586"
+		    script="metis.sh"/>
+    </product>
+    <product name="Scotch"
+	     type="prerequisite"
+	     description="Software package and library devoted to static mapping, partitioning and sparce matrix block ordering og graph and meshes">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="5.1.11" 
+		    disable="false"
+		    installdiskspace="2970,9509,19100"
+		    script="scotch.sh"/>
+    </product>
+    <product name="ParaView"
+	     type="prerequisite"
+	     description="Scalable, open-source visualization application">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="3.98.1" 
+		    disable="false"
+		    installdiskspace="227278,240114,1492710"
+		    script="ParaView.sh"/>
+    </product>
+    <product name="numpy"
+	     type="prerequisite"
+	     description="Fundamental package for scientific computing with Python">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="1.7.1" 
+		    disable="false"
+		    installdiskspace="27506,74020,193436"
+		    script="numpy.sh"/>
+    </product>
+    <product name="libBatch" 
+	     type="prerequisite"
+             description="Generic batch management library">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="2.1.0" 
+		    disable="false"
+		    installdiskspace="954,1300,5190"
+		    script="libBatch.sh"/>
+    </product>
+    <product name="expat"
+	     type="prerequisite"
+             description="C library for parsing XML">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="2.0.1" 
+		    disable="false"
+		    installdiskspace="1129,2391,6233"
+		    script="expat.sh"/>
+    </product>
+    <product name="Graphviz"
+	     type="prerequisite"
+             description="Graph Drawing Programs set">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="2.30.0" 
+		    disable="false"
+		    installdiskspace="11771,68067,112612"
+		    script="graphviz.sh"/>
+    </product>
+    <product name="Doxygen"
+	     type="prerequisite"
+             description="Documentation system for C++, C, Java, IDL, etc.">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="1.8.3.1" 
+		    disable="false"
+		    installdiskspace="8817,26285,85558"
+		    script="doxygen.sh"/>
+    </product>
+    <product name="docutils"
+	     type="prerequisite"
+             description="Utilites for processing plaintext documentation">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="0.10" 
+		    disable="true"
+		    installdiskspace="2163,6605,10858"
+		    script="docutils.sh"/>
+    </product>
+    <product name="Sphinx"
+	     type="prerequisite"
+             description="Tool for creation of documentation for Python projects. Includes docutils, setuptools, Jinja2 and pygments.">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="1.1.3" 
+		    disable="false"
+		    installdiskspace="14417,30740,57553"
+		    script="Sphinx.sh"/>
+    </product>
+    <product name="netgen" 
+	     type="prerequisite"
+             description="Quadrangle meshing algorithmic tool">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="4.9.13" 
+		    disable="false"
+		    installdiskspace="4634,8804,37071"
+		    script="netgen.sh"/>
+    </product>
+    <product name="MeshGems" 
+	     type="prerequisite"
+             description="DISTENE meshing tools">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="1.1" 
+		    disable="false"
+		    installdiskspace="164468,0,164468"
+		    script="DISTENE.sh"/>
+    </product>
+    <product name="homard"
+	     type="prerequisite"
+             description="HOMARD meshing tools">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="10.7" 
+		    disable="false"
+		    installdiskspace="18030,0,18030"
+		    script="homard.sh"/>
+    </product>
+    <product name="libxml2" 
+	     type="prerequisite"
+             description="XML C parser">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="2.9.0" 
+		    disable="false"
+		    installdiskspace="17681,45113,95387"
+		    script="libxml2.sh"/>
+    </product>
+    <product name="libgd" 
+	     type="prerequisite"
+             description="GD Graphics Library">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="2.1.0" 
+		    disable="false"
+		    installdiskspace="17681,45113,95387"
+		    script="libgd.sh"/>
+    </product>
+    <product name="wso2" 
+	     type="prerequisite"
+             description="WSO2 Web Services Framework for C++ (WSF/C++) is an extension to WSO2 Web Services Framework for C (WSF/C) wrapping the existing API.">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="2.1.0" 
+		    disable="false"
+		    installdiskspace="45118,89260,202957"
+		    script="wso2.sh"/>
+    </product>
+    <product name="simanio" 
+	     type="prerequisite"
+             description="Interface library for SALOME Simulation manager (SIMAN).">
+      <installation os="Ubuntu 13.10 64bit"
+                    version="0.1" 
+		    disable="false"
+		    installdiskspace="268,620,1796"
+		    script="simanio.sh"/>
+    </product>
+  </products>
+  <dependencies>
+    <product name="KERNEL">
+      <dep>boost</dep>
+      <dep>Python</dep>
+      <dep>numpy</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>libxml2</dep>
+      <dep>Sphinx</dep>
+      <dep>libBatch</dep>
+      <dep>simanio</dep>
+    </product>
+    <product name="GUI">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Qwt</dep>
+      <dep>Hdf5</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Sip</dep>
+      <dep>PyQt</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>libxml2</dep>
+      <dep>KERNEL</dep>
+    </product>
+    <product name="GEOM">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>Sphinx</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="MED">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>ParaView</dep>
+      <dep>Med</dep>
+      <dep>Metis</dep>
+      <dep>Scotch</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>libxml2</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="SMESH">
+      <dep>cgnslib</dep>
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>ParaView</dep>
+      <dep>Med</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>Sphinx</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="HEXABLOCK">
+      <dep>boost</dep>
+      <dep>Python</dep>
+      <dep>OmniORB</dep>
+      <dep>Qt</dep>
+      <dep>OpenCascade</dep>
+      <dep>ParaView</dep>
+      <dep>Sphinx</dep>
+      <dep>libxml2</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+    </product>
+    <product name="HOMARD">
+      <dep>homard</dep>
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>Sphinx</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+      <dep>SMESH</dep>      
+    </product>
+    <product name="VISU">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Qwt</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="PARAVIS">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Qwt</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="HEXABLOCKPLUGIN">
+      <dep>boost</dep>
+      <dep>OmniORB</dep>
+      <dep>OpenCascade</dep>
+      <dep>Doxygen</dep>
+      <dep>Qt</dep>
+      <dep>ParaView</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+      <dep>SMESH</dep>
+      <dep>HEXABLOCK</dep>
+    </product>
+    <product name="NETGENPLUGIN">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>netgen</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+      <dep>SMESH</dep>
+    </product>
+    <product name="GHS3DPLUGIN">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>MeshGems</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>SMESH</dep>
+    </product>
+    <product name="GHS3DPRLPLUGIN">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>MeshGems</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+      <dep>SMESH</dep>
+    </product>
+    <product name="BLSURFPLUGIN">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>MeshGems</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+      <dep>SMESH</dep>
+    </product>
+    <product name="HexoticPLUGIN">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Hdf5</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>MeshGems</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>GEOM</dep>
+      <dep>MED</dep>
+      <dep>SMESH</dep>
+      <dep>BLSURFPLUGIN</dep>
+    </product>
+    <product name="COMPONENT">
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Qwt</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Sip</dep>
+      <dep>PyQt</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="PYCALCULATOR">
+      <dep>Python</dep>
+      <dep>OmniORB</dep>
+      <dep>Med</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="CALCULATOR">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>OmniORB</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="HELLO">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>OmniORB</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="PYHELLO">
+      <dep>Python</dep>
+      <dep>OmniORB</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="LIGHT">
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>Hdf5</dep>
+      <dep>ParaView</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="PYLIGHT">
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>Hdf5</dep>
+      <dep>ParaView</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="RANDOMIZER">
+      <dep>Python</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="SIERPINSKY">
+      <dep>libgd</dep>
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>SMESH</dep>
+      <dep>RANDOMIZER</dep>
+    </product>
+    <product name="FILTER">
+      <dep>boost</dep>
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>Qt</dep>
+      <dep>Qwt</dep>
+      <dep>Hdf5</dep>
+      <dep>Med</dep>
+      <dep>ParaView</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>MED</dep>
+    </product>
+    <product name="YACS">
+      <dep>OpenCascade</dep>
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>OmniORB</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>Sphinx</dep>
+      <dep>QScintilla</dep>
+      <dep>libxml2</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="Python">
+      <dep>tcltk</dep>
+    </product>
+    <product name="Sip">
+      <dep>Python</dep>
+      <dep>Qt</dep>
+    </product>
+    <product name="PyQt">
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>Sip</dep>
+    </product>
+    <product name="QScintilla">
+      <dep>Qt</dep>
+      <dep>Python</dep>
+      <dep>Sip</dep>
+      <dep>PyQt</dep>
+    </product>
+    <product name="Sphinx">
+      <dep>Python</dep>
+    </product>
+    <product name="boost">
+      <dep>Python</dep>
+    </product>
+    <product name="Swig">
+      <dep>Python</dep>
+      <dep>tcltk</dep>
+      <dep>boost</dep>
+    </product>
+    <product name="ftgl">
+      <dep>freetype</dep>
+    </product>
+    <product name="gl2ps">
+      <dep>cmake</dep>
+    </product>
+    <product name="OpenCascade">
+      <dep>tbb</dep>
+      <dep>gl2ps</dep>
+      <dep>freeimage</dep>
+      <dep>freetype</dep>
+      <dep>tcltk</dep>
+    </product>
+    <product name="PatchForOpenCascade">
+      <dep>OpenCascade</dep>
+    </product>
+    <product name="Qwt">
+      <dep>Qt</dep>
+    </product>
+    <product name="OmniORB">
+      <dep>Python</dep>
+    </product>
+    <product name="Hdf5">
+      <dep>cmake</dep>
+    </product>
+    <product name="Med">
+      <dep>Hdf5</dep>
+      <dep>Python</dep>
+      <dep>cmake</dep>
+    </product>
+    <product name="cgnslib">
+      <dep>Hdf5</dep>
+    </product>
+    <product name="ParaView">
+      <dep>Python</dep>
+      <dep>tcltk</dep>
+      <dep>Hdf5</dep>
+      <dep>cmake</dep>
+      <dep>Qt</dep>
+      <dep>boost</dep>
+      <dep>gl2ps</dep>
+    </product>
+    <product name="numpy">
+      <dep>Python</dep>
+    </product>
+    <product name="Graphviz">
+      <dep>Python</dep>
+      <dep>tcltk</dep>
+      <dep>Swig</dep>
+      <dep>expat</dep>
+    </product>
+    <product name="Doxygen">
+      <dep>Graphviz</dep>
+    </product>
+    <product name="docutils">
+      <dep>Python</dep>
+    </product>
+    <product name="libxml2">
+      <dep>Python</dep>
+    </product>    
+    <product name="netgen">
+      <dep>tcltk</dep>
+      <dep>OpenCascade</dep>
+    </product>
+    <product name="libBatch">
+      <dep>Python</dep>
+      <dep>Swig</dep>
+      <dep>cmake</dep>
+    </product>
+    <product name="YACSGEN">
+      <dep>Python</dep>
+    </product>
+    <product name="JOBMANAGER">
+      <dep>Qt</dep>
+      <dep>OmniORB</dep>
+      <dep>Sphinx</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="xdata">
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>PyQt</dep>
+      <dep>OmniORB</dep>
+      <dep>ParaView</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>MED</dep>
+      <dep>GEOM</dep>
+    </product>
+    <product name="HXX2SALOME">
+      <dep>Qt</dep>
+      <dep>HXX2SALOMEDOC</dep>
+    </product>
+    <product name="ATOMGEN">
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>PyQt</dep>
+      <dep>OmniORB</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="ATOMSOLV">
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>OmniORB</dep>
+      <dep>ParaView</dep>
+      <dep>OpenCascade</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+      <dep>ATOMGEN</dep>
+    </product>
+    <product name="ATOMIC">
+      <dep>Python</dep>
+      <dep>Qt</dep>
+      <dep>OmniORB</dep>
+      <dep>ParaView</dep>
+      <dep>Hdf5</dep>
+      <dep>OpenCascade</dep>
+      <dep>Doxygen</dep>
+      <dep>Graphviz</dep>
+      <dep>KERNEL</dep>
+      <dep>GUI</dep>
+    </product>
+    <product name="simanio">
+      <dep>wso2</dep>
+    </product>
+  </dependencies>
+</document>
diff --git a/config_files/ATOMGEN.sh b/config_files/ATOMGEN.sh
index a640585..c3c5a74 100755
--- a/config_files/ATOMGEN.sh
+++ b/config_files/ATOMGEN.sh
@@ -88,7 +88,7 @@ fi
 
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
-check_jb ./build.sh -d -p ${INST_ROOT} ATOMGEN
+check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} ATOMGEN
 
 cd ${CUR_DIR}
 
@@ -136,7 +136,11 @@ SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="ATOMGEN_${SALOME_VERSION}"
 export PRODUCT_SRC="ATOMGEN_SRC_${SALOME_VERSION}"
diff --git a/config_files/ATOMIC.sh b/config_files/ATOMIC.sh
index b535254..711de85 100755
--- a/config_files/ATOMIC.sh
+++ b/config_files/ATOMIC.sh
@@ -88,7 +88,7 @@ fi
 
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
-check_jb ./build.sh -d -p ${INST_ROOT} ATOMIC
+check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} ATOMIC
 
 cd ${CUR_DIR}
 
@@ -136,7 +136,11 @@ SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="ATOMIC_${SALOME_VERSION}"
 export PRODUCT_SRC="ATOMIC_SRC_${SALOME_VERSION}"
diff --git a/config_files/ATOMSOLV.sh b/config_files/ATOMSOLV.sh
index 1b4e3e5..887851f 100755
--- a/config_files/ATOMSOLV.sh
+++ b/config_files/ATOMSOLV.sh
@@ -88,7 +88,7 @@ fi
 
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
-check_jb ./build.sh -d -p ${INST_ROOT} ATOMSOLV
+check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} ATOMSOLV
 
 cd ${CUR_DIR}
 
@@ -137,7 +137,11 @@ SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="ATOMSOLV_${SALOME_VERSION}"
 export PRODUCT_SRC="ATOMSOLV_SRC_${SALOME_VERSION}"
diff --git a/config_files/BLSURFPLUGIN.sh b/config_files/BLSURFPLUGIN.sh
index 9005ab2..e9dc380 100755
--- a/config_files/BLSURFPLUGIN.sh
+++ b/config_files/BLSURFPLUGIN.sh
@@ -90,9 +90,9 @@ fi
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
 if [ "${INST_WITH_GUI}" = "FALSE" ] ; then
-    check_jb ./build.sh -d -p ${INST_ROOT} -DSALOME_BUILD_GUI=OFF BLSURFPLUGIN
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} -DSALOME_BUILD_GUI=OFF BLSURFPLUGIN
 else
-    check_jb ./build.sh -d -p ${INST_ROOT} BLSURFPLUGIN
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} BLSURFPLUGIN
 fi
 
 cd ${CUR_DIR}
@@ -134,20 +134,23 @@ try_preinstalled
 
 source ./common.sh
 
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-SRC_DIR=$8;
-shift
-REMOVE_SRC_TMP=$8;
-shift
-INST_WITH_GUI=$9;
-shift
-SINGLE_DIR=$9;
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    INST_WITH_GUI=${11};
+    shift
+    SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="BLSURFPLUGIN_${SALOME_VERSION}"
 export PRODUCT_SRC="BLSURFPLUGIN_SRC_${SALOME_VERSION}"
diff --git a/config_files/CALCULATOR.sh b/config_files/CALCULATOR.sh
index 224900f..7aaa1e5 100755
--- a/config_files/CALCULATOR.sh
+++ b/config_files/CALCULATOR.sh
@@ -88,7 +88,7 @@ fi
 
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
-check_jb ./build.sh -d -p ${INST_ROOT} CALCULATOR
+check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} CALCULATOR
 
 cd ${CUR_DIR}
 
@@ -137,7 +137,11 @@ SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="CALCULATOR_${SALOME_VERSION}"
 export PRODUCT_SRC="CALCULATOR_SRC_${SALOME_VERSION}"
diff --git a/config_files/COMPONENT.sh b/config_files/COMPONENT.sh
index 82814ce..5aa895a 100755
--- a/config_files/COMPONENT.sh
+++ b/config_files/COMPONENT.sh
@@ -88,7 +88,7 @@ fi
 
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
-check_jb ./build.sh -d -p ${INST_ROOT} COMPONENT
+check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} COMPONENT
 
 cd ${CUR_DIR}
 
@@ -136,7 +136,11 @@ SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="COMPONENT_${SALOME_VERSION}"
 export PRODUCT_SRC="COMPONENT_SRC_${SALOME_VERSION}"
diff --git a/config_files/DEBIANFORSALOME-3.1.sh b/config_files/DEBIANFORSALOME-3.1.sh
index 9c086d3..c5f2771 100755
--- a/config_files/DEBIANFORSALOME-3.1.sh
+++ b/config_files/DEBIANFORSALOME-3.1.sh
@@ -59,9 +59,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
+REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="DEBIANLIBS-3.1"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
diff --git a/config_files/DISTENE.sh b/config_files/DISTENE.sh
index 0b8683e..2c0cfe7 100755
--- a/config_files/DISTENE.sh
+++ b/config_files/DISTENE.sh
@@ -19,17 +19,47 @@ VERSION_MESHGEMS=1.1
 
 # Platform suffuix
 if test `uname -m` = "x86_64" ; then
-  PLT_SUFFIX="_64"
+    PLT_SUFFIX="_64"
 fi
 
 check_version(){
 # No way to check version!
-return 0
+    return 0
 }
 
-print_env_bin()
+print_env_sys()
 {
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+
+    if [ -e /opt/DISTENE/Tools/bin/dlim8.var.sh ] ; then
+	LIC_FILE=`grep "DLIM8VAR=" /opt/DISTENE/Tools/bin/dlim8.var.sh | awk '{print $2}' | awk -F: '{print $3}' | awk -F/ '{print $1}'`
+    fi
+
+    cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+#${DELIM} ${PRODUCT_TYPE} ${DELIM}
+if [ -z \$DISTENE_HOME ]; then
+   export DISTENE_HOME=/opt/DISTENE
+fi
+export MESHGEMS_ROOT_DIR=${DISTENE_HOME}/MeshGems-${VERSION_MESHGEMS}/Products
+export LD_LIBRARY_PATH=${MESHGEMS_ROOT_DIR}/lib/Linux${PLT_SUFFIX}:\${LD_LIBRARY_PATH} 
+export PATH=${MESHGEMS_ROOT_DIR}/bin/Linux${PLT_SUFFIX}:\${PATH} 
+# license activation
+export LICENSE_FILE=${DISTENE_HOME}/Tools/bin/dlim8.var.sh
+if [ -e "\${LICENSE_FILE}" ] ; then
+    export SIMULOGD_LICENSE_FILE=${LIC_FILE}
+    export DISTENE_LICENSE_FILE='Use global envvar: DLIM8VAR'
+    export DISTENE_LICENCE_FILE_FOR_MGCLEANER=\${LICENSE_FILE}
+    export DISTENE_LICENCE_FILE_FOR_YAMS=\${LICENSE_FILE}
+    source \${LICENSE_FILE}
+fi
+##
+EOF
+    (test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+    make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+}
+
+print_env_bin()
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
 #${DELIM} ${PRODUCT_TYPE} ${DELIM}
 export MESHGEMS_ROOT_DIR=\${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}/Products
 export LD_LIBRARY_PATH=\${MESHGEMS_ROOT_DIR}/lib/Linux${PLT_SUFFIX}:\${LD_LIBRARY_PATH} 
@@ -45,72 +75,102 @@ if [ -e "\${LICENSE_FILE}" ] ; then
 fi
 ##
 EOF
-(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+	(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
 
-print_env_src()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
+    print_env_src()
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
 #${DELIM} ${PRODUCT_TYPE}_src ${DELIM}
 # nothing to do
 ##
 EOF
-(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+	(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
 
-try_preinstalled(){
-try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-return $?
-}
+    try_preinstalled(){
+	try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	return $?
+    }
 
-install_source()
-{
-echo "It's impossible to install ${PRODUCT} from sources"
-}
+    install_source()
+    {
+	echo "It's impossible to install ${PRODUCT} from sources"
+    }
 
-install_source_and_build()
-{
-install_binary
+    install_source_and_build()
+    {
+	if [ -d /opt/DISTENE/MeshGems-${VERSION_MESHGEMS}/Products ]; then
+            echo "use built-in MeshGems"
+	    print_env_sys
+	else
+	    install_binary
 
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    echo "0" > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
-    du -sk ${PRODUCT_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
-    cp ${INST_ROOT}/${PRODUCT_TYPE}.bin.size ${INST_ROOT}/${PRODUCT_TYPE}.build.size
-fi
-}
+	    if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+		echo "0" > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
+		du -sk ${PRODUCT_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
+		cp ${INST_ROOT}/${PRODUCT_TYPE}.bin.size ${INST_ROOT}/${PRODUCT_TYPE}.build.size
+	    fi
+	fi
+    }
 
-install_binary()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-source ${INSTALL_WORK}/${SHRC}
+    install_binary()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	source ${INSTALL_WORK}/${SHRC}
 
 # create a product directory
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
-check_jb tar xfz ${BIN_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
+	check_jb tar xfz ${BIN_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
 
 # to generate environment scripts
-try_preinstalled
-}
+	try_preinstalled
+    }
+
+#echo
+#echo "Distene: number of args = " $#
+##loop over args
+#    i=1
+#    for var in "$@"
+#    do
+#	echo "var[$i]=$var"
+#	let i=i+1
+#    done
 
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-SRC_DIR=$8;
-REMOVE_SRC_TMP=$9;
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    REMOVE_SRC_TMP=$9;
 shift
 BIN_DIR=$9;
-test $# = 10 && shift && SINGLE_DIR=$9
-export PRODUCT="MeshGems-${VERSION_MESHGEMS}"
-export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
-export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
-export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
-source ./common.sh
-${PROCEDURE} 
+[ $# -ge 10 ] && shift && export NP=$9
+[ $# -ge 11 ] && shift && SINGLE_DIR=${11}
+
+#echo 
+#echo "PROCEDURE=" ${PROCEDURE}
+#echo "INSTALL_WORK=" ${INSTALL_WORK}
+#echo "SOURCE_DIR=" ${SOURCE_DIR}
+#echo "INST_ROOT=" ${INST_ROOT}
+#echo "PRODUCT_SEQUENCE=" ${PRODUCT_SEQUENCE}
+#echo "PRODUCT_TYPE=" ${PRODUCT_TYPE}
+#echo "INSTALL_PRODUCTS=" ${INSTALL_PRODUCTS}
+#echo "NP=" ${NP}
+#echo "DISTENE bin_dir=" ${BIN_DIR}
+#echo "DISTENE single_dir=" ${SINGLE_DIR}
+if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
+    
+    export PRODUCT="MeshGems-${VERSION_MESHGEMS}"
+    export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
+    export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
+    export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
+    source ./common.sh
+    ${PROCEDURE} 
diff --git a/config_files/DOCUMENTATION.sh b/config_files/DOCUMENTATION.sh
index dc3a661..f273020 100755
--- a/config_files/DOCUMENTATION.sh
+++ b/config_files/DOCUMENTATION.sh
@@ -69,7 +69,7 @@ fi
 
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
-check_jb ./build.sh -d -p ${INST_ROOT} DOCUMENTATION
+check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} DOCUMENTATION
 
 cd ${CUR_DIR}
 
@@ -115,7 +115,11 @@ SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="DOCUMENTATION_${SALOME_VERSION}"
 export PRODUCT_SRC="DOCUMENTATION_SRC_${SALOME_VERSION}"
diff --git a/config_files/GEOM.sh b/config_files/GEOM.sh
index 2619359..144530a 100755
--- a/config_files/GEOM.sh
+++ b/config_files/GEOM.sh
@@ -89,9 +89,9 @@ fi
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
 if [ ${INST_WITH_GUI} = "FALSE" ] ; then
-    check_jb ./build.sh -d -p ${INST_ROOT} -DSALOME_BUILD_GUI=OFF GEOM
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} -DSALOME_BUILD_GUI=OFF ${CONF_OPTS} GEOM
 else
-    check_jb ./build.sh -d -p ${INST_ROOT} GEOM
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} GEOM
 fi
 
 cd ${CUR_DIR}
@@ -133,20 +133,23 @@ try_preinstalled
 
 source ./common.sh
 
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-SRC_DIR=$8;
-shift
-REMOVE_SRC_TMP=$8;
-shift
-INST_WITH_GUI=$9;
-shift
-SINGLE_DIR=$9;
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    INST_WITH_GUI=${11};
+    shift
+    SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="GEOM_${SALOME_VERSION}"
 export PRODUCT_SRC="GEOM_SRC_${SALOME_VERSION}"
diff --git a/config_files/GHS3DPLUGIN.sh b/config_files/GHS3DPLUGIN.sh
index 65c4dfe..5193586 100755
--- a/config_files/GHS3DPLUGIN.sh
+++ b/config_files/GHS3DPLUGIN.sh
@@ -89,9 +89,9 @@ fi
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
 if [ ${INST_WITH_GUI} = "FALSE" ] ; then
-    check_jb ./build.sh -d -p ${INST_ROOT} -DSALOME_BUILD_GUI=OFF GHS3DPLUGIN
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} -DSALOME_BUILD_GUI=OFF GHS3DPLUGIN
 else
-    check_jb ./build.sh -d -p ${INST_ROOT} GHS3DPLUGIN
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} GHS3DPLUGIN
 fi
 
 cd ${CUR_DIR}
@@ -133,20 +133,23 @@ try_preinstalled
 
 source ./common.sh
 
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-SRC_DIR=$8;
-shift
-REMOVE_SRC_TMP=$8;
-shift
-INST_WITH_GUI=$9;
-shift
-SINGLE_DIR=$9;
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    INST_WITH_GUI=${11};
+    shift
+    SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="GHS3DPLUGIN_${SALOME_VERSION}"
 export PRODUCT_SRC="GHS3DPLUGIN_SRC_${SALOME_VERSION}"
diff --git a/config_files/GHS3DPRLPLUGIN.sh b/config_files/GHS3DPRLPLUGIN.sh
index 49b2c5e..12accc1 100755
--- a/config_files/GHS3DPRLPLUGIN.sh
+++ b/config_files/GHS3DPRLPLUGIN.sh
@@ -88,9 +88,9 @@ fi
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
 if [ ${INST_WITH_GUI} = "FALSE" ] ; then
-    check_jb ./build.sh -d -p ${INST_ROOT} -DSALOME_BUILD_GUI=OFF GHS3DPRLPLUGIN
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} -DSALOME_BUILD_GUI=OFF ${CONF_OPTS} GHS3DPRLPLUGIN
 else
-    check_jb ./build.sh -d -p ${INST_ROOT} GHS3DPRLPLUGIN
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} GHS3DPRLPLUGIN
 fi
 
 cd ${CUR_DIR}
@@ -132,20 +132,23 @@ try_preinstalled
 
 source ./common.sh
 
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-SRC_DIR=$8;
-shift
-REMOVE_SRC_TMP=$8;
-shift
-INST_WITH_GUI=$9;
-shift
-SINGLE_DIR=$9;
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    INST_WITH_GUI=${11};
+    shift
+    SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="GHS3DPRLPLUGIN_${SALOME_VERSION}"
 export PRODUCT_SRC="GHS3DPRLPLUGIN_SRC_${SALOME_VERSION}"
diff --git a/config_files/GUI.sh b/config_files/GUI.sh
index 56eff0f..e3c142a 100755
--- a/config_files/GUI.sh
+++ b/config_files/GUI.sh
@@ -89,7 +89,7 @@ fi
 
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
-check_jb ./build.sh -d -p ${INST_ROOT} GUI
+check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} GUI ${CONF_OPTS}
 
 cd ${CUR_DIR}
 
@@ -126,18 +126,23 @@ try_preinstalled
 
 source ./common.sh
 
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-SRC_DIR=$8;
-shift
-REMOVE_SRC_TMP=$8;
-shift
-SINGLE_DIR=$9;
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    INST_WITH_GUI=${11};
+    shift
+    SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="GUI_${SALOME_VERSION}"
 export PRODUCT_SRC="GUI_SRC_${SALOME_VERSION}"
diff --git a/config_files/HELLO.sh b/config_files/HELLO.sh
index c5bf7eb..4596645 100755
--- a/config_files/HELLO.sh
+++ b/config_files/HELLO.sh
@@ -87,7 +87,7 @@ fi
 
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
-check_jb ./build.sh -d -p ${INST_ROOT} HELLO
+check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} HELLO
 
 cd ${CUR_DIR}
 
@@ -136,7 +136,11 @@ SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="HELLO_${SALOME_VERSION}"
 export PRODUCT_SRC="HELLO_SRC_${SALOME_VERSION}"
diff --git a/config_files/HEXABLOCK.sh b/config_files/HEXABLOCK.sh
index d4dfaa9..987edf0 100755
--- a/config_files/HEXABLOCK.sh
+++ b/config_files/HEXABLOCK.sh
@@ -88,9 +88,9 @@ fi
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
 if [ "${INST_WITH_GUI}" = "FALSE" ] ; then
-    check_jb ./build.sh -d -p ${INST_ROOT} -DSALOME_BUILD_GUI=OFF HEXABLOCK
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} -DSALOME_BUILD_GUI=OFF ${CONF_OPTS} HEXABLOCK
 else
-    check_jb ./build.sh -d -p ${INST_ROOT} HEXABLOCK
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} HEXABLOCK
 fi
 
 cd ${CUR_DIR}
@@ -133,20 +133,23 @@ try_preinstalled
 
 source ./common.sh
 
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-SRC_DIR=$8;
-shift
-REMOVE_SRC_TMP=$8;
-shift
-INST_WITH_GUI=$9;
-shift
-SINGLE_DIR=$9;
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    INST_WITH_GUI=${11};
+    shift
+    SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="HEXABLOCK_${SALOME_VERSION}"
 export PRODUCT_SRC="HEXABLOCK_SRC_${SALOME_VERSION}"
diff --git a/config_files/HEXABLOCKPLUGIN.sh b/config_files/HEXABLOCKPLUGIN.sh
index d9c99df..fa9c3e3 100755
--- a/config_files/HEXABLOCKPLUGIN.sh
+++ b/config_files/HEXABLOCKPLUGIN.sh
@@ -89,9 +89,9 @@ fi
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
 if [ "${INST_WITH_GUI}" = "FALSE" ] ; then
-    check_jb ./build.sh -d -p ${INST_ROOT} -DSALOME_BUILD_GUI=OFF HEXABLOCKPLUGIN
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} -DSALOME_BUILD_GUI=OFF ${CONF_OPTS} HEXABLOCKPLUGIN
 else
-    check_jb ./build.sh -d -p ${INST_ROOT} HEXABLOCKPLUGIN
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} HEXABLOCKPLUGIN
 fi
 
 cd ${CUR_DIR}
@@ -144,9 +144,11 @@ SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-INST_WITH_GUI=$9;
+export NP=$9;
+export CONF_OPTS=${10};
 shift
-SINGLE_DIR=$9;
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="HEXABLOCKPLUGIN_${SALOME_VERSION}"
 export PRODUCT_SRC="HEXABLOCKPLUGIN_SRC_${SALOME_VERSION}"
diff --git a/config_files/HOMARD.sh b/config_files/HOMARD.sh
index a683228..00c0cb0 100755
--- a/config_files/HOMARD.sh
+++ b/config_files/HOMARD.sh
@@ -88,7 +88,7 @@ fi
 
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
-check_jb ./build.sh -d -p ${INST_ROOT} HOMARD
+check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} HOMARD
 
 cd ${CUR_DIR}
 
@@ -130,20 +130,23 @@ try_preinstalled
 
 source ./common.sh
 
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-SRC_DIR=$8;
-shift
-REMOVE_SRC_TMP=$8;
-shift
-INST_WITH_GUI=$9;
-shift
-SINGLE_DIR=$9;
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    INST_WITH_GUI=${11};
+    shift
+    SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="HOMARD_${SALOME_VERSION}"
 export PRODUCT_SRC="HOMARD_SRC_${SALOME_VERSION}"
diff --git a/config_files/HXX2SALOME.sh b/config_files/HXX2SALOME.sh
index 1768877..f7e2769 100755
--- a/config_files/HXX2SALOME.sh
+++ b/config_files/HXX2SALOME.sh
@@ -81,7 +81,7 @@ GCC=`which gcc`
 cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
 used gcc=${GCC}
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make
+check_job ${PRODUCT_DIR}/MAKE.LOG make # do not build in // -j${NP}
 
 check_job ${PRODUCT_DIR}/MAKEINSTALL.LOG make install
 
@@ -120,10 +120,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="HXX2SALOME_${SALOME_VERSION}"
 export PRODUCT_SRC="HXX2SALOME_SRC_${SALOME_VERSION}"
diff --git a/config_files/HXX2SALOMEDOC.sh b/config_files/HXX2SALOMEDOC.sh
index ba61fbb..69c8057 100755
--- a/config_files/HXX2SALOMEDOC.sh
+++ b/config_files/HXX2SALOMEDOC.sh
@@ -86,10 +86,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="HXX2SALOMEDOC_${SALOME_VERSION}"
 export PRODUCT_SRC="HXX2SALOMEDOC_SRC_${SALOME_VERSION}"
diff --git a/config_files/HexoticPLUGIN.sh b/config_files/HexoticPLUGIN.sh
index e134bdb..490a756 100755
--- a/config_files/HexoticPLUGIN.sh
+++ b/config_files/HexoticPLUGIN.sh
@@ -88,9 +88,9 @@ fi
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
 if [ ${INST_WITH_GUI} = "FALSE" ] ; then
-    check_jb ./build.sh -d -p ${INST_ROOT} -DSALOME_BUILD_GUI=OFF HexoticPLUGIN
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} -DSALOME_BUILD_GUI=OFF ${CONF_OPTS} HexoticPLUGIN
 else
-    check_jb ./build.sh -d -p ${INST_ROOT} HexoticPLUGIN
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} HexoticPLUGIN
 fi
 
 cd ${CUR_DIR}
@@ -132,20 +132,23 @@ try_preinstalled
 
 source ./common.sh
 
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-SRC_DIR=$8;
-shift
-REMOVE_SRC_TMP=$8;
-shift
-INST_WITH_GUI=$9;
-shift
-SINGLE_DIR=$9;
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    INST_WITH_GUI=${11};
+    shift
+    SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="HexoticPLUGIN_${SALOME_VERSION}"
 export PRODUCT_SRC="HexoticPLUGIN_SRC_${SALOME_VERSION}"
diff --git a/config_files/JOBMANAGER.sh b/config_files/JOBMANAGER.sh
index e1d3b29..d11015f 100755
--- a/config_files/JOBMANAGER.sh
+++ b/config_files/JOBMANAGER.sh
@@ -82,7 +82,7 @@ fi
 
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
-check_jb ./build.sh -d -p ${INST_ROOT} JOBMANAGER
+check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} JOBMANAGER
 
 cd ${CUR_DIR}
 
@@ -130,7 +130,11 @@ SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="JOBMANAGER_${SALOME_VERSION}"
 export PRODUCT_SRC="JOBMANAGER_SRC_${SALOME_VERSION}"
diff --git a/config_files/KERNEL.sh b/config_files/KERNEL.sh
index f417f1e..fd90ad1 100755
--- a/config_files/KERNEL.sh
+++ b/config_files/KERNEL.sh
@@ -88,13 +88,25 @@ fi
 
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
-check_jb ./build.sh -d -p ${INST_ROOT} KERNEL
+check_jb ./build.sh -j ${NP} -j ${NP} -d -p ${INST_ROOT} KERNEL ${CONF_OPTS}
+status=$?
+if [ "$status" != 0 ]; then
+	    echo "Failed to build KERNEL module see LOGS/$(ls -t LOGS | head -1) for details"
+	    exit 1
+fi
+
+#install missing createAppli.sh
+if [ -f ${PRODUCT_SRC_DIR}/bin/createAppli.sh ]; then
+   cp ${PRODUCT_SRC_DIR}/bin/createAppli.sh ${PRODUCT_DIR}/bin/salome/createAppli.sh
+else
+   echo "No createAppli.sh found"
+fi
 
 # create environment for the built binaries
 cd ${CUR_DIR}
 
 # remove sources and temporary files after building
-if [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
+if [ ${REMOVE_SRC_TMP} = "TRUE" ]; then
     test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
     test -d ${INST_ROOT}/"KERNEL_BUILD" && rm -fr ${INST_ROOT}/"KERNEL_BUILD"
 fi
@@ -131,6 +143,7 @@ if [ -f ${PRODUCT_DIR}/bin/salome/createAppli.sh ] ; then
     pushd ${PRODUCT_DIR} > /dev/null
     version=`cat bin/salome/VERSION | awk -F: '{print $2}' | tr -d '[:space:]'`
     dir="${HOME}/salome_appli_${version}"
+    mkdir -p ${dir}
     ./bin/salome/createAppli.sh ${dir}
     if [ -d ${dir}/env.d ] ; then
 	rm -rf ${dir}/env.d/*.sh
@@ -147,22 +160,47 @@ make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}
 
 source ./common.sh
 
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-SRC_DIR=$8;
-shift
-REMOVE_SRC_TMP=$8;
-shift
-shift
-SINGLE_DIR=$9;
-if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
-export PRODUCT="KERNEL_${SALOME_VERSION}"
-export PRODUCT_SRC="KERNEL_SRC_${SALOME_VERSION}"
-export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
-export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT_SRC}
-${PROCEDURE} 
+#echo
+#echo "Kernel: number of args = " $#
+#loop over args
+#    i=1
+#    for var in "$@"
+#    do
+#	echo "var[$i]=$var"
+#	let i=i+1
+#    done
+
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    shift
+    SINGLE_DIR=${11};
+
+#echo 
+#echo "PROCEDURE=" ${PROCEDURE}
+#echo "INSTALL_WORK=" ${INSTALL_WORK}
+#echo "SOURCE_DIR=" ${SOURCE_DIR}
+#echo "INST_ROOT=" ${INST_ROOT}
+#echo "PRODUCT_SEQUENCE=" ${PRODUCT_SEQUENCE}
+#echo "PRODUCT_TYPE=" ${PRODUCT_TYPE}
+#echo "INSTALL_PRODUCTS=" ${INSTALL_PRODUCTS}
+#echo "SINGLE_DIR=" ${SINGLE_DIR}
+#echo "kernel NP=" ${NP}
+#echo "kernel Conf_opts=" ${CONF_OPTS}
+
+    if [ -n "$SINGLE_DIR" ] ; then SINGLE_DIR=$SDIR_NAME; fi
+    export PRODUCT="KERNEL_${SALOME_VERSION}"
+    export PRODUCT_SRC="KERNEL_SRC_${SALOME_VERSION}"
+    export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
+    export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT_SRC}
+    $PROCEDURE 
diff --git a/config_files/LIGHT.sh b/config_files/LIGHT.sh
index d81a0dd..aa9f8b3 100755
--- a/config_files/LIGHT.sh
+++ b/config_files/LIGHT.sh
@@ -85,7 +85,7 @@ fi
 
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
-check_jb ./build.sh -d -p ${INST_ROOT} LIGHT
+check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} LIGHT
 
 cd ${CUR_DIR}
 
@@ -133,7 +133,11 @@ SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="LIGHT_${SALOME_VERSION}"
 export PRODUCT_SRC="LIGHT_SRC_${SALOME_VERSION}"
diff --git a/config_files/MED.sh b/config_files/MED.sh
index 47e358b..edc9cc6 100755
--- a/config_files/MED.sh
+++ b/config_files/MED.sh
@@ -90,9 +90,9 @@ fi
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
 if [ ${INST_WITH_GUI} = "FALSE" ] ; then
-    check_jb ./build.sh -d -p ${INST_ROOT} -DSALOME_BUILD_GUI=OFF MED
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} -DSALOME_BUILD_GUI=OFF ${CONF_OPTS} MED
 else
-    check_jb ./build.sh -d -p ${INST_ROOT} MED
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT}  ${CONF_OPTS} MED
 fi
 
 cd ${CUR_DIR}
@@ -134,20 +134,23 @@ try_preinstalled
 
 source ./common.sh
 
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-SRC_DIR=$8;
-shift
-REMOVE_SRC_TMP=$8;
-shift
-INST_WITH_GUI=$9;
-shift
-SINGLE_DIR=$9;
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    INST_WITH_GUI=${11};
+    shift
+    SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="MED_${SALOME_VERSION}"
 export PRODUCT_SRC="MED_SRC_${SALOME_VERSION}"
diff --git a/config_files/NETGENPLUGIN.sh b/config_files/NETGENPLUGIN.sh
index 9e9832b..d36e83d 100755
--- a/config_files/NETGENPLUGIN.sh
+++ b/config_files/NETGENPLUGIN.sh
@@ -89,9 +89,9 @@ fi
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
 if [ ${INST_WITH_GUI} = "FALSE" ] ; then
-    check_jb ./build.sh -d -p ${INST_ROOT} -DSALOME_BUILD_GUI=OFF NETGENPLUGIN
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} -DSALOME_BUILD_GUI=OFF ${CONF_OPTS} NETGENPLUGIN
 else
-    check_jb ./build.sh -d -p ${INST_ROOT} NETGENPLUGIN
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} NETGENPLUGIN
 fi
 
 cd ${CUR_DIR}
@@ -133,20 +133,23 @@ try_preinstalled
 
 source ./common.sh
 
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-SRC_DIR=$8;
-shift
-REMOVE_SRC_TMP=$8;
-shift
-INST_WITH_GUI=$9;
-shift
-SINGLE_DIR=$9;
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    INST_WITH_GUI=${11};
+    shift
+    SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="NETGENPLUGIN_${SALOME_VERSION}"
 export PRODUCT_SRC="NETGENPLUGIN_SRC_${SALOME_VERSION}"
diff --git a/config_files/OCCT.sh b/config_files/OCCT.sh
index 30c5579..59b8b88 100755
--- a/config_files/OCCT.sh
+++ b/config_files/OCCT.sh
@@ -19,26 +19,26 @@ VERSION_OCCT=6.7.0
 
 check_version()
 {
-if [ -z "${CAS_ROOT_DIR}" ]; then
-    return 1
-fi
-check_lib_version ${CAS_ROOT_DIR}/inc/Standard_Version.hxx
-if [ "$?" -ne "0" ] ; then
+    if [ -z "${CAS_ROOT_DIR}" ]; then
+	return 1
+    fi
+    check_lib_version ${CAS_ROOT_DIR}/inc/Standard_Version.hxx
+    if [ "$?" -ne "0" ] ; then
+	return 1
+    fi
+    ver_major=`grep "#define OCC_VERSION_MAJOR" ${CAS_ROOT_DIR}/inc/Standard_Version.hxx | awk '{print $3}'`
+    ver_minor=`grep "#define OCC_VERSION_MINOR" ${CAS_ROOT_DIR}/inc/Standard_Version.hxx | awk '{print $3}'`
+    ver_maint=`grep "#define OCC_VERSION_MAINTENANCE" ${CAS_ROOT_DIR}/inc/Standard_Version.hxx | awk '{print $3}'`
+    ver="${ver_major}.${ver_minor}.${ver_maint}"
+    if [ "${ver}" = "${VERSION_OCCT}" ] ; then
+	return 0
+    fi
     return 1
-fi
-ver_major=`grep "#define OCC_VERSION_MAJOR" ${CAS_ROOT_DIR}/inc/Standard_Version.hxx | awk '{print $3}'`
-ver_minor=`grep "#define OCC_VERSION_MINOR" ${CAS_ROOT_DIR}/inc/Standard_Version.hxx | awk '{print $3}'`
-ver_maint=`grep "#define OCC_VERSION_MAINTENANCE" ${CAS_ROOT_DIR}/inc/Standard_Version.hxx | awk '{print $3}'`
-ver="${ver_major}.${ver_minor}.${ver_maint}"
-if [ "${ver}" = "${VERSION_OCCT}" ] ; then
-    return 0
-fi
-return 1
 }
 
 print_env_bin()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
 #${DELIM} ${PRODUCT_TYPE} ${DELIM}
 export CAS_ROOT_DIR=\${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PATH=\${CAS_ROOT_DIR}/bin:\${PATH}
@@ -58,230 +58,243 @@ export MMGT_REENTRANT=1
 export CASROOT=\${CAS_ROOT_DIR}
 ##
 EOF
-(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+	(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
 
-print_env_src()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
+    print_env_src()
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
 #${DELIM} ${PRODUCT_TYPE}_src ${DELIM}
 # nothing to do
 ##
 EOF
-(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
-
-try_preinstalled()
-{
-try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-return $?
-}
-
-install_source()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-source ${INSTALL_WORK}/${SHRC}
+	(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
+
+    try_preinstalled()
+    {
+	try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	return $?
+    }
+
+    install_source()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	source ${INSTALL_WORK}/${SHRC}
 
 # unpack
-check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
 
-local patch_sources=1
-local patch_config=0
+	local patch_sources=1
+	local patch_config=0
 
 # apply patch for sources (if there's any)
-if [ "${patch_sources}" = "1" ] ; then
-    ( test -f patches/${PRODUCT}.patch && cp patches/${PRODUCT}.patch ${PRODUCT_SRC_DIR} && cd ${PRODUCT_SRC_DIR} && patch -p1 < ${PRODUCT}.patch )
-fi
+	if [ "${patch_sources}" = "1" ] ; then
+	    ( test -f patches/${PRODUCT}.patch && cp patches/${PRODUCT}.patch ${PRODUCT_SRC_DIR} && cd ${PRODUCT_SRC_DIR} && patch -p1 < ${PRODUCT}.patch )
+	fi
 # patch pb on automake 1.12 and newer with obsolete AM_C_PROTOTYPES macro
-if [ "${patch_config}" = "1" ] ; then
-    ( cd ${PRODUCT_SRC_DIR} && sed -i "s%AM_C_PROTOTYPES%#AM_C_PROTOTYPES%g" configure.ac )
-fi
+	if [ "${patch_config}" = "1" ] ; then
+	    ( cd ${PRODUCT_SRC_DIR} && sed -i "s%AM_C_PROTOTYPES%#AM_C_PROTOTYPES%g" configure.ac )
+	fi
 
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
-fi
+	if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+	    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
+	fi
 
 # to generate environment scripts
-try_preinstalled
-}
+	try_preinstalled
+    }
 
-install_source_and_build()
-{
+    install_source_and_build()
+    {
 # install sources
-install_source
+	install_source
 
 # build sources...
 
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
-cd ${PRODUCT_SRC_DIR}
+	test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	cd ${PRODUCT_SRC_DIR}
 
 # build_configure
 
-echo " +++++++++++ build_configure"
+	echo " +++++++++++ build_configure"
 
-check_job ${PRODUCT_DIR}/BUILD_CONFIGURE.LOG ./build_configure
+	check_job ${PRODUCT_DIR}/BUILD_CONFIGURE.LOG ./build_configure
 
 # configure
 
-echo " +++++++++++ configure"
+	echo " +++++++++++ configure"
 
-flags=""
+	flags=""
 
 # ... tcl/tk options
-if [ "${TCLHOME}" != "" ] ; then
-    flags="${flags} --with-tcl=${TCLHOME}/lib"
-    flags="${flags} --with-tk=${TCLHOME}/lib"
-fi
+	if [ "${TCL_CFG_DIR}" != "" ] ; then
+	    flags="${flags} --with-tcl=${TCL_CFG_DIR}"
+	    flags="${flags} --with-tk=${TK_CFG_DIR}"
+	fi
 # ... tbb options
-if [ "${TBB_ROOT_DIR}" != "" ] ; then
-    flags="${flags} --with-tbb-include=${TBB_ROOT_DIR}/include" 
-    if test `uname -m` = "x86_64" ; then
-	flags="${flags} --with-tbb-library=${TBB_ROOT_DIR}/lib/intel64/cc4.1.0_libc2.4_kernel2.6.16.21"
-    else
-	flags="${flags} --with-tbb-library=${TBB_ROOT_DIR}/lib/ia32/cc4.1.0_libc2.4_kernel2.6.16.21"
-    fi
-fi
+	if [ "${TBB_ROOT_DIR}" != "" ] ; then
+	    flags="${flags} --with-tbb-include=${TBB_ROOT_DIR}/include" 
+	    if test `uname -m` = "x86_64" ; then
+		flags="${flags} --with-tbb-library=${TBB_ROOT_DIR}/lib/intel64/cc4.1.0_libc2.4_kernel2.6.16.21"
+	    else
+		flags="${flags} --with-tbb-library=${TBB_ROOT_DIR}/lib/intel64/cc4.1.0_libc2.4_kernel2.6.16.21"
+	    fi
+	else
+	    flags="${flags} --with-tbb-include=/usr/include" 
+	    # should test if libtbb.so exists
+	    flags="${flags} --with-tbb-library=/usr/lib"
+	fi
 # ... freetype options
-if [ "{FREETYPE_ROOT_DIR}" != "" ] ; then
-    flags="${flags} --with-freetype=${FREETYPE_ROOT_DIR}"
-fi
+	if [ "{FREETYPE_ROOT_DIR}" != "" ] ; then
+	    flags="${flags} --with-freetype=${FREETYPE_ROOT_DIR}"
+	fi
 # ... freeimage options
-if [ "{FREEIMAGE_ROOT_DIR}" != "" ] ; then
-    flags="${flags} --with-freeimage=${FREEIMAGE_ROOT_DIR}"
-fi
+	if [ "{FREEIMAGE_ROOT_DIR}" != "" ] ; then
+	    flags="${flags} --with-freeimage=${FREEIMAGE_ROOT_DIR}"
+	fi
 # ... gl2ps options
-if [ "{GL2PS_ROOT_DIR}" != "" ] ; then
-    flags="${flags} --with-gl2ps=${GL2PS_ROOT_DIR}"
-fi
+	if [ "{GL2PS_ROOT_DIR}" != "" ] ; then
+	    flags="${flags} --with-gl2ps=${GL2PS_ROOT_DIR}"
+	fi
 # other options
-flags="${flags} --disable-debug --enable-production"
+	flags="${flags} --disable-debug --enable-production"
 
-check_job ${PRODUCT_DIR}/CONFIGURE.LOG ./configure --prefix=${PRODUCT_DIR} ${flags}
+	check_job ${PRODUCT_DIR}/CONFIGURE.LOG ./configure --prefix=${PRODUCT_DIR} ${flags}
 
 # make
 
-echo " +++++++++++ make"
+	echo " +++++++++++ make"
 
-GCC=`which gcc`
-cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
-used gcc=${GCC}
+	GCC=`which gcc`
+	cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
+	used gcc=${GCC}
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make -j4 install
+	check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP} install
 
 # fix libGL dependencies
-echo " +++++++++++ fix libGL dependencies"
-( cd ${PRODUCT_DIR}/lib && fix_gl_libs )
+	echo " +++++++++++ fix libGL dependencies"
+	( cd ${PRODUCT_DIR}/lib && fix_gl_libs )
 
-cd ${PRODUCT_DIR}
+	cd ${PRODUCT_DIR}
 
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build.size
-    du -sk ${PRODUCT_DIR}     > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
-fi
+	if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+	    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build.size
+	    du -sk ${PRODUCT_DIR}     > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
+	fi
 
 # remove sources and temporary files after building
-echo "${INSTALL_PRODUCTS}" | grep -q "PatchForOpenCascade"
-if [ $? -eq 1 ] && [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
-    test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
-fi
+	echo "${INSTALL_PRODUCTS}" | grep -q "PatchForOpenCascade"
+	if [ $? -eq 1 ] && [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
+	    test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
+	fi
 
 # to generate environment scripts
-try_preinstalled
-}
+	try_preinstalled
+    }
 
-install_binary()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-source ${INSTALL_WORK}/${SHRC}
+    install_binary()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	source ${INSTALL_WORK}/${SHRC}
 
 # create a product directory
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
-check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
 
 # modify *.la files
 
-ldir=${PRODUCT_DIR}/lib
-if [ ! -d ${ldir} ]; then ldir=${PRODUCT_DIR}/Linux/lib; fi
-if [ ! -d ${ldir} ]; then ldir=${PRODUCT_DIR}/lin/lib; fi
-
-tcldir=`printenv TCLHOME`
-freetypedir=`printenv FREETYPE_ROOT_DIR`
-gl2psdir=`printenv GL2PS_ROOT_DIR`
-freeimagedir=`printenv FREEIMAGE_ROOT_DIR`
-tbbbasedir=`printenv TBB_ROOT_DIR`
-TBBKERNEL='cc4.1.0_libc2.4_kernel2.6.16.21'
-if test `uname -m` = "x86_64" ; then
-    export TBBMODE="intel64/${TBBKERNEL}"
-else
-    export TBBMODE="ia32/${TBBKERNEL}"
-fi
-tbbdir=${tbbbasedir}/lib/${TBBMODE}
-
-cd ${ldir}
+	ldir=${PRODUCT_DIR}/lib
+	if [ ! -d ${ldir} ]; then ldir=${PRODUCT_DIR}/Linux/lib; fi
+	if [ ! -d ${ldir} ]; then ldir=${PRODUCT_DIR}/lin/lib; fi
+
+	tcldir=`printenv TCLHOME`
+	freetypedir=`printenv FREETYPE_ROOT_DIR`
+	gl2psdir=`printenv GL2PS_ROOT_DIR`
+	freeimagedir=`printenv FREEIMAGE_ROOT_DIR`
+	tbbbasedir=`printenv TBB_ROOT_DIR`
+	if [ "$TBB_ROOT_DIR" != "" ]; then 
+            TBBKERNEL='cc4.1.0_libc2.4_kernel2.6.16.21'
+	    if test `uname -m` = "x86_64" ; then
+		export TBBMODE="intel64/${TBBKERNEL}"
+	    else
+		export TBBMODE="ia32/${TBBKERNEL}"
+	    fi         
+	    tbbdir=${tbbbasedir}/lib/${TBBMODE}
+        else
+            tbbdir=/usr/lib
+        fi
+	cd ${ldir}
 
 # 1. set libdir correctly, correct dependencies
-for l in X `find . -name "*.la"`; do
-    if [ "${l}" != "X" ] ; then
-	l=`basename ${l}`
-	libdir=`grep -e "libdir=.*" ${l} | sed -e "s/libdir=[\'|\"]\(.*\)[\'|\"]/\1/g"`
-	sed -i "s%${libdir}%${ldir}%g" ${l}
-	if [ -n "${tcldir}" ] && [ -d "${tcldir}" ] ; then
-	    sed -i "s%-L[^[:space:]]*tcltk[^[:space:]]*/lib%-L${tcldir}/lib%g" ${l}
-	fi
-	if [ -n "${freetypedir}" ] && [ -d "${freetypedir}" ] ; then
-	    sed -i "s%-L[^[:space:]]*/freetype[^[:space:]]*/lib%-L${freetypedir}/lib%g;s%[^[:space:]]*/freetype[^[:space:]]*/lib/libfreetype.la%-lfreetype%g" ${l}
-	fi
-	if [ -n "${gl2psdir}" ] && [ -d "${gl2psdir}" ] ; then
-	    sed -i "s%\(.*\)\([[:space:]].*-L.*/gl2ps-[0-9]\.[0-9]\.[0-9]/lib[[:space:]]\)\(.*\)%\1 -L${gl2psdir}/lib \3%g" ${l}
-	fi
-	if [ -n "${freeimagedir}" ] && [ -d "${freeimagedir}" ] ; then
-	    sed -i "s%\(.*\)\([[:space:]].*-L.*/freeimage-[0-9]\.[0-9]\.[0-9]/lib[[:space:]]\)\(.*\)%\1 -L${freeimagedir}/lib \3%g" ${l}
-	fi
-	if [ -n "${freeimagedir}" ] && [ -d "${freeimagedir}" ] ; then
-	    sed -i "s%\(.*\)\([[:space:]].*-L.*/freeimage-[0-9]\.[0-9][0-9]\.[0-9]/lib[[:space:]]\)\(.*\)%\1 -L${freeimagedir}/lib \3%g" ${l}
-	fi
-	if [ -n "${tbbdir}" ] && [ -d "${tbbdir}" ] ; then
-	    sed -i "s%\(.*\)\([[:space:]].*-L.*/tbb[^[:space:]]*/lib[^[:space:]]*\)\(.*\)%\1 -L${tbbdir} \3%g" ${l}
-	fi
-    fi
-done
+	for l in X `find . -name "*.la"`; do
+	    if [ "${l}" != "X" ] ; then
+		l=`basename ${l}`
+		libdir=`grep -e "libdir=.*" ${l} | sed -e "s/libdir=[\'|\"]\(.*\)[\'|\"]/\1/g"`
+		sed -i "s%${libdir}%${ldir}%g" ${l}
+		if [ -n "${tcldir}" ] && [ -d "${tcldir}" ] ; then
+		    sed -i "s%-L[^[:space:]]*tcltk[^[:space:]]*/lib%-L${tcldir}/lib%g" ${l}
+		fi
+		if [ -n "${freetypedir}" ] && [ -d "${freetypedir}" ] ; then
+		    sed -i "s%-L[^[:space:]]*/freetype[^[:space:]]*/lib%-L${freetypedir}/lib%g;s%[^[:space:]]*/freetype[^[:space:]]*/lib/libfreetype.la%-lfreetype%g" ${l}
+		fi
+		if [ -n "${gl2psdir}" ] && [ -d "${gl2psdir}" ] ; then
+		    sed -i "s%\(.*\)\([[:space:]].*-L.*/gl2ps-[0-9]\.[0-9]\.[0-9]/lib[[:space:]]\)\(.*\)%\1 -L${gl2psdir}/lib \3%g" ${l}
+		fi
+		if [ -n "${freeimagedir}" ] && [ -d "${freeimagedir}" ] ; then
+		    sed -i "s%\(.*\)\([[:space:]].*-L.*/freeimage-[0-9]\.[0-9]\.[0-9]/lib[[:space:]]\)\(.*\)%\1 -L${freeimagedir}/lib \3%g" ${l}
+		fi
+		if [ -n "${freeimagedir}" ] && [ -d "${freeimagedir}" ] ; then
+		    sed -i "s%\(.*\)\([[:space:]].*-L.*/freeimage-[0-9]\.[0-9][0-9]\.[0-9]/lib[[:space:]]\)\(.*\)%\1 -L${freeimagedir}/lib \3%g" ${l}
+		fi
+		if [ -n "${tbbdir}" ] && [ -d "${tbbdir}" ] ; then
+		    sed -i "s%\(.*\)\([[:space:]].*-L.*/tbb[^[:space:]]*/lib[^[:space:]]*\)\(.*\)%\1 -L${tbbdir} \3%g" ${l}
+		fi
+	    fi
+	done
 
 # 2. fix libGL dependencies
-gllibdir="`where_gl_libs`"
-if [ "${gllibdir}" != "" ] ; then
-    if [ -f ${gllibdir}/libGL.la ] ; then
-	libdir=`grep "libdir=" ${gllibdir}/libGL.la | sed -e "s%libdir='\(.*\)'%\1%"`
-	if [ "`ls ${libdir}/libGL.so* 2>/dev/null`" ] ; then
-	    str_to_replace="${gllibdir}/libGL.la"
+	gllibdir="`where_gl_libs`"
+	if [ "${gllibdir}" != "" ] ; then
+	    if [ -f ${gllibdir}/libGL.la ] ; then
+		libdir=`grep "libdir=" ${gllibdir}/libGL.la | sed -e "s%libdir='\(.*\)'%\1%"`
+		if [ "`ls ${libdir}/libGL.so* 2>/dev/null`" ] ; then
+		    str_to_replace="${gllibdir}/libGL.la"
+		fi
+	    fi
+	    if [ "${str_to_replace}" = "" ] ; then
+		str_to_replace="-L${gllibdir} -lGL"
+	    fi
+	    sed -i "s%-lGL\b%%g;s%[^[:space:]\']*libGL.la[[:space:]]%%g;s%^dependency_libs='\(.*\)%dependency_libs='${str_to_replace} \1%" libTKOpenGl.la
 	fi
-    fi
-    if [ "${str_to_replace}" = "" ] ; then
-	str_to_replace="-L${gllibdir} -lGL"
-    fi
-    sed -i "s%-lGL\b%%g;s%[^[:space:]\']*libGL.la[[:space:]]%%g;s%^dependency_libs='\(.*\)%dependency_libs='${str_to_replace} \1%" libTKOpenGl.la
-fi
 
 # to generate environment script for sources
-try_preinstalled
-}
-
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-shift
-REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
-export PRODUCT="OCCT-${VERSION_OCCT}"
-export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
-export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
-export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
-source ./common.sh
-${PROCEDURE} 
+	try_preinstalled
+    }
+
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    shift
+    SINGLE_DIR=${11};
+
+    export PRODUCT="OCCT-${VERSION_OCCT}"
+    export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
+    export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
+    export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
+    source ./common.sh
+    ${PROCEDURE} 
diff --git a/config_files/PARAVIS.sh b/config_files/PARAVIS.sh
index ceabdaf..833c1a6 100755
--- a/config_files/PARAVIS.sh
+++ b/config_files/PARAVIS.sh
@@ -90,7 +90,8 @@ fi
 
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
-check_jb ./build.sh -d -p ${INST_ROOT} PARAVIS
+check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} PARAVIS
+#check_jb ./build.sh -d -p ${INST_ROOT} ${CONF_OPTS} PARAVIS
 
 cd ${CUR_DIR}
 
@@ -138,7 +139,11 @@ SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="PARAVIS_${SALOME_VERSION}"
 export PRODUCT_SRC="PARAVIS_SRC_${SALOME_VERSION}"
diff --git a/config_files/PYCALCULATOR.sh b/config_files/PYCALCULATOR.sh
index 9fa6618..0304ee4 100755
--- a/config_files/PYCALCULATOR.sh
+++ b/config_files/PYCALCULATOR.sh
@@ -88,7 +88,7 @@ fi
 
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
-check_jb ./build.sh -d -p ${INST_ROOT} PYCALCULATOR
+check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} PYCALCULATOR
 
 cd ${CUR_DIR}
 
@@ -136,7 +136,11 @@ SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="PYCALCULATOR_${SALOME_VERSION}"
 export PRODUCT_SRC="PYCALCULATOR_SRC_${SALOME_VERSION}"
diff --git a/config_files/PYHELLO.sh b/config_files/PYHELLO.sh
index 6c39e81..10f9c3c 100755
--- a/config_files/PYHELLO.sh
+++ b/config_files/PYHELLO.sh
@@ -86,7 +86,7 @@ fi
 
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
-check_jb ./build.sh -d -p ${INST_ROOT} PYHELLO
+check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} PYHELLO
 
 cd ${CUR_DIR}
 
@@ -135,7 +135,11 @@ SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="PYHELLO_${SALOME_VERSION}"
 export PRODUCT_SRC="PYHELLO_SRC_${SALOME_VERSION}"
diff --git a/config_files/PYLIGHT.sh b/config_files/PYLIGHT.sh
index 79b72d7..9f6fd79 100755
--- a/config_files/PYLIGHT.sh
+++ b/config_files/PYLIGHT.sh
@@ -86,7 +86,7 @@ fi
 
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
-check_jb ./build.sh -d -p ${INST_ROOT} PYLIGHT
+check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} PYLIGHT
 
 cd ${CUR_DIR}
 
@@ -134,7 +134,11 @@ SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="PYLIGHT_${SALOME_VERSION}"
 export PRODUCT_SRC="PYLIGHT_SRC_${SALOME_VERSION}"
diff --git a/config_files/ParaView.sh b/config_files/ParaView.sh
index b02003c..c0f9695 100755
--- a/config_files/ParaView.sh
+++ b/config_files/ParaView.sh
@@ -20,13 +20,17 @@ PVLIBVERSION=`echo ${VERSION_PARAVIEW} | awk -F. '{printf("%d.%d",$1,$2)}'`
 
 check_version()
 {
+#set -x
 if [ -z "${PARAVIEW_ROOT_DIR}" ]; then
+   set +x
    return 1 
 fi
 check_lib_version libvtkCommonCore-pv${PVLIBVERSION}.so ${PARAVIEW_ROOT_DIR}/lib/paraview-${PVLIBVERSION}
 if [ "$?" -eq "0" ]; then
+   set +x
    return 0
 fi
+#set +x
 return 1
 }
 
@@ -127,9 +131,13 @@ install_source
 # build sources
 test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
-export PRODUCT_BUILD_DIR=${PRODUCT_DIR}_build
-mkdir ${PRODUCT_BUILD_DIR}
-cd ${PRODUCT_BUILD_DIR}
+	export PRODUCT_BUILD_DIR=${PRODUCT_DIR}_build
+	mkdir -p ${PRODUCT_BUILD_DIR}
+	cd ${PRODUCT_BUILD_DIR}
+
+# get arch for Debian/Ubuntu
+	arch="`dpkg-architecture -qDEB_HOST_MULTIARCH`"
+
 
 # get Python and tcl/tk version
 python_version="`python -c 'import sys; print sys.version[:3]'`"
@@ -153,8 +161,8 @@ CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DBUILD_SHARED_LIBS:BOOL=ON"
 
 ### general compiler settings
 CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DVTK_HAVE_GETSOCKNAME_WITH_SOCKLEN_T=1"
-CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DCMAKE_CXX_COMPILER:STRING=`which g++`"
-CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DCMAKE_C_COMPILER:STRING=`which gcc`"
+#CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DCMAKE_CXX_COMPILER:STRING=`which g++`"
+#CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DCMAKE_C_COMPILER:STRING=`which gcc`"
 
 ### compiler settings for 64 bit platforms
 if test `uname -m` = "x86_64" ; then
@@ -177,16 +185,23 @@ CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DVTK_USE_64BIT_IDS:BOOL=OFF"
 CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DPARAVIEW_BUILD_QT_GUI:BOOL=ON"
 #CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DVTK_QT_USE_WEBKIT:BOOL=ON"
 CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DQT_TESTING_INSTALL_DEVELOPMENT:BOOL=ON"
-CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DQT_HELP_GENERATOR:STRING=${QT4_ROOT_DIR}/bin/qhelpgenerator"
+
+if [ -n "${QT4_ROOT_DIR}" ]; then
+   CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DQT_HELP_GENERATOR:STRING=${QT4_ROOT_DIR}/bin/qhelpgenerator"
+else
+   CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DQT_HELP_GENERATOR:STRING=/usr/bin/qhelpgenerator"
+fi
 
 ### Python settings
 if [ "${python_version}" != "" ]; then
     CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DPARAVIEW_ENABLE_PYTHON:BOOL=ON"
     CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DVTK_WRAP_PYTHON:BOOL=ON"
-    CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DPYTHON_USE_STATIC_LIBRARIES:BOOL=OFF"
-    CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DPYTHON_EXECUTABLE:STRING=${PYTHON_ROOT_DIR}/bin/python${python_version}"
-    CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DPYTHON_INCLUDE_PATH:STRING=${PYTHON_ROOT_DIR}/include/python${python_version}"
-    CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DPYTHON_LIBRARY:STRING=${PYTHON_ROOT_DIR}/lib/python${python_version}/config/libpython${python_version}.so"
+    if [ "${PYTHON_ROOT_DIR}" != "" ] ; then
+       CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DPYTHON_USE_STATIC_LIBRARIES:BOOL=OFF"
+       CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DPYTHON_EXECUTABLE:STRING=${PYTHON_ROOT_DIR}/bin/python${python_version}"
+       CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DPYTHON_INCLUDE_PATH:STRING=${PYTHON_ROOT_DIR}/include/python${python_version}"
+       CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DPYTHON_LIBRARY:STRING=${PYTHON_ROOT_DIR}/lib/python${python_version}/config/libpython${python_version}.so"
+    fi
 fi
 
 ### Tcl/Tk settings
@@ -213,20 +228,20 @@ fi
 #<---
 
 ### HDF5 settings
-if [ "${HDF5_ROOT_DIR}" != "" ]; then
-    CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DVTK_USE_SYSTEM_HDF5:BOOL=ON"
-    #CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DHDF5_USE_STATIC_LIBRARIES:BOOL=OFF"
-    #CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DHDF5_ROOT:PATH=${HDF5_ROOT_DIR}"
-    #CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DHDF5_INCLUDE_DIRS=${HDF5_ROOT_DIR}/include"
-    #CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DHDF5_LIBRARIES=${HDF5_ROOT_DIR}/lib/libhdf5.so;${HDF5_ROOT_DIR}/lib/libhdf5_hl.so"
-    #CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DHDF5_INCLUDE_DIR:PATH=${HDF5_ROOT_DIR}/include"
-    #CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DHDF5_HL_INCLUDE_DIR:PATH=${HDF5_ROOT_DIR}/include"
-    #CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DHDF5_LIBRARY_DIRS=${HDF5_ROOT_DIR}/lib"
-    #CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DHDF5_LIBRARY:PATH=${HDF5_ROOT_DIR}/lib/libhdf5.so"
-    #CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DHDF5_HL_LIBRARY_DIRS=${HDF5_ROOT_DIR}/lib"
-    #CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DHDF5_HL_LIBRARY:PATH=${HDF5_ROOT_DIR}/lib/libhdf5_hl.so"
-    CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DPARAVIEW_BUILD_PLUGIN_H5PartReader:BOOL=ON"
-fi
+	if [ "${HDF5HOME}" != "" ]; then
+	    CMAKE_OPTIONS=$CMAKE_OPTIONS" -DVTK_USE_SYSTEM_HDF5:BOOL=ON"
+	    CMAKE_OPTIONS=$CMAKE_OPTIONS" -DHDF5_USE_STATIC_LIBRARIES:BOOL=OFF"
+	    CMAKE_OPTIONS=$CMAKE_OPTIONS" -DHDF5_ROOT:PATH=${HDF5HOME}"
+    #CMAKE_OPTIONS=$CMAKE_OPTIONS" -DHDF5_INCLUDE_DIRS=${HDF5HOME}/include"
+    #CMAKE_OPTIONS=$CMAKE_OPTIONS" -DHDF5_LIBRARIES=${HDF5HOME}/lib/libhdf5.so;${HDF5HOME}/lib/libhdf5_hl.so"
+	    CMAKE_OPTIONS=$CMAKE_OPTIONS" -DHDF5_INCLUDE_DIR:PATH=${HDF5HOME}/include"
+	    CMAKE_OPTIONS=$CMAKE_OPTIONS" -DHDF5_HL_INCLUDE_DIR:PATH=${HDF5HOME}/include"
+	    CMAKE_OPTIONS=$CMAKE_OPTIONS" -DHDF5_LIBRARY_DIRS=${HDF5HOME}/lib/${arch}"
+    #CMAKE_OPTIONS=$CMAKE_OPTIONS" -DHDF5_LIBRARY:PATH=${HDF5HOME}/lib/libhdf5.so"
+	    CMAKE_OPTIONS=$CMAKE_OPTIONS" -DHDF5_HL_LIBRARY_DIRS=${HDF5HOME}/lib/${arch}"
+    #CMAKE_OPTIONS=$CMAKE_OPTIONS" -DHDF5_HL_LIBRARY:PATH=${HDF5HOME}/lib/libhdf5_hl.so"
+	    CMAKE_OPTIONS=$CMAKE_OPTIONS" -DPARAVIEW_BUILD_PLUGIN_H5PartReader:BOOL=OFF"
+	fi
 
 ### VisIt Database bridge settings
 CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DPARAVIEW_USE_VISITBRIDGE=ON"
@@ -268,7 +283,7 @@ qmake  : `which qmake`
 used ParaView configuration options:
 ${CMAKE_OPTIONS}
 EOF
-check_job ${PRODUCT_DIR}/CONFIGURE.LOG cmake ${PRODUCT_SRC_DIR} ${CMAKE_OPTIONS}
+check_job ${PRODUCT_DIR}/CONFIGURE.LOG cmake ${PRODUCT_SRC_DIR} ${CMAKE_OPTIONS} ${CONF_OPTS}
 
 # patch buildir
 local patch_fatal_warnings=0
@@ -279,9 +294,9 @@ fi
 # make
 
 cat > ${PRODUCT_DIR}/MAKE.LOG <<EOF
-used gcc=`which gcc`
+used gcc=${GCC}
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make VERBOSE=1
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP} VERBOSE=1
 
 # make install
 check_job ${PRODUCT_DIR}/MAKEINSTALL.LOG make install
@@ -292,7 +307,9 @@ if [ "${patch_vtkconfig}" = "1" ] ; then
     cp -f ${PRODUCT_BUILD_DIR}/VTK/VTKTargets.cmake ${PRODUCT_DIR}/lib/cmake/paraview-${PVLIBVERSION}
     sed -i "s%\(IMPORTED_LOCATION_RELEASE.*\"\).*/lib/\([^/]\+\"\)%\1${PRODUCT_DIR}/lib/paraview-${PVLIBVERSION}/\2%g" ${PRODUCT_DIR}/lib/cmake/paraview-${PVLIBVERSION}/VTKTargets.cmake
     sed -i "s%\(IMPORTED_LOCATION_RELEASE.*\"\).*/bin/\([^/]\+\"\)%\1${PRODUCT_DIR}/bin/\2%g" ${PRODUCT_DIR}/lib/cmake/paraview-${PVLIBVERSION}/VTKTargets.cmake
-    sed -i "s%[^;\"]\+/qt-[0-9\.]\+/lib/\([^;]\+\)%${QT4_ROOT_DIR}/lib/\1%g" ${PRODUCT_DIR}/lib/cmake/paraview-${PVLIBVERSION}/VTKTargets.cmake
+    if [ -n "${QT4_ROOT_DIR}" ]; then
+	sed -i "s%[^;\"]\+/qt-[0-9\.]\+/lib/\([^;]\+\)%${QT4_ROOT_DIR}/lib/\1%g" ${PRODUCT_DIR}/lib/cmake/paraview-${PVLIBVERSION}/VTKTargets.cmake
+    fi
     sed -i "s%[^;\"]\+/Python-[0-9\.]\+/lib/\([^;]\+\)%${PYTHON_ROOT_DIR}/lib/\1%g" ${PRODUCT_DIR}/lib/cmake/paraview-${PVLIBVERSION}/VTKTargets.cmake
     sed -i "s%[^;\"]\+/hdf5-[0-9\.]\+/lib/\([^;]\+\)%${HDF5_ROOT_DIR}/lib/\1%g" ${PRODUCT_DIR}/lib/cmake/paraview-${PVLIBVERSION}/VTKTargets.cmake
     sed -i "s%[^;\"]\+/gl2ps-[0-9\.]\+/lib/\([^;]\+\)%${GL2PS_ROOT_DIR}/lib/\1%g" ${PRODUCT_DIR}/lib/cmake/paraview-${PVLIBVERSION}/VTKTargets.cmake
@@ -337,6 +354,7 @@ fi
 
 cd ${PRODUCT_DIR}
 
+if [ -n "${QT4_ROOT_DIR}" ]; then
 for f in `find . -name "*.cmake"` ; do
 sed -e "s%/[^\";]*/bin/moc%${QT4_ROOT_DIR}/bin/moc%g"     \
     -e "s%/[^\";]*/bin/uic%${QT4_ROOT_DIR}/bin/uic%g"     \
@@ -344,6 +362,16 @@ sed -e "s%/[^\";]*/bin/moc%${QT4_ROOT_DIR}/bin/moc%g"     \
     -e "s%/[^\";]*/bin/qmake%${QT4_ROOT_DIR}/bin/qmake%g" \
     -e "s%/[^\";]*/lib/libQt%${QT4_ROOT_DIR}/lib/libQt%g" \
     -e "s%/[^\";]*/lib64/libQt%${QT4_ROOT_DIR}/lib64/libQt%g" \
+    ${f} > ${f}.new
+    mv -f ${f}.new ${f}
+    ${f} > ${f}.new
+    mv -f ${f}.new ${f}
+    ${f} > ${f}.new
+    mv -f ${f}.new ${f}
+done
+fi
+
+for f in `find . -name "*.cmake"` ; do
     -e "s%/[^\";]*/lib/python\([0-9].[0-9]\)/config/libpython%${PYTHON_ROOT_DIR}/lib/python\1/config/libpython%g" \
     -e "s%/[^\";]*/include/python\([0-9].[0-9]\)%${PYTHON_ROOT_DIR}/include/python\1%g" \
     -e "s%/[^\";]*/tcltk[^/]*/include%${TCLHOME}/include%g" \
@@ -379,9 +407,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="ParaView-${VERSION_PARAVIEW}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/PyQt.sh b/config_files/PyQt.sh
index c09a264..180d6b6 100755
--- a/config_files/PyQt.sh
+++ b/config_files/PyQt.sh
@@ -35,6 +35,7 @@ fi
 return 1
 }
 
+
 print_env_bin()
 {
 cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF
@@ -99,6 +100,20 @@ try_preinstalled
 
 install_source_and_build()
 {
+status=1
+ver=`python -c "from PyQt4 import QtCore; print QtCore.PYQT_VERSION_STR"`
+    if [ -n "${ver}" ] ; then
+	maj_ver=`echo ${ver} | awk -F. '{if(NF>0) print $1; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	min_ver=`echo ${ver} | awk -F. '{if(NF>1) print $2; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	rel_ver=`echo ${ver} | awk -F. '{if(NF>2) print $3; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	let ver=${maj_ver}*10000+${min_ver}*100+${rel_ver}
+	if [ ${ver} -ge ${PYQT_XVERSION} ] ; then
+	    status=0
+	fi
+    fi
+if [ "$status" = 0 ]; then
+   echo "Using built-in PyQt4"
+else
 # install sources
 install_source
 
@@ -116,7 +131,7 @@ GCC=`which gcc`
 cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
 used gcc=${GCC}
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
 check_job ${PRODUCT_DIR}/INSTALL.LOG make install
 
 cd ${PRODUCT_DIR};
@@ -133,6 +148,7 @@ fi
 
 # to generate environment scripts
 try_preinstalled
+fi
 }
 
 install_binary()
@@ -171,9 +187,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="PyQt-${VERSION_PYQT}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/Python.sh b/config_files/Python.sh
index dbc4362..3db6375 100755
--- a/config_files/Python.sh
+++ b/config_files/Python.sh
@@ -36,6 +36,11 @@ fi
 return 1 
 }
 
+print_env_sys()
+{
+echo "Using builtin python"
+}
+
 print_env_bin()
 {
 cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
@@ -87,6 +92,15 @@ try_preinstalled
 
 install_source_and_build()
 {
+#use system
+where_python=`which python`                 # e.g. /usr/bin/python
+if [ -n "${where_python}" ] ; then
+    where_python=`dirname ${where_python}`    # --> /usr/bin
+    where_python=`dirname ${where_python}`    # --> /usr
+    python_version=`python -c "import sys; print sys.version[:3]"`
+    pythondir=${where_python}/lib/python${python_version}
+    print_env_sys
+else
 # install sources
 install_source
 
@@ -123,7 +137,7 @@ cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
 used gcc=${GCC}
 EOF
 unset PYTHONPATH PYTHONHOME
-check_job ${PRODUCT_DIR}/MAKE.LOG make 
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP} 
 check_job ${PRODUCT_DIR}/MAKINSTALL.LOG make install
 
 # add symbolic link to library
@@ -148,6 +162,7 @@ fi
 
 # to generate environment scripts
 try_preinstalled
+fi
 }
 
 install_binary()
@@ -193,9 +208,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="Python-${VERSION_PYTHON}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/RANDOMIZER.sh b/config_files/RANDOMIZER.sh
index c0b1a5c..0a8cdc9 100755
--- a/config_files/RANDOMIZER.sh
+++ b/config_files/RANDOMIZER.sh
@@ -87,7 +87,7 @@ fi
 
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
-check_jb ./build.sh -d -p ${INST_ROOT} RANDOMIZER
+check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} RANDOMIZER
 
 cd ${CUR_DIR}
 
@@ -135,7 +135,11 @@ SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="RANDOMIZER_${SALOME_VERSION}"
 export PRODUCT_SRC="RANDOMIZER_SRC_${SALOME_VERSION}"
diff --git a/config_files/SAMPLES.sh b/config_files/SAMPLES.sh
index a8574aa..b324ca7 100755
--- a/config_files/SAMPLES.sh
+++ b/config_files/SAMPLES.sh
@@ -68,8 +68,13 @@ export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
 SRC_DIR=$8;
 shift
+REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="SAMPLES_${SALOME_VERSION}"
 export PRODUCT_SRC="SAMPLES_SRC_${SALOME_VERSION}"
 export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT_SRC}
diff --git a/config_files/SIERPINSKY.sh b/config_files/SIERPINSKY.sh
index ed367b0..21e6a9a 100755
--- a/config_files/SIERPINSKY.sh
+++ b/config_files/SIERPINSKY.sh
@@ -87,7 +87,7 @@ fi
 
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
-check_jb ./build.sh -d -p ${INST_ROOT} SIERPINSKY
+check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} SIERPINSKY
 
 cd ${CUR_DIR}
 
@@ -135,7 +135,11 @@ SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="SIERPINSKY_${SALOME_VERSION}"
 export PRODUCT_SRC="SIERPINSKY_SRC_${SALOME_VERSION}"
diff --git a/config_files/SIMAN.sh b/config_files/SIMAN.sh
index 74ba59e..56a15af 100755
--- a/config_files/SIMAN.sh
+++ b/config_files/SIMAN.sh
@@ -80,7 +80,11 @@ SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="SIMAN_${VERSION_SIMAN}"
 export PRODUCT_SRC="SIMAN_SRC_${VERSION_SIMAN}"
diff --git a/config_files/SMESH.sh b/config_files/SMESH.sh
index 41ef5f4..facb6d6 100755
--- a/config_files/SMESH.sh
+++ b/config_files/SMESH.sh
@@ -89,9 +89,9 @@ fi
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
 if [ ${INST_WITH_GUI} = "FALSE" ] ; then
-    check_jb ./build.sh -d -p ${INST_ROOT} -DSALOME_BUILD_GUI=OFF SMESH
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} -DSALOME_BUILD_GUI=OFF ${CONF_OPTS} SMESH
 else
-    check_jb ./build.sh -d -p ${INST_ROOT} SMESH
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT}  ${CONF_OPTS} SMESH
 fi
 
 cd ${CUR_DIR}
@@ -134,20 +134,23 @@ try_preinstalled
 
 source ./common.sh
 
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-SRC_DIR=$8;
-shift
-REMOVE_SRC_TMP=$8;
-shift
-INST_WITH_GUI=$9;
-shift
-SINGLE_DIR=$9;
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    INST_WITH_GUI=${11};
+    shift
+    SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="SMESH_${SALOME_VERSION}"
 export PRODUCT_SRC="SMESH_SRC_${SALOME_VERSION}"
diff --git a/config_files/Sphinx.sh b/config_files/Sphinx.sh
index 0e2fd9a..92fc66e 100755
--- a/config_files/Sphinx.sh
+++ b/config_files/Sphinx.sh
@@ -20,6 +20,7 @@ VERSION_DOCUTILS=0.10
 VERSION_SETUPTOOLS=0.6c11
 VERSION_JINJA2=2.6
 VERSION_PYGMENTS=1.5
+SPHINX_XVERSION=`echo ${VERSION_SPHINX} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
 
 check_version(){
 # It is not necessary to check version!
@@ -74,6 +75,18 @@ try_preinstalled
 
 install_source_and_build()
 {
+status=1
+ver=`python -c 'import sphinx; print sphinx.__version__'`
+if test -n "${ver}"; then
+   ver=`echo ${ver} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
+   if [ ${ver} -ge ${SPHINX_XVERSION} ]; then
+      status=0
+   fi
+fi
+
+if [ "$status" = 0 ]; then
+   echo "use built-in Sphinx"
+else
 # install sources
 install_source
 
@@ -132,6 +145,7 @@ fi
 
 # to generate environment scripts
 try_preinstalled
+fi
 }
 
 install_binary()
@@ -155,9 +169,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="Sphinx-${VERSION_SPHINX}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/TUTORIAL.sh b/config_files/TUTORIAL.sh
index 4f29175..039f101 100755
--- a/config_files/TUTORIAL.sh
+++ b/config_files/TUTORIAL.sh
@@ -67,8 +67,13 @@ export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
 SRC_DIR=$8;
 shift
+REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="TUTORIAL_${SALOME_VERSION}"
 export PRODUCT_SRC="TUTORIAL_SRC_${SALOME_VERSION}"
 export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT_SRC}
diff --git a/config_files/YACS.sh b/config_files/YACS.sh
index bc42a5c..592a743 100755
--- a/config_files/YACS.sh
+++ b/config_files/YACS.sh
@@ -82,15 +82,15 @@ install_source
 test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
 if [ -e ./build.sh ] && [ ! -e ${INST_ROOT}/build.sh ]; then
-    cp -f ./build.sh ${INST_ROOT}
+    cp -f ./build.sh  ${INST_ROOT}
 fi
 
 CUR_DIR=`pwd`
 cd ${INST_ROOT}
 if [ "${INST_WITH_GUI}" = "FALSE" ] ; then
-    check_jb ./build.sh -d -p ${INST_ROOT} -DSALOME_BUILD_GUI=OFF YACS
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} -DSALOME_BUILD_GUI=OFF YACS
 else
-    check_jb ./build.sh -d -p ${INST_ROOT} YACS
+    check_jb ./build.sh -j ${NP} -d -p ${INST_ROOT} ${CONF_OPTS} YACS
 fi
 
 cd ${CUR_DIR}
@@ -132,20 +132,23 @@ try_preinstalled
 
 source ./common.sh
 
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-SRC_DIR=$8;
-shift
-REMOVE_SRC_TMP=$8;
-shift
-INST_WITH_GUI=$9;
-shift
-SINGLE_DIR=$9;
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    INST_WITH_GUI=${11};
+    shift
+    SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="YACS_${SALOME_VERSION}"
 export PRODUCT_SRC="YACS_SRC_${SALOME_VERSION}"
diff --git a/config_files/YACSGEN.sh b/config_files/YACSGEN.sh
index fe17e30..8436ec9 100755
--- a/config_files/YACSGEN.sh
+++ b/config_files/YACSGEN.sh
@@ -98,18 +98,44 @@ install_source_and_build
 
 source ./common.sh
 
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-SRC_DIR=$8;
-shift
-REMOVE_SRC_TMP=$8;
-shift
-SINGLE_DIR=$9;
+#echo
+#echo "YACSGEN: number of args = " $#
+#loop over args
+#    i=1
+#    for var in "$@"
+#    do
+#	echo "var[$i]=$var"
+#	let i=i+1
+#    done
+
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    shift
+    SINGLE_DIR=${11};
+
+#echo 
+#echo "PROCEDURE=" ${PROCEDURE}
+#echo "INSTALL_WORK=" ${INSTALL_WORK}
+#echo "SOURCE_DIR=" ${SOURCE_DIR}
+#echo "INST_ROOT=" ${INST_ROOT}
+#echo "PRODUCT_SEQUENCE=" ${PRODUCT_SEQUENCE}
+#echo "PRODUCT_TYPE=" ${PRODUCT_TYPE}
+#echo "INSTALL_PRODUCTS=" ${INSTALL_PRODUCTS}
+#echo "SINGLE_DIR=" ${SINGLE_DIR}
+#echo "YACSGEN NP=" ${NP}
+#echo "YACSGEN Conf_opts=" ${CONF_OPTS}
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="YACSGEN_${YACSGEN_VERSION}"
 export PRODUCT_SRC="YACSGEN_SRC_${YACSGEN_VERSION}"
diff --git a/config_files/boost.sh b/config_files/boost.sh
index 1492a51..c39f849 100755
--- a/config_files/boost.sh
+++ b/config_files/boost.sh
@@ -29,6 +29,17 @@ fi
 return 1;
 }
 
+print_env_sys()
+{
+cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+#${DELIM} ${PRODUCT_TYPE} ${DELIM} 
+export BOOST_ROOT_DIR="/usr"
+##
+EOF
+(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+}
+
 print_env_bin()
 {
 cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
@@ -76,6 +87,11 @@ try_preinstalled
 
 install_source_and_build()
 {
+ver=`egrep 'BOOST_VERSION [0-9]+' /usr/include/boost/version.hpp | sed 's/.*BOOST_VERSION \([0-9]\+\)/\1/g'`
+if [ ${ver} -ge "${BOOST_XVERSION}" ]; then
+   echo "use built-in boost"
+   print_env_sys
+else
 # install sources
 install_source
 
@@ -121,6 +137,7 @@ fi
 
 # to generate environment scripts
 try_preinstalled
+fi
 }
 
 install_binary()
@@ -144,9 +161,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="boost-${VERSION_BOOST}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/build.sh b/config_files/build.sh
index 99e7c7c..b871b53 100755
--- a/config_files/build.sh
+++ b/config_files/build.sh
@@ -374,7 +374,7 @@ for module in ${modules} ; do
     ###
 
     if [ "${is_delete}" = "1" ] && [ -d ${module_build} ] ; then
-	echo ".... Removing ${module_build}"
+	echo ".... Removing build directory ${module_build}"
 	chmod -R +w ${module_build} >& /dev/null && rm -rf ${module_build} >& /dev/null
 	if [ "$?" != "0" ] ; then
 	    echo "Warning: cannot remove build directory ${module_build}: permission denied."
@@ -445,7 +445,8 @@ for module in ${modules} ; do
     # stop if there were any errors
     if [ "${sts}" != "0" ] ; then
 	echo "Error: cmake failed; see ${LOG_DIR}/${module}_cmake.log for more details."
-	continue
+	break
+	#continue
     fi
 
     ###
@@ -464,7 +465,8 @@ for module in ${modules} ; do
     # stop if there were any errors
     if [ "${sts}" != "0" ] ; then
 	echo "Error: make failed; see ${LOG_DIR}/${module}_make.log for more details."
-	continue
+	break
+        #continue
     fi
 
     ###
@@ -483,6 +485,7 @@ for module in ${modules} ; do
 	    
 	    if [ "${sts}" != "0" ] ; then
 		echo "Warning: make dev_docs failed; see ${LOG_DIR}/${module}_make_devdocs.log for more details."
+		break
 	    fi
 	fi
     fi
@@ -492,7 +495,7 @@ for module in ${modules} ; do
     ###
 
     if [ "${is_delete}" = "1" ] && [ -d ${px} ] ; then
-	echo ".... Removing ${px}"
+	echo ".... Removing install directory ${px}"
 	chmod -R +w ${px} >& /dev/null && rm -rf ${px} >& /dev/null
 	if [ "$?" != "0" ] ; then
 	    echo "Warning: cannot remove install directory ${px}: permission denied."
@@ -507,12 +510,13 @@ for module in ${modules} ; do
     echo "========================================================================" >  ${LOG_DIR}/${module}_make_install.log
     echo "make install"                                                             >> ${LOG_DIR}/${module}_make_install.log
     echo "========================================================================" >> ${LOG_DIR}/${module}_make_install.log
-    ( cd ${module_build} && make install >> ${LOG_DIR}/${module}_make_install.log 2>&1 )
+    ( cd ${module_build} && make install >> ${LOG_DIR}/${module}_make_install.log 2>&1)
     sts=$?
 	  
     if [ "${sts}" != "0" ] ; then
 	echo "Error: make install failed; see ${LOG_DIR}/${module}_make_install.log for more details."
-	continue
+	break
+        #continue
     fi
 
     ###
diff --git a/config_files/cgnslib.sh b/config_files/cgnslib.sh
index cdfa657..13d2a7f 100755
--- a/config_files/cgnslib.sh
+++ b/config_files/cgnslib.sh
@@ -16,157 +16,178 @@
 # cgns library version
 #
 VERSION_CGNS=3.1.3
+CGNS_XVERSION=`echo ${VERSION_CGNS} | awk -F. '{printf("%d",$1*1000+$2*100+$3*10)}'`
 
 check_version(){
 # No way to check version!
-return 0
+    return 0
 }
 
 print_env_bin()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
 #${DELIM} ${PRODUCT_TYPE} ${DELIM}
 export CGNS_ROOT_DIR=\${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PATH=\${CGNS_ROOT_DIR}/bin:\${PATH}
 export LD_LIBRARY_PATH=\${CGNS_ROOT_DIR}/lib:\${LD_LIBRARY_PATH}
 ##
 EOF
-(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+	(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
 
-print_env_src()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
+    print_env_src()
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
 #${DELIM} ${PRODUCT_TYPE}_src ${DELIM}
 # nothing to do
 ##
 EOF
-(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+	(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
 
-try_preinstalled(){
-try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-return $?
-}
+    try_preinstalled(){
+	try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	return $?
+    }
 
-install_source()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-source ${INSTALL_WORK}/${SHRC}
+    install_source()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	source ${INSTALL_WORK}/${SHRC}
 
-check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
 
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
-fi
+	if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+	    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
+	fi
 
 # to generate environment scripts
-try_preinstalled
-}
-
-install_source_and_build()
-{
+	try_preinstalled
+    }
+
+    install_source_and_build()
+    {
+	#set -x
+	status=1
+	if [ -f /usr/include/cgnslib.h ]; then
+	    ver=`grep "#define CGNS_VERSION" /usr/include/cgnslib.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'` 
+	    if [ ${ver} -ge ${CGNS_XVERSION} ]; then
+		status=0
+	    fi 
+	fi
+	if [ "$status" = 0 ]; then
+	    echo "Use built-in libcgns"
+	else
 # install sources
-install_source
+	    install_source
 
 # build sources
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	    test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
 # create build directory
-export PRODUCT_BUILD_DIR=${PRODUCT_DIR}_build
-mkdir ${PRODUCT_BUILD_DIR}
-cd ${PRODUCT_BUILD_DIR}
-    
-CMAKE_OPTIONS=""
+	    export PRODUCT_BUILD_DIR=${PRODUCT_DIR}_build
+	    mkdir ${PRODUCT_BUILD_DIR}
+	    cd ${PRODUCT_BUILD_DIR}
+	    
+	    CMAKE_OPTIONS=""
 
 ### common settings
-CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DCMAKE_INSTALL_PREFIX:STRING=${PRODUCT_DIR}"
-CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DCMAKE_BUILD_TYPE:STRING=Release"
-CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DBUILD_SHARED_LIBS:BOOL=ON"
+	    CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DCMAKE_INSTALL_PREFIX:STRING=${PRODUCT_DIR}"
+	    CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DCMAKE_BUILD_TYPE:STRING=Release"
+	    CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DBUILD_SHARED_LIBS:BOOL=ON"
 ### HDF5 settings
-if [ "${HDF5_ROOT_DIR}" != "" ]; then
-    CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DENABLE_HDF5:BOOL=ON"
-    CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DHDF5_INCLUDE_PATH:PATH=${HDF5_ROOT_DIR}/include"
-    CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DHDF5_LIBRARY:FILEPATH=${HDF5_ROOT_DIR}/lib/libhdf5.so"
-
-    hdf_inc_file=${HDF5_ROOT_DIR}/include/H5pubconf.h
-    hdf_cfg_file=${HDF5_ROOT_DIR}/lib/libhdf5.settings
-    if [ ! -f ${hdf_cfg_file} ] ; then cfg_file=${HDF5_ROOT_DIR}/share/cmake/hdf5/libhdf5.settings ; fi
-    if [ -f ${hdf_inc_file} ] ; then
-	grep "#define.*H5_HAVE_ZLIB_H"  ${hdf_inc_file} >& /dev/null
-	if [ "$?" = "0" ] ; then CMAKE_OPTIONS="${CMAKE_OPTIONS} -DHDF5_NEED_ZLIB=ON" ; fi
-	grep "#define.*H5_HAVE_SZLIB_H" ${hdf_inc_file} >& /dev/null
-	if [ "$?" = "0" ] ; then CMAKE_OPTIONS="${CMAKE_OPTIONS} -DHDF5_NEED_SZIP=ON" ; fi
-    fi
-    if [ -e ${hdf_cfg_file} ] ; then 
-	grep -E "Parallel HDF5.*(ON|yes)" ${hdf_cfg_file} >& /dev/null
-	if [ "$?" = "0" ] ; then CMAKE_OPTIONS="${CMAKE_OPTIONS} -DHDF5_NEEDS_MPI=ON" ; fi
-    fi
-fi
-
-cat > ${PRODUCT_DIR}/CONFIGURE.LOG <<EOF
-cmake  : `which cmake`
-
-used settings:
-${CMAKE_OPTIONS}
+	    if [ "${HDF5_ROOT_DIR}" != "" ]; then
+		CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DENABLE_HDF5:BOOL=ON"
+		CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DHDF5_INCLUDE_PATH:PATH=${HDF5_ROOT_DIR}/include"
+		CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DHDF5_LIBRARY:FILEPATH=${HDF5_ROOT_DIR}/lib/libhdf5.so"
+
+		hdf_inc_file=${HDF5_ROOT_DIR}/include/H5pubconf.h
+		hdf_cfg_file=${HDF5_ROOT_DIR}/lib/libhdf5.settings
+		if [ ! -f ${hdf_cfg_file} ] ; then cfg_file=${HDF5_ROOT_DIR}/share/cmake/hdf5/libhdf5.settings ; fi
+		if [ ! -f ${hdf_cfg_file} ] ; then cfg_file=${HDF5_ROOT_DIR}/lib/`uname -m`_linux-gnu/libhdf5.settings ; fi
+		if [ -f ${hdf_inc_file} ] ; then
+		    grep "#define.*H5_HAVE_ZLIB_H"  ${hdf_inc_file} >& /dev/null
+		    if [ "$?" = "0" ] ; then CMAKE_OPTIONS="${CMAKE_OPTIONS} -DHDF5_NEED_ZLIB=ON" ; fi
+		    grep "#define.*H5_HAVE_SZLIB_H" ${hdf_inc_file} >& /dev/null
+		    if [ "$?" = "0" ] ; then CMAKE_OPTIONS="${CMAKE_OPTIONS} -DHDF5_NEED_SZIP=ON" ; fi
+		fi
+		if [ -e ${hdf_cfg_file} ] ; then 
+		    grep -E "Parallel HDF5.*(ON|yes)" ${hdf_cfg_file} >& /dev/null
+		    if [ "$?" = "0" ] ; then CMAKE_OPTIONS="${CMAKE_OPTIONS} -DHDF5_NEEDS_MPI=ON" ; fi
+		fi
+	    fi
+
+	    cat > ${PRODUCT_DIR}/CONFIGURE.LOG <<EOF
+	    cmake  : `which cmake`
+
+	    used settings:
+	    ${CMAKE_OPTIONS}
 EOF
-check_job ${PRODUCT_DIR}/CONFIGURE.LOG cmake ${PRODUCT_SRC_DIR} ${CMAKE_OPTIONS}
-cat > ${PRODUCT_DIR}/MAKE.LOG <<EOF
-used gcc=`which gcc`
+	    check_job ${PRODUCT_DIR}/CONFIGURE.LOG cmake ${PRODUCT_SRC_DIR} ${CMAKE_OPTIONS}
+	    cat > ${PRODUCT_DIR}/MAKE.LOG <<EOF
+	    used gcc=`which gcc`
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make -j4
-check_job ${PRODUCT_DIR}/MAKEINSTALL.LOG make install
+	    check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
+	    check_job ${PRODUCT_DIR}/MAKEINSTALL.LOG make install
 
-cd ${PRODUCT_DIR}
+	    cd ${PRODUCT_DIR}
 
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    du -sk ${PRODUCT_SRC_DIR}   > ${INST_ROOT}/${PRODUCT_TYPE}.build_src.size
-    du -sk ${PRODUCT_BUILD_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build_bld.size
-    du -sk ${PRODUCT_DIR}       > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
-fi
+	    if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+		du -sk ${PRODUCT_SRC_DIR}   > ${INST_ROOT}/${PRODUCT_TYPE}.build_src.size
+		du -sk ${PRODUCT_BUILD_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build_bld.size
+		du -sk ${PRODUCT_DIR}       > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
+	    fi
 
 # remove sources and temporary files after building
-if [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
-    test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
-    test -d ${PRODUCT_BUILD_DIR} && rm -fr ${PRODUCT_BUILD_DIR}
-fi
+	    if [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
+		test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
+		test -d ${PRODUCT_BUILD_DIR} && rm -fr ${PRODUCT_BUILD_DIR}
+	    fi
 
 # to generate environment scripts
-try_preinstalled
-}
+	    try_preinstalled
+	fi
+	#set +x
+    }
 
-install_binary()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-source ${INSTALL_WORK}/${SHRC}
+    install_binary()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	source ${INSTALL_WORK}/${SHRC}
 
 # create a product directory
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
-check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
 
-cd ${PRODUCT_DIR}
+	cd ${PRODUCT_DIR}
 
 # to generate environment script for sources
-try_preinstalled
-}
-
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-shift
-REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
-export PRODUCT="cgnslib-${VERSION_CGNS}"
-export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
-export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
-export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
-source ./common.sh
-${PROCEDURE} 
+	try_preinstalled
+    }
+
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    shift
+    SINGLE_DIR=${11};
+
+    export PRODUCT="cgnslib-${VERSION_CGNS}"
+    export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
+    export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
+    export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
+    source ./common.sh
+    ${PROCEDURE} 
diff --git a/config_files/checkSize.sh b/config_files/checkSize.sh
index e898aed..37f3024 100755
--- a/config_files/checkSize.sh
+++ b/config_files/checkSize.sh
@@ -21,7 +21,7 @@ if [ $# -lt 2 ] ; then
     echo "`basename $0` : wrong parameters"
     exit 1
 fi
-var=`df -Pk "$1" | awk '{print $4}' | grep "[0-9]\+"`
+var=`df -Pk "$1" | tail -1 | awk '{print $4}' | grep "[0-9]\+"`
 #for i in ${var}; do var=${i}; done
 if [ "${var}" -lt "$2" ]; then
    echo "Available disk space is ${var} Kb"
diff --git a/config_files/cmake.sh b/config_files/cmake.sh
index 501b781..002b1ef 100755
--- a/config_files/cmake.sh
+++ b/config_files/cmake.sh
@@ -66,6 +66,10 @@ try_preinstalled
 
 install_source_and_build()
 {
+which cmake 2>/dev/null
+if [ "$?" = "0" ]; then
+   echo "use built-in cmake"
+else
 # install sources
 install_source
 
@@ -78,7 +82,7 @@ check_job ${PRODUCT_DIR}/CONFIGURE.LOG ./configure --prefix=${PRODUCT_DIR}
 cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
 used gcc=${GCC}
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
 check_job ${PRODUCT_DIR}/MAKEINSTALL.LOG make install
 
 cd ${PRODUCT_DIR}
@@ -95,6 +99,7 @@ fi
 
 # to generate environment scripts
 try_preinstalled
+fi
 }
 
 install_binary()
@@ -118,9 +123,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="cmake-${VERSION_CMAKE}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/common.sh b/config_files/common.sh
index 02493b7..efef2f0 100755
--- a/config_files/common.sh
+++ b/config_files/common.sh
@@ -25,33 +25,36 @@ export YACSGEN_VERSION=${SALOME_VERSION}
 # Name of the single directory for SALOME modules
 export SDIR_NAME="SALOME_${SALOME_VERSION}"
 
+# Name of arch - only valid on Debian/Ubuntu system
+export ARCH=`dpkg-architecture -qDEB_HOST_MULTIARCH`
+
 #this function takes one parameter - path to module source folder
 check_salome_src_version(){
-root_dir=${!1}
+    root_dir=${!1}
 
-if [ -n "${root_dir}" ]; then
-    cfg_file=configure.ac
-    if [ ! -f ${root_dir}/${cfg_file} ] ; then
-	cfg_file=configure.in.base
+    if [ -n "${root_dir}" ]; then
+	cfg_file=configure.ac
+	if [ ! -f ${root_dir}/${cfg_file} ] ; then
+	    cfg_file=configure.in.base
 	else
 	    cfg_file=CMakeLists.txt
 	fi
-    if [ -f ${root_dir}/${cfg_file} ] ; then
-	if [ "${cfg_file}" = "CMakeLists.txt" ] ; then
-	    ver_maj=`cat ${root_dir}/${cfg_file} | grep SET\(VERSION_MAJOR | sed -e "s%[A-Z_() ]%%g"`
-	    ver_min=`cat ${root_dir}/${cfg_file} | grep SET\(VERSION_MINOR | sed -e "s%[A-Z_() ]%%g"`
-	    ver_maintenance=`cat ${root_dir}/${cfg_file} | grep SET\(VERSION_MAINTENANCE | sed -e "s%[A-Z_() ]%%g"`
-	    ver="${ver_maj}.${ver_min}.${ver_maintenance}"
-	else
-	    ver=`grep -e "^AC_INIT" ${root_dir}/${cfg_file} | sed -e "s%.*\[\([[:digit:].]*\)\].*%\1%g"`
-	fi
-
-	if [ "${ver}" = "${SALOME_VERSION}" ]; then
-	    return 0
+	if [ -f ${root_dir}/${cfg_file} ] ; then
+	    if [ "${cfg_file}" = "CMakeLists.txt" ] ; then
+		ver_maj=`cat ${root_dir}/${cfg_file} | grep SET\(VERSION_MAJOR | sed -e "s%[A-Z_() ]%%g"`
+		ver_min=`cat ${root_dir}/${cfg_file} | grep SET\(VERSION_MINOR | sed -e "s%[A-Z_() ]%%g"`
+		ver_maintenance=`cat ${root_dir}/${cfg_file} | grep SET\(VERSION_MAINTENANCE | sed -e "s%[A-Z_() ]%%g"`
+		ver="${ver_maj}.${ver_min}.${ver_maintenance}"
+	    else
+		ver=`grep -e "^AC_INIT" ${root_dir}/${cfg_file} | sed -e "s%.*\[\([[:digit:].]*\)\].*%\1%g"`
+	    fi
+
+	    if [ "${ver}" = "${SALOME_VERSION}" ]; then
+		return 0
+	    fi
 	fi
     fi
-fi
-return 1
+    return 1
 }
 
 #this function takes several parameters
@@ -61,24 +64,28 @@ return 1
 #(user can cancel installation procedure)
 check_job()
 {
-  out=$1
-  shift
-  errfile=/tmp/errlog
-  if [ -n "${INSTALL_WORK}" ] ; then errfile=${INSTALL_WORK}/errlog; fi
-  cmd="`pwd` -> $*"
-  if [ "${out}" != "1" ] ; then cmd="${cmd} >> ${out}" ; fi
-  echo -e ${cmd}
-  if [ "${out}" != "1" ] ; then
-      $* >> ${out} 2>${errfile}
-  else
-      $*
-  fi
-  if [ "$?" -ne "0" ] ; then
-    if [ ${out} != "1" ] ; then
-      cat ${out}
-      cat ${errfile} >&2
-      cat ${errfile} >> ${out}
-    fi
+    out=$1
+    shift
+    errfile=/tmp/errlog
+    if [ -n "${INSTALL_WORK}" ] ; then errfile=${INSTALL_WORK}/errlog; fi
+    cmd="`pwd` -> $*"
+    if [ "${out}" != "1" ] ; then cmd="${cmd} >> ${out}" ; fi
+  #echo -e ${cmd}
+    status=0
+    if [ "${out}" != "1" ] ; then
+	$* >> ${out} 2>${errfile}
+	status=$?
+    else
+	$*
+	status=$?
+    fi
+    if [ "$status" -ne "0" ] ; then
+	echo -e ${cmd}
+	if [ ${out} != "1" ] ; then
+	    cat ${out}
+	    cat ${errfile} >&2
+	    cat ${errfile} >> ${out}
+	fi
     # VSR : 10/11/05: disable answer mode ==>
     #echo -n " " >&2
     #echo -e "NOT DONE !!! => $*"
@@ -89,78 +96,78 @@ check_job()
     #  return 1
     #fi
     # VSR : 10/11/05: disable answer mode <==
-    exit 1
-  fi
-  return 0
+	exit 1
+    fi
+    return 0
 }
 
 #invoke check_job function
 #all output will be put into terminal
 check_jb()
 {
-  check_job 1 $*
-  return
+    check_job 1 $*
+    return $?
 }
 
 # make directory
 makedir()
 {
-  rm -rf "$1" > /dev/null
-  mkdir -p "$1"
+    rm -rf "$1" > /dev/null
+    mkdir -p "$1"
 }
 
 #create environment for sh and csh
 make_env()
 {
-install_root=$1;  shift
-install_work=$1;
+    install_root=$1;  shift
+    install_work=$1;
 
-for i in ${SHRC} ${CSHRC} ; do
-    if [ -e ${install_work}/${i} ]; then
-	rm ${install_work}/${i}
+    for i in ${SHRC} ${CSHRC} ; do
+	if [ -e ${install_work}/${i} ]; then
+	    rm ${install_work}/${i}
+	fi
+	touch ${install_work}/${i}
+    done
+
+    if [ $# -eq 4 ] ; then
+	    product_name=$4;
+	    product_env=${install_work}/env_${product_name}.sh
+	    (test -e ${product_env} && rm ${product_env} )
     fi
-    touch ${install_work}/${i}
-done
-
-if [ $# -eq 4 ] ; then
-    product_name=$4;
-    product_env=${install_work}/env_${product_name}.sh
-    (test -e ${product_env} && rm ${product_env} )
-fi
 ### !!! writing salome.sh file !!!  -> define INST_ROOT
-cat >> ${install_work}/${SHRC} <<EOF
+    cat >> ${install_work}/${SHRC} <<EOF
 #${DELIM} Setting products installation directory ${DELIM}
-export INST_ROOT=${install_root}
+    export INST_ROOT=${install_root}
 
 #${DELIM} Environment switch: 0 for SALOME building, 1 for SALOME launching ${DELIM}
-export ENV_FOR_LAUNCH=1
+    export ENV_FOR_LAUNCH=1
 
 #${DELIM} Setting numeric locale ${DELIM}
-export LC_NUMERIC=C
+    export LC_NUMERIC=C
 
 EOF
 ### !!! The next is for RedHat 9 only !!!
-if [ -f /etc/redhat-release ] ; then
-  grep -e "Red Hat Linux release 9" /etc/redhat-release > /dev/null
-  if [ $? -eq 0 ] ; then
-    cat >> ${install_work}/${SHRC} <<EOF
+    if [ -f /etc/redhat-release ] ; then
+	grep -e "Red Hat Linux release 9" /etc/redhat-release > /dev/null
+	if [ $? -eq 0 ] ; then
+	    cat >> ${install_work}/${SHRC} <<EOF
 #${DELIM} Force RH9 to use old implementation of threads ${DELIM}
-export LD_ASSUME_KERNEL=2.4.18
+	    export LD_ASSUME_KERNEL=2.4.18
 
 EOF
-  fi
-fi
+	fi
+    fi
 ### !!! writing salome.csh file !!! -> set inital variables
-pre_vars="PATH LD_LIBRARY_PATH LD_RUN_PATH PYTHONPATH TCLLIBPATH"
-for i in ${pre_vars} ; do
-cat >> ${install_work}/${CSHRC} <<EOF
+    pre_vars="PATH LD_LIBRARY_PATH LD_RUN_PATH PYTHONPATH TCLLIBPATH"
+    for i in ${pre_vars} ; do
+	cat >> ${install_work}/${CSHRC} <<EOF
 #${DELIM} setting initial ${i} ${DELIM}
-if (! (\$?${i}) ) then
-  setenv ${i}
-endif
+	if (! (\$?${i}) ) then
+	    setenv ${i}
+	    endif
 
 EOF
-done
+    done
 
 ### !!! writing salome.(c)sh files !!! -> dump products environment files, changing 'export' by 'setenv(a|p)' where necessary
 ### Note, that for performance reasons temporary environment files used during installation procedure itself
@@ -176,25 +183,25 @@ done
 #fi
 
 # 1. first dump all environment files into the ${SHRC} file
-product_sequence="$2"
-install_products="$3"
-for i in ${product_sequence} ; do
-    env_file=${install_work}/env_${i}.sh
-    _env_file=${install_work}/_env_${i}.sh
-    if [ -e ${_env_file} ] ; then
-	cat ${_env_file} >> ${install_work}/${SHRC} 2>/dev/null
-    elif [ -e ${env_file} ] ; then
-	echo ${install_products} | grep -q "\b${i}\b"
-	if [ $? -eq 1 ] ; then
-	    cat ${env_file} | sed 's/^/## /' >> ${install_work}/${SHRC} 2>/dev/null
-	else
-	    cat ${env_file} >> ${install_work}/${SHRC} 2>/dev/null
+    product_sequence="$2"
+    install_products="$3"
+    for i in ${product_sequence} ; do
+	env_file=${install_work}/env_${i}.sh
+	_env_file=${install_work}/_env_${i}.sh
+	if [ -e ${_env_file} ] ; then
+	    cat ${_env_file} >> ${install_work}/${SHRC} 2>/dev/null
+	elif [ -e ${env_file} ] ; then
+	    echo ${install_products} | grep -q "\b${i}\b"
+	    if [ $? -eq 1 ] ; then
+		cat ${env_file} | sed 's/^/## /' >> ${install_work}/${SHRC} 2>/dev/null
+	    else
+		cat ${env_file} >> ${install_work}/${SHRC} 2>/dev/null
+	    fi
 	fi
-    fi
-done
+    done
 
 # 2. writing global functions to _salome.sh file
-cat >> ${install_work}/_${SHRC} <<EOF
+    cat >> ${install_work}/_${SHRC} <<EOF
 ##########################################################################
 # Functions exporta and exportp are used to append/prepend correspondingly
 # one directory or a set of directories separated by semicolon symbol (':')
@@ -212,8 +219,8 @@ cat >> ${install_work}/_${SHRC} <<EOF
 # to the another set of directories (first parameter) and
 # removes duplicated entries;
 # the third parameter defines the mode: 0 - append, 1 - prepend
-cleandup() {
-out_var=\`echo \$1 \$2 | awk -v dir=\$3 '{                   \\
+    cleandup() {
+	out_var=\`echo \$1 \$2 | awk -v dir=\$3 '{                   \\
      na = split(\$2,a,":");                               \\
      k1=0;                                               \\
      bbb[k1++]="";                                       \\
@@ -253,32 +260,32 @@ out_var=\`echo \$1 \$2 | awk -v dir=\$3 '{                   \\
        }                                                 \\
      }                                                   \\
    }' | sed -e 's/\(.*\):/\1/g'\`
-echo \${out_var}
-}
+	echo \${out_var}
+    }
 ### exporta ###
 # appends directory or set of directories, separated by ':' (second parameter)
 # to the variable (first parameter)
-exporta () {
-xenv=\${!1}
-if [ -z "\${xenv}" ]; then xenv="<empty>"; fi
-out_var=\`cleandup \${xenv} \$2 0\`
-export \$1=\${out_var}
-}
+    exporta () {
+	xenv=\${!1}
+	if [ -z "\${xenv}" ]; then xenv="<empty>"; fi
+	out_var=\`cleandup \${xenv} \$2 0\`
+	export \$1=\${out_var}
+    }
 ### exportp ###
 # prepends directory or set of directories, separated by ':' (second parameter)
 # to the variable (first parameter)
-exportp () {
-xenv=\${!1}
-if [ -z "\${xenv}" ]; then xenv="<empty>"; fi
-out_var=\`cleandup \${xenv} \$2 1\`
-export \$1=\${out_var}
-}
+    exportp () {
+	xenv=\${!1}
+	if [ -z "\${xenv}" ]; then xenv="<empty>"; fi
+	out_var=\`cleandup \${xenv} \$2 1\`
+	export \$1=\${out_var}
+    }
 ###########################################################################
 
 EOF
 
 # 3. writing global functions to _salome.csh file
-cat >> ${install_work}/_${CSHRC} <<EOF
+    cat >> ${install_work}/_${CSHRC} <<EOF
 
 ###########################################################################
 # Aliases setenva and setenvp are used to append/prepend correspondingly
@@ -297,7 +304,7 @@ cat >> ${install_work}/_${CSHRC} <<EOF
 # to the another set of directories (first parameter) and
 # removes duplicated entries;
 # the third parameter defines the mode: 0 - append, 1 - prepend
-alias cleandup "echo \!:1 \!:2 | awk -v dir=\!:3         \\\\
+    alias cleandup "echo \!:1 \!:2 | awk -v dir=\!:3         \\\\
 '"'{ na = split(\$2,a,":");                               \\\\
      k1=0;                                               \\\\
      bbb[k1++]="";                                       \\\\
@@ -340,7 +347,7 @@ alias cleandup "echo \!:1 \!:2 | awk -v dir=\!:3         \\\\
 ### setenva ###
 # appends directory or set of directories, separated by ':' (second parameter)
 # to the variable (first parameter)
-alias setenva 'set a=\!:1 ; set b=\!:2 ;      \\
+    alias setenva 'set a=\!:1 ; set b=\!:2 ;      \\
                set c=\`printenv \${a}\` ;        \\
                set b=\`cleandup \${c} \${b} 0\` ; \\
                setenv \${a} \${b} ;             \\
@@ -349,7 +356,7 @@ alias setenva 'set a=\!:1 ; set b=\!:2 ;      \\
 ### setenvp ###
 # prepends directory or set of directories, separated by ':' (second parameter)
 # to the variable (first parameter)
-alias setenvp 'set a=\!:1 ; set b=\!:2 ;      \\
+    alias setenvp 'set a=\!:1 ; set b=\!:2 ;      \\
                set c=\`printenv \${a}\` ;        \\
                set b=\`cleandup \${c} \${b} 1\` ; \\
                setenv \${a} \${b} ;             \\
@@ -357,307 +364,315 @@ alias setenvp 'set a=\!:1 ; set b=\!:2 ;      \\
 ###########################################################################
 
 EOF
-cat ${install_work}/${CSHRC} >> ${install_work}/_${CSHRC}
+    cat ${install_work}/${CSHRC} >> ${install_work}/_${CSHRC}
 
 # 4. put the contents of salome.sh to _salome.sh replacing export by export(a|p) aliases where necessary
-sed -e 's%export\([[:blank:]]*\)PATH=\$[{]\?PATH[}]\?:\(.*\)%exporta\1PATH \2%g' -e 's%export\([[:blank:]]*\)PATH=\(.*\):\$[{]\?PATH[}]\?%exportp\1PATH \2%g' ${install_work}/${SHRC} > ${INSTALL_WORK}/_tmp1 2>/dev/null
-sed -e 's%export\([[:blank:]]*\)LD_LIBRARY_PATH=\$[{]\?LD_LIBRARY_PATH[}]\?:\(.*\)%exporta\1LD_LIBRARY_PATH \2%g' -e 's%export\([[:blank:]]*\)LD_LIBRARY_PATH=\(.*\):\$[{]\?LD_LIBRARY_PATH[}]\?%exportp\1LD_LIBRARY_PATH \2%g' ${INSTALL_WORK}/_tmp1 > ${INSTALL_WORK}/_tmp2 2>/dev/null
-sed -e 's%export\([[:blank:]]*\)PYTHONPATH=\$[{]\?PYTHONPATH[}]\?:\(.*\)%exporta\1PYTHONPATH \2%g' -e 's%export\([[:blank:]]*\)PYTHONPATH=\(.*\):\$[{]\?PYTHONPATH[}]\?%exportp\1PYTHONPATH \2%g' ${INSTALL_WORK}/_tmp2 > ${INSTALL_WORK}/_tmp1 2>/dev/null
-sed -e 's%export\([[:blank:]]*\)LD_RUN_PATH=\$[{]\?LD_RUN_PATH[}]\?:\(.*\)%exporta\1LD_RUN_PATH \2%g' -e 's%export\([[:blank:]]*\)LD_RUN_PATH=\(.*\):\$[{]\?LD_RUN_PATH[}]\?%exportp\1LD_RUN_PATH \2%g' ${INSTALL_WORK}/_tmp1 > ${INSTALL_WORK}/_tmp2
+    sed -e 's%export\([[:blank:]]*\)PATH=\$[{]\?PATH[}]\?:\(.*\)%exporta\1PATH \2%g' -e 's%export\([[:blank:]]*\)PATH=\(.*\):\$[{]\?PATH[}]\?%exportp\1PATH \2%g' ${install_work}/${SHRC} > ${INSTALL_WORK}/_tmp1 2>/dev/null
+    sed -e 's%export\([[:blank:]]*\)LD_LIBRARY_PATH=\$[{]\?LD_LIBRARY_PATH[}]\?:\(.*\)%exporta\1LD_LIBRARY_PATH \2%g' -e 's%export\([[:blank:]]*\)LD_LIBRARY_PATH=\(.*\):\$[{]\?LD_LIBRARY_PATH[}]\?%exportp\1LD_LIBRARY_PATH \2%g' ${INSTALL_WORK}/_tmp1 > ${INSTALL_WORK}/_tmp2 2>/dev/null
+    sed -e 's%export\([[:blank:]]*\)PYTHONPATH=\$[{]\?PYTHONPATH[}]\?:\(.*\)%exporta\1PYTHONPATH \2%g' -e 's%export\([[:blank:]]*\)PYTHONPATH=\(.*\):\$[{]\?PYTHONPATH[}]\?%exportp\1PYTHONPATH \2%g' ${INSTALL_WORK}/_tmp2 > ${INSTALL_WORK}/_tmp1 2>/dev/null
+    sed -e 's%export\([[:blank:]]*\)LD_RUN_PATH=\$[{]\?LD_RUN_PATH[}]\?:\(.*\)%exporta\1LD_RUN_PATH \2%g' -e 's%export\([[:blank:]]*\)LD_RUN_PATH=\(.*\):\$[{]\?LD_RUN_PATH[}]\?%exportp\1LD_RUN_PATH \2%g' ${INSTALL_WORK}/_tmp1 > ${INSTALL_WORK}/_tmp2
 
-cat ${INSTALL_WORK}/_tmp2 >> ${install_work}/_${SHRC}
+    cat ${INSTALL_WORK}/_tmp2 >> ${install_work}/_${SHRC}
 
 # 5. Create a salome.csh file from salome.sh by replacing export by setenv, etc.
-sed -e 's%export \([[:alnum:]_[:blank:]]*\)\=%setenv \1 %g' ${install_work}/${SHRC} > ${INSTALL_WORK}/_tmp1 2>/dev/null
-cat ${INSTALL_WORK}/_tmp1 >> ${install_work}/${CSHRC}
+    sed -e 's%export \([[:alnum:]_[:blank:]]*\)\=%setenv \1 %g' ${install_work}/${SHRC} > ${INSTALL_WORK}/_tmp1 2>/dev/null
+    cat ${INSTALL_WORK}/_tmp1 >> ${install_work}/${CSHRC}
 
 # 6. Create a _salome.csh file from _salome.sh by replacing export by setenv, exporta by setenva, etc.
-sed -e 's%export \([[:alnum:]_[:blank:]]*\)\=%setenv \1 %g' ${INSTALL_WORK}/_tmp2 > ${INSTALL_WORK}/_tmp1 2>/dev/null
-sed -e 's%exporta \([[:alnum:]_[:blank:]]*\)%setenva \1%g'  ${INSTALL_WORK}/_tmp1 > ${INSTALL_WORK}/_tmp2 2>/dev/null
-sed -e 's%exportp \([[:alnum:]_[:blank:]]*\)%setenvp \1%g'  ${INSTALL_WORK}/_tmp2 > ${INSTALL_WORK}/_tmp1 2>/dev/null
-sed -e 's%if \[ -n "\${PYTHONPATH}" \] ; then%if ( ${?PYTHONPATH} ) then%g' ${INSTALL_WORK}/_tmp1 > ${INSTALL_WORK}/_tmp2 2>/dev/null
-sed -e 's%if \[ -n "\${ENV_FOR_LAUNCH}" \] ; then%if ( ${?ENV_FOR_LAUNCH} ) then%g' ${INSTALL_WORK}/_tmp2 > ${INSTALL_WORK}/_tmp1 2>/dev/null
-sed -e 's%if \[ "\${ENV_FOR_LAUNCH}" =\?= "1" \] ; then%if ( "\${ENV_FOR_LAUNCH}" == "1" ) then%g' ${INSTALL_WORK}/_tmp1 > ${INSTALL_WORK}/_tmp2 2>/dev/null
-sed -e 's%^\([[:blank:]]*\)fi\([[:blank:]]*\)$%\1endif\2%g' ${INSTALL_WORK}/_tmp2 > ${INSTALL_WORK}/_tmp1 2>/dev/null
-sed -e 's%var.sh%var.csh%g' ${INSTALL_WORK}/_tmp1 > ${INSTALL_WORK}/_tmp2 2>/dev/null
-sed -e 's%if \[ -e "\${LICENSE_FILE}" \] ; then%if ( -e ${LICENSE_FILE} ) then%g' ${INSTALL_WORK}/_tmp2 > ${INSTALL_WORK}/_tmp1 2>/dev/null
-
-cat ${INSTALL_WORK}/_tmp1 >> ${install_work}/_${CSHRC} 2>/dev/null
-
-rm -f ${INSTALL_WORK}/_tmp1 ${INSTALL_WORK}/_tmp2
-
-if [ $# -eq 5 ] ; then
-    product_dir=$5
-    if [ -e ${product_dir} ] ; then
-	test -e ${product_dir}/${SHRC} && mv ${product_dir}/${SHRC} ${product_dir}/${SHRC}_`date +%F_%T`
-	cp ${install_work}/_${SHRC}  ${product_dir}/${SHRC}
-	test -e ${product_dir}/${CSHRC} && mv ${product_dir}/${CSHRC} ${product_dir}/${CSHRC}_`date +%F_%T`
-	cp ${install_work}/_${CSHRC} ${product_dir}/${CSHRC}
-    fi
-fi
-sed -e 's%setenv ENV_FOR_LAUNCH 1%setenv ENV_FOR_LAUNCH 0%' ${install_work}/_${CSHRC} > ${install_root}/env_build.csh
-sed -e 's%export ENV_FOR_LAUNCH=1%export ENV_FOR_LAUNCH=0%' ${install_work}/_${SHRC}  > ${install_root}/env_build.sh
-
-cp -f ${install_work}/_${CSHRC} ${install_root}/env_products.csh
-cp -f ${install_work}/_${SHRC}  ${install_root}/env_products.sh
-
-rm -f ${install_work}/_${SHRC} ${install_work}/_${CSHRC}
+    sed -e 's%export \([[:alnum:]_[:blank:]]*\)\=%setenv \1 %g' ${INSTALL_WORK}/_tmp2 > ${INSTALL_WORK}/_tmp1 2>/dev/null
+    sed -e 's%exporta \([[:alnum:]_[:blank:]]*\)%setenva \1%g'  ${INSTALL_WORK}/_tmp1 > ${INSTALL_WORK}/_tmp2 2>/dev/null
+    sed -e 's%exportp \([[:alnum:]_[:blank:]]*\)%setenvp \1%g'  ${INSTALL_WORK}/_tmp2 > ${INSTALL_WORK}/_tmp1 2>/dev/null
+    sed -e 's%if \[ -n "\${PYTHONPATH}" \] ; then%if ( ${?PYTHONPATH} ) then%g' ${INSTALL_WORK}/_tmp1 > ${INSTALL_WORK}/_tmp2 2>/dev/null
+    sed -e 's%if \[ -n "\${ENV_FOR_LAUNCH}" \] ; then%if ( ${?ENV_FOR_LAUNCH} ) then%g' ${INSTALL_WORK}/_tmp2 > ${INSTALL_WORK}/_tmp1 2>/dev/null
+    sed -e 's%if \[ "\${ENV_FOR_LAUNCH}" =\?= "1" \] ; then%if ( "\${ENV_FOR_LAUNCH}" == "1" ) then%g' ${INSTALL_WORK}/_tmp1 > ${INSTALL_WORK}/_tmp2 2>/dev/null
+    sed -e 's%^\([[:blank:]]*\)fi\([[:blank:]]*\)$%\1endif\2%g' ${INSTALL_WORK}/_tmp2 > ${INSTALL_WORK}/_tmp1 2>/dev/null
+    sed -e 's%var.sh%var.csh%g' ${INSTALL_WORK}/_tmp1 > ${INSTALL_WORK}/_tmp2 2>/dev/null
+    sed -e 's%if \[ -e "\${LICENSE_FILE}" \] ; then%if ( -e ${LICENSE_FILE} ) then%g' ${INSTALL_WORK}/_tmp2 > ${INSTALL_WORK}/_tmp1 2>/dev/null
+
+    cat ${INSTALL_WORK}/_tmp1 >> ${install_work}/_${CSHRC} 2>/dev/null
+
+    rm -f ${INSTALL_WORK}/_tmp1 ${INSTALL_WORK}/_tmp2
+
+    if [ $# -eq 5 ] ; then
+	    product_dir=$5
+	    if [ -e ${product_dir} ] ; then
+		test -e ${product_dir}/${SHRC} && mv ${product_dir}/${SHRC} ${product_dir}/${SHRC}_`date +%F_%T`
+		cp ${install_work}/_${SHRC}  ${product_dir}/${SHRC}
+		test -e ${product_dir}/${CSHRC} && mv ${product_dir}/${CSHRC} ${product_dir}/${CSHRC}_`date +%F_%T`
+		cp ${install_work}/_${CSHRC} ${product_dir}/${CSHRC}
+	    fi
+    fi
+    sed -e 's%setenv ENV_FOR_LAUNCH 1%setenv ENV_FOR_LAUNCH 0%' ${install_work}/_${CSHRC} > ${install_root}/env_build.csh
+    sed -e 's%export ENV_FOR_LAUNCH=1%export ENV_FOR_LAUNCH=0%' ${install_work}/_${SHRC}  > ${install_root}/env_build.sh
+
+    cp -f ${install_work}/_${CSHRC} ${install_root}/env_products.csh
+    cp -f ${install_work}/_${SHRC}  ${install_root}/env_products.sh
+
+    rm -f ${install_work}/_${SHRC} ${install_work}/_${CSHRC}
 ### !!! copying build.csh and build.sh scripts
-if [ -e ./build.csh ] && [ ! -e ${install_root}/build.csh ]; then
-    cp -f ./build.csh ${install_root}
-fi
-if [ -e ./build.sh ] && [ ! -e ${install_root}/build.sh ]; then
-    cp -f ./build.sh ${install_root}
-fi
+    if [ -e ./build.csh ] && [ ! -e ${install_root}/build.csh ]; then
+	cp -f ./build.csh ${install_root}
+    fi
+    if [ -e ./build.sh ] && [ ! -e ${install_root}/build.sh ]; then
+	cp -f ./build.sh ${install_root}
+    fi
 ### !!! copying release notes
-for p in `ls ../` ; do
-    export pdf=`echo ${p} | sed s/[.]/" "/g | awk '{print $2}'`
-    if [ "${pdf}" = "pdf" ]; then
-	export RN=${p}
-	if [ ! -e ${install_root}/${RN} ]; then
-	    cp -f ../${RN} ${install_root}
+    for p in `ls ../` ; do
+	export pdf=`echo ${p} | sed s/[.]/" "/g | awk '{print $2}'`
+	if [ "${pdf}" = "pdf" ]; then
+	    export RN=${p}
+	    if [ ! -e ${install_root}/${RN} ]; then
+		cp -f ../${RN} ${install_root}
+	    fi
 	fi
-    fi
-done
+    done
 
-}
+	}
 
 #try use already existing product
-try_existing()
-{
-product_dir=$1;  install_root=$2;  install_work=$3;
-product_sequence="$4"; installed_products="$5";  product_type=$6
-env_file=${product_dir}/env_${product_type}.sh
-if [ -f ${env_file} ] ; then
-    cp -f ${env_file} ${install_work}/_env_${product_type}.sh
-    make_env ${install_root} ${install_work} "${product_sequence}" "${installed_products}"
-    source ${install_work}/${SHRC}
-    check_version
-    if [ $? -eq 0 ] ; then
-	return 0
-    fi
-fi
-echo ${product_type} | grep -q '_src$'
-if [ $? -eq 1 ] ; then
-    print_env_bin
-else
-    print_env_src
-fi
-return 0
-}
+	try_existing()
+	{
+#set -x
+	    product_dir=$1;  install_root=$2;  install_work=$3;
+	    product_sequence="$4"; installed_products="$5";  product_type=$6
+	    env_file=${product_dir}/env_${product_type}.sh
+	    if [ -f ${env_file} ] ; then
+		cp -f ${env_file} ${install_work}/_env_${product_type}.sh
+		make_env ${install_root} ${install_work} "${product_sequence}" "${installed_products}"
+		source ${install_work}/${SHRC}
+		check_version
+		if [ $? -eq 0 ] ; then
+		    return 0
+		fi
+	    fi
+	    echo ${product_type} | grep -q '_src$'
+	    if [ $? -eq 1 ] ; then
+		print_env_bin
+	    else
+		print_env_src
+	    fi
+#set +x
+	    return 0
+	}
 
 #check existance of lib passed as first parameter
 #return 0 if lib exists
 #if you pass second parameter search will be done in it
 #otherwise search will be done in ${LD_LIBRARY_PATH}
 #you should use : as dilimeter if you are going to pass second parameter
-check_lib_version(){
-if [ -n "$2" ]; then
-   whereIs=$2
-else
-   whereIs=${LD_LIBRARY_PATH}
-fi
-for d in `echo ${whereIs} | sed -e"s%:% %g"` ;  do
-    ret=`find ${d} -name $1 2>/dev/null`
-    if [ -n "${ret}" ] ; then
+	check_lib_version(){
+	    if [ -n "$2" ]; then
+		whereIs=$2
+	    else
+		whereIs=${LD_LIBRARY_PATH}
+	    fi
+	    for d in `echo ${whereIs} | sed -e"s%:% %g"` ;  do
+		ret=`find ${d} -name $1 2>/dev/null`
+		if [ -n "${ret}" ] ; then
 	#echo "The $1 exists on yours system in a ${d} folder"
-	return 0
-    fi
-done
-return 1
-}
-
-find_in_path(){
-file=$1;  shift;
-path=$*
-for i in `echo ${path} | sed -e"s%:% %g"` ; do
-    ret=`find ${i} -name ${file} -maxdepth 1 2>/dev/null`
-    if [ -n "${ret}" ] ; then
-	ret=`echo ${ret} | sed -e"s%/\${file}$%%g"`
-	echo ${ret}
-	return 0
-    fi
-done
-return 1
-}
-
-sort_path(){
-arg1=$1;  val1=$2;  arg2=$3;  val2=$4
-tmp="^${val1}$|^${val1}:|:${val1}$|:${val1}:"
+		    return 0
+		fi
+	    done
+	    return 1
+	}
+
+	find_in_path(){
+	    file=$1;  shift;
+	    path=$*
+	    for i in `echo ${path} | sed -e"s%:% %g"` ; do
+		ret=`find ${i} -name ${file} -maxdepth 1 2>/dev/null`
+		if [ -n "${ret}" ] ; then
+		    ret=`echo ${ret} | sed -e"s%/\${file}$%%g"`
+		    echo ${ret}
+		    return 0
+		fi
+	    done
+	    return 1
+	}
+
+	sort_path(){
+	    arg1=$1;  val1=$2;  arg2=$3;  val2=$4
+	    tmp="^${val1}$|^${val1}:|:${val1}$|:${val1}:"
 #echo ${val2} | grep -E "${tmp}" >/dev/null 2>&1
 #if [ $? -eq 0 ] ; then
 #    echo "${arg2}"
 #    return
 #fi
-to_tail=1
-exclude_list="usr lib bin sbin etc"
-for i in ${exclude_list} ; do
-    tmp="^/${i}/|^/${i}\$"
-    echo ${val1} | grep -E "${tmp}" >/dev/null 2>&1
-    if [ "$?" = "0" ] ; then to_tail=0; break; fi
-done
-if [ ${to_tail} -eq 0 ] ; then
-    echo ${arg2}:${arg1}
-else
-    echo ${arg1}:${arg2}
-fi
-return ${to_tail}
-}
-
-where_gcc(){
-maj_ver=`echo $1 | awk -F. '{if(NF>0) print $1; else print 0}'`
-min_ver=`echo $1 | awk -F. '{if(NF>1) print $2; else print 0}'`
-rel_ver=`echo $1 | awk -F. '{if(NF>2) print $3; else print 0}'`
-let ver=${maj_ver}*10000+${min_ver}*100+${rel_ver}
-newer=""
-newerver=0
-for i in `echo ${PATH}:/usr/bin:/usr/local/bin | sed -e"s%:% %g"` ; do
-    ret=`find ${i} -name gcc -maxdepth 1 2>/dev/null`
-    if [ -n "${ret}" ] ; then
-	maj_ver=`${ret} -dumpversion | awk -F. '{if(NF>0) print $1; else print 0}'`
-	min_ver=`${ret} -dumpversion | awk -F. '{if(NF>1) print $2; else print 0}'`
-	rel_ver=`${ret} -dumpversion | awk -F. '{if(NF>2) print $3; else print 0}'`
-	let ver1=${maj_ver}*10000+${min_ver}*100+${rel_ver}
-	if [ ${ver1} -eq ${ver} ] ; then
-	    ret=`echo ${ret} | sed -e"s%/gcc$%%g"`
-	    echo ${ret}
-	    return 0
-	fi
-	if [ ${ver1} -gt ${ver} ] && [ ${ver1} -gt ${newerver} ] ; then
-	    let newerver=${ver1}
-	    newer=`echo ${ret} | sed -e"s%/gcc$%%g"`
-	fi
-    fi
-done
-if [ -n "${newer}" ] ; then
-    echo ${newer}
-    return 0
-fi
-return 1
-}
-
-where_tcl(){
-if test -z "${TCLHOME}"; then
-    TCLHOME=/usr
-fi
-tclcfg=`find ${TCLHOME}/lib -name "tclConfig.sh" 2> /dev/null`
-file=""
-maxver=0
-for f in ${tclcfg} ; do
-    ver=`cat ${f} | grep -e "TCL_VERSION=.*" | sed -e "s%TCL_VERSION=[\'|\"]\(.*\)[\'|\"]%\1%g" | awk -F. '{x=0;for(i=1;i<=3;i++){x=x*100;if(i<=NF)x+=$i;}print x;}'`
-    if [ ${maxver} -lt ${ver} ]; then
-        maxver=${ver}
-	file=${f}
-    fi
-done
-if test -n "${file}"; then
-    echo `dirname ${file}`
-    return 0
-else
-    echo ""
-    return 1
-fi
-}
-
-where_tk(){
-if test -z "${TCLHOME}"; then
-    TCLHOME=/usr
-fi
-tclcfg=`find ${TCLHOME}/lib -name "tkConfig.sh" 2> /dev/null`
-file=""
-maxver=0
-for f in ${tclcfg} ; do
-    ver=`cat ${f} | grep -e "TK_VERSION=.*" | sed -e "s%TK_VERSION=[\'|\"]\(.*\)[\'|\"]%\1%g" | awk -F. '{x=0;for(i=1;i<=3;i++){x=x*100;if(i<=NF)x+=$i;}print x;}'`
-    if [ ${maxver} -lt ${ver} ]; then
-        maxver=${ver}
-	file=${f}
-    fi
-done
-if test -n "${file}"; then
-    echo `dirname ${file}`
-    return 0
-else
-    echo ""
-    return 1
-fi
-}
-
-where_dps(){
-if test -f /usr/X11R6/include/DPS/dpsconfig.h ; then
-    echo "/usr/X11R6"
-    return 0
-fi
-if test -f /usr/include/DPS/dpsconfig.h ; then
-    echo "/usr"
-    return 0
-fi
-echo ""
-return 1
-}
-
-where_gl_includes(){
-for d in /usr/X11R6/include /usr/include ; do
-    if [ -d ${d}/GL ] && [ -f ${d}/GL/gl.h ] ; then
-	echo "${d}"
-	return 0
-    fi
-done
-echo ""
-return 1
-}
-
-where_gl_libs(){
-local d
-local libdir
-local libdirs="/usr/X11R6/lib64 /usr/lib64 /usr/lib/`uname -m`-linux-gnu /usr/X11R6/lib /usr/lib"
+	    to_tail=1
+	    exclude_list="usr lib bin sbin etc"
+	    for i in ${exclude_list} ; do
+		tmp="^/${i}/|^/${i}\$"
+		echo ${val1} | grep -E "${tmp}" >/dev/null 2>&1
+		if [ "$?" = "0" ] ; then to_tail=0; break; fi
+	    done
+	    if [ ${to_tail} -eq 0 ] ; then
+		echo ${arg2}:${arg1}
+	    else
+		echo ${arg1}:${arg2}
+	    fi
+	    return ${to_tail}
+	}
+
+	where_gcc(){
+	    maj_ver=`echo $1 | awk -F. '{if(NF>0) print $1; else print 0}'`
+	    min_ver=`echo $1 | awk -F. '{if(NF>1) print $2; else print 0}'`
+	    rel_ver=`echo $1 | awk -F. '{if(NF>2) print $3; else print 0}'`
+	    let ver=${maj_ver}*10000+${min_ver}*100+${rel_ver}
+	    newer=""
+	    newerver=0
+	    for i in `echo ${PATH}:/usr/bin:/usr/local/bin | sed -e"s%:% %g"` ; do
+		ret=`find ${i} -name gcc -maxdepth 1 2>/dev/null`
+		if [ -n "${ret}" ] ; then
+		    maj_ver=`${ret} -dumpversion | awk -F. '{if(NF>0) print $1; else print 0}'`
+		    min_ver=`${ret} -dumpversion | awk -F. '{if(NF>1) print $2; else print 0}'`
+		    rel_ver=`${ret} -dumpversion | awk -F. '{if(NF>2) print $3; else print 0}'`
+		    let ver1=${maj_ver}*10000+${min_ver}*100+${rel_ver}
+		    if [ ${ver1} -eq ${ver} ] ; then
+			ret=`echo ${ret} | sed -e"s%/gcc$%%g"`
+			echo ${ret}
+			return 0
+		    fi
+		    if [ ${ver1} -gt ${ver} ] && [ ${ver1} -gt ${newerver} ] ; then
+			let newerver=${ver1}
+			newer=`echo ${ret} | sed -e"s%/gcc$%%g"`
+		    fi
+		fi
+	    done
+	    if [ -n "${newer}" ] ; then
+		echo ${newer}
+		return 0
+	    fi
+	    return 1
+	}
+
+	where_tcl(){
+	    if test -z "${TCLHOME}"; then
+		TCLHOME=/usr
+	    fi
+	    tclcfg=`find ${TCLHOME}/lib/${ARCH} -name "tclConfig.sh" 2> /dev/null`
+	    if [ -z "${tclcfg}" ]; then
+		tclcfg=`find ${TCLHOME}/lib -name "tclConfig.sh" 2> /dev/null`
+	    fi
+	    file=""
+	    maxver=0
+	    for f in ${tclcfg} ; do
+		ver=`cat ${f} | grep -e "TCL_VERSION=.*" | sed -e "s%TCL_VERSION=[\'|\"]\(.*\)[\'|\"]%\1%g" | awk -F. '{x=0;for(i=1;i<=3;i++){x=x*100;if(i<=NF)x+=$i;}print x;}'`
+		if [ ${maxver} -lt ${ver} ]; then
+		    maxver=${ver}
+		    file=${f}
+		fi
+	    done
+	    if test -n "${file}"; then
+		echo `dirname ${file}`
+		return 0
+	    else
+		echo ""
+		return 1
+	    fi
+	}
+
+	where_tk(){
+	    if test -z "${TCLHOME}"; then
+		TCLHOME=/usr
+	    fi
+	    tclcfg=`find ${TCLHOME}/lib/${ARCH} -name "tkConfig.sh" 2> /dev/null`
+	    if [ -z "${tclcfg}" ]; then
+		tclcfg=`find ${TCLHOME}/lib -name "tkConfig.sh" 2> /dev/null`
+	    fi
+	    file=""
+	    maxver=0
+	    for f in ${tclcfg} ; do
+		ver=`cat ${f} | grep -e "TK_VERSION=.*" | sed -e "s%TK_VERSION=[\'|\"]\(.*\)[\'|\"]%\1%g" | awk -F. '{x=0;for(i=1;i<=3;i++){x=x*100;if(i<=NF)x+=$i;}print x;}'`
+		if [ ${maxver} -lt ${ver} ]; then
+		    maxver=${ver}
+		    file=${f}
+		fi
+	    done
+	    if test -n "${file}"; then
+		echo `dirname ${file}`
+		return 0
+	    else
+		echo ""
+		return 1
+	    fi
+	}
+
+	where_dps(){
+	    if test -f /usr/X11R6/include/DPS/dpsconfig.h ; then
+		echo "/usr/X11R6"
+		return 0
+	    fi
+	    if test -f /usr/include/DPS/dpsconfig.h ; then
+		echo "/usr"
+		return 0
+	    fi
+	    echo ""
+	    return 1
+	}
+
+	where_gl_includes(){
+	    for d in /usr/X11R6/include /usr/include ; do
+		if [ -d ${d}/GL ] && [ -f ${d}/GL/gl.h ] ; then
+		    echo "${d}"
+		    return 0
+		fi
+	    done
+	    echo ""
+	    return 1
+	}
+
+	where_gl_libs(){
+	    local d
+	    local libdir
+	    local libdirs="/usr/X11R6/lib64 /usr/lib64 /usr/lib/`uname -m`-linux-gnu /usr/X11R6/lib /usr/lib"
 
 # search libGL.so* file and correct libGL.la in the same directory
-for d in ${libdirs} ; do
-    if [ "`ls ${d}/libGL.so* 2>/dev/null`" ] && [ -f ${d}/libGL.la ]; then
-	libdir=`grep "libdir=" ${d}/libGL.la | sed -e "s%libdir='\(.*\)'%\1%" -e "s%/*$%%g"`
-	if [ "${libdir}" = "${d}" ] ; then
-	    echo "${d}"
-	    return 0
-	fi
-    fi
-done
+	    for d in ${libdirs} ; do
+		if [ "`ls ${d}/libGL.so* 2>/dev/null`" ] && [ -f ${d}/libGL.la ]; then
+		    libdir=`grep "libdir=" ${d}/libGL.la | sed -e "s%libdir='\(.*\)'%\1%" -e "s%/*$%%g"`
+		    if [ "${libdir}" = "${d}" ] ; then
+			echo "${d}"
+			return 0
+		    fi
+		fi
+	    done
 # search libGL.la file and check if this file is correct
-for d in ${libdirs} ; do
-    if [ -f ${d}/libGL.la ] ; then
-	libdir=`grep "libdir=" ${d}/libGL.la | sed -e "s%libdir='\(.*\)'%\1%"`
-	if [ "`ls ${libdir}/libGL.so* 2>/dev/null`" ] ; then
-	    echo "${d}"
-	    return 0
-	fi
-    fi
-done
+	    for d in ${libdirs} ; do
+		if [ -f ${d}/libGL.la ] ; then
+		    libdir=`grep "libdir=" ${d}/libGL.la | sed -e "s%libdir='\(.*\)'%\1%"`
+		    if [ "`ls ${libdir}/libGL.so* 2>/dev/null`" ] ; then
+			echo "${d}"
+			return 0
+		    fi
+		fi
+	    done
 # then search libGL.so* file
-for d in ${libdirs} ; do
-    if [ "`ls ${d}/libGL.so* 2>/dev/null`" ] ; then
-	echo "${d}"
-	return 0
-    fi
-done
-echo ""
-return 1
-}
-
-where_libgl_so(){
-local libdirs="/usr/X11R6/lib64 /usr/lib64 /usr/lib/`uname -m`-linux-gnu /usr/X11R6/lib /usr/lib"
-local d
-for d in ${libdirs} ; do
-    if [ -f ${d}/libGL.so ] ; then
-	echo ${d}/libGL.so
-	return 0
-    fi
-done
-echo ""
-return 1
-}
-
-fix_gl_libs(){
-    local gllibdir="`where_gl_libs`"
-    if [ "${gllibdir}" != "" ] ; then
+	    for d in ${libdirs} ; do
+		if [ "`ls ${d}/libGL.so* 2>/dev/null`" ] ; then
+		    echo "${d}"
+		    return 0
+		fi
+	    done
+	    echo ""
+	    return 1
+	}
+
+	where_libgl_so(){
+	    local libdirs="/usr/X11R6/lib64 /usr/lib64 /usr/lib/`uname -m`-linux-gnu /usr/X11R6/lib /usr/lib"
+	    local d
+	    for d in ${libdirs} ; do
+		if [ -f ${d}/libGL.so ] ; then
+		    echo ${d}/libGL.so
+		    return 0
+		fi
+	    done
+	    echo ""
+	    return 1
+	}
+
+	fix_gl_libs(){
+	    local gllibdir="`where_gl_libs`"
+	    if [ "${gllibdir}" != "" ] ; then
 #VSR: 02/04/2013 - next block is commented as it seems to be wrong :( libGL.la should not be ever mentioned
 #	if [ -f ${gllibdir}/libGL.la ] ; then
 #	    libdir=`grep "libdir=" ${gllibdir}/libGL.la | sed -e "s%libdir='\(.*\)'%\1%"`
@@ -665,408 +680,416 @@ fix_gl_libs(){
 #		str_to_replace="${gllibdir}/libGL.la"
 #	    fi
 #	fi
-	if [ "${str_to_replace}" = "" ] ; then
-	    str_to_replace="-L${gllibdir} -lGL"
-	fi
-
-	la_files=`find . -name "*.la"`
-	for la_file in ${la_files} XXX ; do
-	    if [ "${la_file}" = "XXX" ] ; then continue; fi
-	    grep -e "libGL.la" ${la_file} >& /dev/null || grep -e "-lGL\b" ${la_file} >& /dev/null && \
-	    sed -e "s%-lGL\b%%g"                                                       \
-		-e "s%[^[:space:]']*libGL.la[[:space:]]%%g"                            \
-		-e "s%^dependency_libs='\(.*\)%dependency_libs='${str_to_replace} \1%" \
-		${la_file} > ${la_file}.new && \
-		mv -f ${la_file}.new ${la_file}
-	done
-    fi
-}
-
-modif_la_files(){
-return 0
+		if [ "${str_to_replace}" = "" ] ; then
+		    str_to_replace="-L${gllibdir} -lGL"
+		fi
+
+		la_files=`find . -name "*.la"`
+		for la_file in ${la_files} XXX ; do
+		    if [ "${la_file}" = "XXX" ] ; then continue; fi
+		    grep -e "libGL.la" ${la_file} >& /dev/null || grep -e "-lGL\b" ${la_file} >& /dev/null && \
+			sed -e "s%-lGL\b%%g"                                                       \
+			-e "s%[^[:space:]']*libGL.la[[:space:]]%%g"                            \
+			-e "s%^dependency_libs='\(.*\)%dependency_libs='${str_to_replace} \1%" \
+			${la_file} > ${la_file}.new && \
+			mv -f ${la_file}.new ${la_file}
+		done
+	    fi
+	}
+
+	modif_la_files(){
+	    return 0
 # obsolete
-ldir=$1
-if [ -z "${ldir}" ] || [ ! -d "${ldir}" ]; then return 1; fi
+	    ldir=$1
+	    if [ -z "${ldir}" ] || [ ! -d "${ldir}" ]; then return 1; fi
 
-srcdir=`pwd`
+	    srcdir=`pwd`
 
-SALOME_MODULES="`env | awk -F_ '/[a-zA-Z0-9]*_ROOT_DIR/ { print $1 }'`"
+	    SALOME_MODULES="`env | awk -F_ '/[a-zA-Z0-9]*_ROOT_DIR/ { print $1 }'`"
 
-cd ${ldir}
-ldir=`pwd`
-la_files=`find . -name "*.la"`
+	    cd ${ldir}
+	    ldir=`pwd`
+	    la_files=`find . -name "*.la"`
 
 # netgen dir
-netgendir=${NETGEN_ROOT_DIR}
+	    netgendir=${NETGEN_ROOT_DIR}
 # freetype dir
-freetypedir=${FREETYPE_ROOT_DIR}
+	    freetypedir=${FREETYPE_ROOT_DIR}
 # ftgl dir
-ftgldir=${FTGL_ROOT_DIR}
+	    ftgldir=${FTGL_ROOT_DIR}
 # gl2ps dir
-gl2psdir=${GL2PS_ROOT_DIR}
+	    gl2psdir=${GL2PS_ROOT_DIR}
 # freeimage dir
-freeimagedir=${FREEIMAGE_ROOT_DIR}
+	    freeimagedir=${FREEIMAGE_ROOT_DIR}
 # tbb dir
-tbbbasedir=${TBB_ROOT_DIR}
-TBBKERNEL='cc4.1.0_libc2.4_kernel2.6.16.21'
-if test `uname -m` = "x86_64" ; then
-    export TBBMODE="intel64/${TBBKERNEL}"
-else
-    export TBBMODE="ia32/${TBBKERNEL}"
-fi
-tbbdir=${tbbbasedir}/lib/${TBBMODE}
+	    tbbbasedir=${TBB_ROOT_DIR}
+	    if [ "$TBB_ROOT_DIR" != "" ]; then 
+		TBBKERNEL='cc4.1.0_libc2.4_kernel2.6.16.21'
+		if test `uname -m` = "x86_64" ; then
+		    export TBBMODE="intel64/${TBBKERNEL}"
+		else
+		    export TBBMODE="ia32/${TBBKERNEL}"
+		fi         
+		tbbdir=${tbbbasedir}/lib/${TBBMODE}
+            else
+		tbbdir=/usr/lib
+            fi	    
 # cgns dir
-cgnslibdir=${CGNS_ROOT_DIR}
+	    cgnslibdir=${CGNS_ROOT_DIR}
 # occt dir
-casdir=${CAS_ROOT_DIR}/lib
-if [ ! -d ${casdir} ] ; then casdir=${CAS_ROOT_DIR}/Linux/lib ; fi
-if [ ! -d ${casdir} ] ; then casdir=${CAS_ROOT_DIR}/lin/lib ; fi
+	    casdir=${CAS_ROOT_DIR}/lib
+	    if [ ! -d ${casdir} ] ; then casdir=${CAS_ROOT_DIR}/Linux/lib ; fi
+	    if [ ! -d ${casdir} ] ; then casdir=${CAS_ROOT_DIR}/lin/lib ; fi
 # omniorb dir
-omnidir=${OMNIORB_ROOT_DIR}/lib
+	    omnidir=${OMNIORB_ROOT_DIR}/lib
 # vtk dir
-vtkpath=${VTK_DIR}
-if [ `uname -m` = "x86_64" ] && [ -d ${vtkpath}/lib64 ] ; then
-    LIB_PREFIX=64
-elif [ -d ${vtkpath}/lib ] ; then
-    LIB_PREFIX=""
-else
-    LIB_PREFIX=64
-fi
-vtkldir=${vtkpath}/lib${LIB_PREFIX}
-vtkdir=${vtkldir}/vtk-5.0
+	    vtkpath=${VTK_DIR}
+	    if [ `uname -m` = "x86_64" ] && [ -d ${vtkpath}/lib64 ] ; then
+		LIB_PREFIX=64
+	    elif [ -d ${vtkpath}/lib ] ; then
+		LIB_PREFIX=""
+	    else
+		LIB_PREFIX=64
+	    fi
+	    vtkldir=${vtkpath}/lib${LIB_PREFIX}
+	    vtkdir=${vtkldir}/vtk-5.0
 # hdf dir
-hdfdir=${HDF5_ROOT_DIR}/lib
+	    hdfdir=${HDF5_ROOT_DIR}/lib
 # med dir
-meddir=${MEDFILE_ROOT_DIR}/lib
+	    meddir=${MEDFILE_ROOT_DIR}/lib
 # qwt dir
-qwtdir=`find_in_path libqwt.so ${LD_LIBRARY_PATH}`
+	    qwtdir=`find_in_path libqwt.so ${LD_LIBRARY_PATH}`
 # python dir
-where_python=`which python`                 # e.g. /usr/bin/python
-if [ -n "${where_python}" ] ; then
-    where_python=`dirname ${where_python}`    # --> /usr/bin
-    where_python=`dirname ${where_python}`    # --> /usr
-    python_version=`python -c "import sys; print sys.version[:3]"`
-    pythondir=${where_python}/lib/python${python_version}
-fi
+	    where_python=`which python`                 # e.g. /usr/bin/python
+	    if [ -n "${where_python}" ] ; then
+		where_python=`dirname ${where_python}`    # --> /usr/bin
+		where_python=`dirname ${where_python}`    # --> /usr
+		python_version=`python -c "import sys; print sys.version[:3]"`
+		pythondir=${where_python}/lib/python${python_version}
+	    fi
 # sip dir
-sipdir=`find_in_path sip.so ${LD_LIBRARY_PATH}`
+	    sipdir=`find_in_path sip.so ${LD_LIBRARY_PATH}`
 # pyqt dir
-pyqtdir=`find_in_path Qt.so ${LD_LIBRARY_PATH}`
+	    pyqtdir=`find_in_path Qt.so ${LD_LIBRARY_PATH}`
 # tcl/tk dir
-tcldir=${TCLHOME}/lib
+	    tcldir=${TCLHOME}/lib
 # boost dir
-boostdir=${BOOST_ROOT_DIR}/lib
+	    boostdir=${BOOST_ROOT_DIR}/lib
 # blsurf dir
-blsurfdir=${BLSURFHOME}/lib
+	    blsurfdir=${BLSURFHOME}/lib
 # libxml2 dir
-libxmldir=${LIBXML2_ROOT_DIR}/lib
+	    libxmldir=${LIBXML2_ROOT_DIR}/lib
 # metis dir
-metisdir=${METIS_ROOT_DIR}
+	    metisdir=${METIS_ROOT_DIR}
 # scotch dir
-scotchbindir=${SCOTCH_ROOT_DIR}/bin
-scotchlibdir=${SCOTCH_ROOT_DIR}/lib
+	    if [ "${SCOTCH_ROOT_DIR}" != "" ]; then
+		scotchbindir=${SCOTCH_ROOT_DIR}/bin
+		scotchlibdir=${SCOTCH_ROOT_DIR}/lib
+	    fi
 # gl dir
-if test `uname -m` = "x86_64" ; then
-    libGLpath=/usr/lib64/libGL.la
-else
-    libGLpath=/usr/lib/libGL.la
-fi
+	    if test `uname -m` = "x86_64" ; then
+		libGLpath=/usr/lib64/libGL.la
+	    else
+		libGLpath=/usr/lib/libGL.la
+	    fi
 # graphviz dir
-graphvizdir=${GRAPHVIZ_ROOT_DIR}/lib
+	    graphvizdir=${GRAPHVIZ_ROOT_DIR}/lib
 # qscintilla dir
-qscintilladir=${QSCINTILLA_ROOT_DIR}/lib
+	    qscintilladir=${QSCINTILLA_ROOT_DIR}/lib
 # expat dir
-expatdir=${EXPAT_ROOT_DIR}/lib
+	    expatdir=${EXPAT_ROOT_DIR}/lib
 # paraview dir
-paraviewdir=${PARAVIEW_ROOT_DIR}/lib
+	    paraviewdir=${PARAVIEW_ROOT_DIR}/lib
 # qt dir
-qtdir=${QT4_ROOT_DIR}/lib
+	    if [ -n "${QT4_ROOT_DIR}" ]; then
+		qtdir=${QT4_ROOT_DIR}/lib
+	    fi
 # distene meshgems dir
-if test `uname -m` = "x86_64" ; then
-    mgemsdir=${MESHGEMS_ROOT_DIR}/lib/Linux_64
-else
-    mgemsdir=${MESHGEMS_ROOT_DIR}/lib/Linux
-fi
+	    if test `uname -m` = "x86_64" ; then
+		mgemsdir=${MESHGEMS_ROOT_DIR}/lib/Linux_64
+	    else
+		mgemsdir=${MESHGEMS_ROOT_DIR}/lib/Linux
+	    fi
 
-for l in X ${la_files}; do
+	    for l in X ${la_files}; do
 
-if [ "${l}" != "X" ] ; then
-    d=`dirname ${l}`
-    l=`basename ${l}`
-    cd ${ldir}; cd ${d}
+		if [ "${l}" != "X" ] ; then
+		    d=`dirname ${l}`
+		    l=`basename ${l}`
+		    cd ${ldir}; cd ${d}
 
     # . process salome modules dependencies
-    for mod in ${SALOME_MODULES} ; do
-	moddir=${mod}_ROOT_DIR
-	moddir=${!moddir}
-	if [ -n "${moddir}" ] ; then
-	    sed -e "s%[[:space:]]\(-L\)\?[^[:space:]]*${mod}[1]\?/lib% \1${moddir}/lib%g" \
-	        -e "s%[[:space:]]\(-L\)\?[^[:space:]]*${mod}WOGUI[1]\?/lib% \1${moddir}/lib%g" \
-	        -e "s%^libdir='[^[:space:]]*${mod}[1]\?/\(lib.*\)'%libdir='${moddir}/\1'%g" \
-		-e "s%^libdir='[^[:space:]]*${mod}WOGUI[1]\?/\(lib.*\)'%libdir='${moddir}/\1'%g" ${l} > ${l}"_"
-	    mv -f ${l}"_" ${l}
-	fi
-    done
+		    for mod in ${SALOME_MODULES} ; do
+			moddir=${mod}_ROOT_DIR
+			moddir=${!moddir}
+			if [ -n "${moddir}" ] ; then
+			    sed -e "s%[[:space:]]\(-L\)\?[^[:space:]]*${mod}[1]\?/lib% \1${moddir}/lib%g" \
+				-e "s%[[:space:]]\(-L\)\?[^[:space:]]*${mod}WOGUI[1]\?/lib% \1${moddir}/lib%g" \
+				-e "s%^libdir='[^[:space:]]*${mod}[1]\?/\(lib.*\)'%libdir='${moddir}/\1'%g" \
+				-e "s%^libdir='[^[:space:]]*${mod}WOGUI[1]\?/\(lib.*\)'%libdir='${moddir}/\1'%g" ${l} > ${l}"_"
+			    mv -f ${l}"_" ${l}
+			fi
+		    done
 
     # . process netgen dependencies
-    if [ -n "${netgendir}" ] && [ -d "${netgendir}" ] ; then
-	sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*netgen-[0-9.]\+/lib% \1${netgendir}/lib%g" ${l}
-    fi
+		    if [ -n "${netgendir}" ] && [ -d "${netgendir}" ] ; then
+			sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*netgen-[0-9.]\+/lib% \1${netgendir}/lib%g" ${l}
+		    fi
 
     # . process freetype dependencies
-    if [ -n "${freetypedir}" ] && [ -d "${freetypedir}" ] ; then
-	sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*freetype-[0-9.]\+/lib% \1${freetypedir}/lib%g" ${l}
-    fi
+		    if [ -n "${freetypedir}" ] && [ -d "${freetypedir}" ] ; then
+			sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*freetype-[0-9.]\+/lib% \1${freetypedir}/lib%g" ${l}
+		    fi
 
     # . process ftgl dependencies
-    if [ -n "${ftgldir}" ] && [ -d "${ftgldir}" ] ; then
-	sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*ftgl-[0-9.]\+/lib% \1${ftgldir}/lib%g" ${l}
-    fi
+		    if [ -n "${ftgldir}" ] && [ -d "${ftgldir}" ] ; then
+			sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*ftgl-[0-9.]\+/lib% \1${ftgldir}/lib%g" ${l}
+		    fi
 
     # . process gl2ps dependencies
-    if [ -n "${gl2psdir}" ] && [ -d "${gl2psdir}" ] ; then
-	sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*gl2ps-[0-9.]\+/lib% \1${gl2psdir}/lib%g" ${l}
-    fi
+		    if [ -n "${gl2psdir}" ] && [ -d "${gl2psdir}" ] ; then
+			sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*gl2ps-[0-9.]\+/lib% \1${gl2psdir}/lib%g" ${l}
+		    fi
 
     # . process freeimage dependencies
-    if [ -n "${freeimagedir}" ] && [ -d "${freeimagedir}" ] ; then
-	sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*freeimage-[0-9.]\+/lib% \1${freeimagedir}/lib%g" ${l}
-    fi
+		    if [ -n "${freeimagedir}" ] && [ -d "${freeimagedir}" ] ; then
+			sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*freeimage-[0-9.]\+/lib% \1${freeimagedir}/lib%g" ${l}
+		    fi
 
     # . process tbb dependencies
-    if [ -n "${tbbdir}" ] && [ -d "${tbbdir}" ] ; then
-	sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*tbb[^[:space:]]*/lib[^[:space:]]*% \1${tbbdir}%g" ${l}
-    fi
+		    if [ -n "${tbbdir}" ] && [ -d "${tbbdir}" ] ; then
+			sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*tbb[^[:space:]]*/lib[^[:space:]]*% \1${tbbdir}%g" ${l}
+		    fi
 
     # . process cgns dependencies
-    if [ -n "${cgnslibdir}" ] && [ -d "${cgnslibdir}" ] ; then
-	sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*cgnslib-[0-9.]\+/lib% \1${cgnslibdir}/lib%g" ${l}
-    fi
+		    if [ -n "${cgnslibdir}" ] && [ -d "${cgnslibdir}" ] ; then
+			sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*cgnslib-[0-9.]\+/lib% \1${cgnslibdir}/lib%g" ${l}
+		    fi
 
     # . process CAS.CADE dependencies
-    if [ -n "${CAS_ROOT_DIR}" ] && [ -d "${casdir}" ] ; then
-        sed -e "s%-L[^[:space:]]*OCCT[^[:space:]]*/install/lib%-L${casdir}%g" \
-	    -e "s%[^[:space:]]*OCCT[^[:space:]]*/install/lib/%${casdir}/%g"   \
-	    -e "s%[[:space:]]-L[^[:space:]]*\(OCCT\|CAS\)[^[:space:]]*/lib\?% -L${CAS_ROOT_DIR}/lib%g" \
-	    -e "s%[[:space:]][^[:space:]]*\(OCCT\|CAS\)[^[:space:]]*/lib/lib\?% ${CAS_ROOT_DIR}/lib/lib%g" ${l} > ${l}"_"
-	mv -f ${l}"_" ${l}
-    fi
+		    if [ -n "${CAS_ROOT_DIR}" ] && [ -d "${casdir}" ] ; then
+			sed -e "s%-L[^[:space:]]*OCCT[^[:space:]]*/install/lib%-L${casdir}%g" \
+			    -e "s%[^[:space:]]*OCCT[^[:space:]]*/install/lib/%${casdir}/%g"   \
+			    -e "s%[[:space:]]-L[^[:space:]]*\(OCCT\|CAS\)[^[:space:]]*/lib\?% -L${CAS_ROOT_DIR}/lib%g" \
+			    -e "s%[[:space:]][^[:space:]]*\(OCCT\|CAS\)[^[:space:]]*/lib/lib\?% ${CAS_ROOT_DIR}/lib/lib%g" ${l} > ${l}"_"
+			mv -f ${l}"_" ${l}
+		    fi
 
     # . process omniORB dependencies
-    if [ -n "${OMNIORB_ROOT_DIR}" ] && [ -d "${omnidir}" ] ; then
-	sed -i "s%-L[^[:space:]]*omni[^[:space:]]*%-L${omnidir}%g;s%-R[^[:space:]]*omni[^[:space:]]*%-R${omnidir}%g" ${l}
-    fi
+		    if [ -n "${OMNIORB_ROOT_DIR}" ] && [ -d "${omnidir}" ] ; then
+			sed -i "s%-L[^[:space:]]*omni[^[:space:]]*%-L${omnidir}%g;s%-R[^[:space:]]*omni[^[:space:]]*%-R${omnidir}%g" ${l}
+		    fi
 
     # . process VTK dependencies
-    if [ -n "${VTK_DIR}" ] && [ -d "${vtkdir}" ] && [ -d "${vtkldir}" ] ; then
-	sed -i "s%-L[^[:space:]]*VTK[^[:space:]]*/\(lib\|lib64\)/vtk\-5\.0%-L${vtkdir}%g;s%-L[^[:space:]]*VTK[^[:space:]]*/\(lib\|lib64\)%-L${vtkldir}%g" ${l}
-    fi
+		    if [ -n "${VTK_DIR}" ] && [ -d "${vtkdir}" ] && [ -d "${vtkldir}" ] ; then
+			sed -i "s%-L[^[:space:]]*VTK[^[:space:]]*/\(lib\|lib64\)/vtk\-5\.0%-L${vtkdir}%g;s%-L[^[:space:]]*VTK[^[:space:]]*/\(lib\|lib64\)%-L${vtkldir}%g" ${l}
+		    fi
 
     # . process HDF dependencies
-    if [ -n "${HDF5_ROOT_DIR}" ] && [ -d "${hdfdir}" ] ; then
-	sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*hdf[^[:space:]/]*/lib% \1${hdfdir}%g" ${l}
-    fi
+		    if [ -n "${HDF5_ROOT_DIR}" ] && [ -d "${hdfdir}" ] ; then
+			sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*hdf[^[:space:]/]*/lib% \1${hdfdir}%g" ${l}
+		    fi
 
     # . process MED dependencies
-    if [ -n "${MEDFILE_ROOT_DIR}" ] && [ -d "${meddir}" ] ; then
-	sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*med[^[:space:]/]*/lib% \1${meddir}%g" ${l}
-    fi
+		    if [ -n "${MEDFILE_ROOT_DIR}" ] && [ -d "${meddir}" ] ; then
+			sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*med[^[:space:]/]*/lib% \1${meddir}%g" ${l}
+		    fi
 
     # . process qwt dependencies
-    if [ -n "${qwtdir}" ] && [ -d "${qwtdir}" ] ; then
-	sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*qwt[^[:space:]/]*/lib% \1${qwtdir}%g" ${l}
-    fi
+		    if [ -n "${qwtdir}" ] && [ -d "${qwtdir}" ] ; then
+			sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*qwt[^[:space:]/]*/lib% \1${qwtdir}%g" ${l}
+		    fi
 
     # . process qt dependencies
-    if [ -n "${QT4_ROOT_DIR}" ] && [ -d "${qtdir}" ] ; then
-	sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*qt[^[:space:]/]*/lib% \1${qtdir}%g" ${l}
-    fi
+		    if [ -n "${QT4_ROOT_DIR}" ] && [ -d "${qtdir}" ] ; then
+			sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*qt[^[:space:]/]*/lib% \1${qtdir}%g" ${l}
+		    fi
 
     # . process python dependencies
-    if [ -n "${pythondir}" ] && [ -d "${pythondir}" ] ; then
-	sed -i "s%-L[^[:space:]]*python[0-9]\.[0-9]\([^[:space:]]*\)%-L${pythondir}\1%g" ${l}
-    fi
+		    if [ -n "${pythondir}" ] && [ -d "${pythondir}" ] ; then
+			sed -i "s%-L[^[:space:]]*python[0-9]\.[0-9]\([^[:space:]]*\)%-L${pythondir}\1%g" ${l}
+		    fi
 
     # . process sip dependencies
-    if [ -n "${sipdir}" ] && [ -d "${sipdir}" ] ; then
-	sed -i "s%-L[^[:space:]]*sip[^[:space:]]*%-L${sipdir}%g" ${l}
-    fi
+		    if [ -n "${sipdir}" ] && [ -d "${sipdir}" ] ; then
+			sed -i "s%-L[^[:space:]]*sip[^[:space:]]*%-L${sipdir}%g" ${l}
+		    fi
 
     # . process PyQt dependencies
-    if [ -n "${pyqtdir}" ] && [ -d "${pyqtdir}" ] ; then
-	sed -i "s%-L[^[:space:]]*PyQt[^[:space:]]*%-L${pyqtdir}%g" ${l}
-    fi
+		    if [ -n "${pyqtdir}" ] && [ -d "${pyqtdir}" ] ; then
+			sed -i "s%-L[^[:space:]]*PyQt[^[:space:]]*%-L${pyqtdir}%g" ${l}
+		    fi
 
     # . process tcl/tk dependencies
-    if [ -n "${tcldir}" ] && [ -d "${tcldir}" ] ; then
-	sed -i "s%-L[^[:space:]]*tcltk[^[:space:]]*/lib%-L${tcldir}%g" ${l}
-    fi
+		    if [ -n "${tcldir}" ] && [ -d "${tcldir}" ] ; then
+			sed -i "s%-L[^[:space:]]*tcltk[^[:space:]]*/lib%-L${tcldir}%g" ${l}
+		    fi
 
     # . process boost dependencies
-    if [ -n "${boostdir}" ] && [ -d "${boostdir}" ] ; then
-	sed -i "s%-L[^[:space:]]*boost[^[:space:]]*/lib%-L${boostdir}%g" ${l}
-    fi
+		    if [ -n "${boostdir}" ] && [ -d "${boostdir}" ] ; then
+			sed -i "s%-L[^[:space:]]*boost[^[:space:]]*/lib%-L${boostdir}%g" ${l}
+		    fi
 
     # . process blsurf dependencies
-    if [ -n "${blsurfdir}" ] && [ -d "${blsurfdir}" ] ; then
-	sed -i "s%-L[^[:space:]]*BLSurf[^[:space:]]*/lib%-L${blsurfdir}%g" ${l}
-    fi
+		    if [ -n "${blsurfdir}" ] && [ -d "${blsurfdir}" ] ; then
+			sed -i "s%-L[^[:space:]]*BLSurf[^[:space:]]*/lib%-L${blsurfdir}%g" ${l}
+		    fi
 
     # . process libxml dependencies
-    if [ -n "${libxmldir}" ] && [ -d "${libxmldir}" ] ; then
-	sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*libxml2-[0-9]\.[0-9]\.[0-9]/lib% \1${libxmldir}%g;s%[[:space:]]\(-L\)\?[^[:space:]]*libxml2/lib% \1${libxmldir}%g" ${l}
-    fi
+		    if [ -n "${libxmldir}" ] && [ -d "${libxmldir}" ] ; then
+			sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*libxml2-[0-9]\.[0-9]\.[0-9]/lib% \1${libxmldir}%g;s%[[:space:]]\(-L\)\?[^[:space:]]*libxml2/lib% \1${libxmldir}%g" ${l}
+		    fi
 
     # . process metis dependencies
-    if [ -n "${metisdir}" ] && [ -d "${metisdir}" ] ; then
-	sed -i "s%-L[^[:space:]]*metis[^[:space:]]*%-L${metisdir}%g" ${l}
-    fi
+		    if [ -n "${metisdir}" ] && [ -d "${metisdir}" ] ; then
+			sed -i "s%-L[^[:space:]]*metis[^[:space:]]*%-L${metisdir}%g" ${l}
+		    fi
 
     # . process scotch dependencies
-    if [ -n "${scotchbindir}" ] && [ -d "${scotchbindir}" ] ; then
-	sed -i "s%-L[^[:space:]]*scotch[^[:space:]]*/bin%-L${scotchbindir}%g" ${l}
-    fi
-    if [ -n "${scotchlibdir}" ] && [ -d "${scotchlibdir}" ] ; then
-	sed -i "s%-L[^[:space:]]*scotch[^[:space:]]*/lib%-L${scotchlibdir}%g" ${l}
-    fi
+		    if [ -n "${scotchbindir}" ] && [ -d "${scotchbindir}" ] ; then
+			sed -i "s%-L[^[:space:]]*scotch[^[:space:]]*/bin%-L${scotchbindir}%g" ${l}
+		    fi
+		    if [ -n "${scotchlibdir}" ] && [ -d "${scotchlibdir}" ] ; then
+			sed -i "s%-L[^[:space:]]*scotch[^[:space:]]*/lib%-L${scotchlibdir}%g" ${l}
+		    fi
 
     # . process libGL.la dependencies
-    sed -i "s%${libGLpath}%""%g" ${l}
+		    sed -i "s%${libGLpath}%""%g" ${l}
 
     # . process graphviz dependencies
-    if [ -n "${graphvizdir}" ] && [ -d "${graphvizdir}" ] ; then
-	sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*graphviz-[0-9]\.[0-9]\+\.[0-9]/lib% \1${graphvizdir}%g;s%[[:space:]]\(-L\)\?[^[:space:]]*graphviz/lib% \1${graphvizdir}%g" ${l}
-    fi
+		    if [ -n "${graphvizdir}" ] && [ -d "${graphvizdir}" ] ; then
+			sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*graphviz-[0-9]\.[0-9]\+\.[0-9]/lib% \1${graphvizdir}%g;s%[[:space:]]\(-L\)\?[^[:space:]]*graphviz/lib% \1${graphvizdir}%g" ${l}
+		    fi
 
     # . process QScintilla dependencies
-    if [ -n "${qscintilladir}" ] && [ -d "${qscintilladir}" ] ; then
-	sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*QScintilla-[0-9]\.[0-9]\(\.[0-9]\)\?/lib% \1${qscintilladir}%g" ${l}
-    fi
+		    if [ -n "${qscintilladir}" ] && [ -d "${qscintilladir}" ] ; then
+			sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*QScintilla-[0-9]\.[0-9]\(\.[0-9]\)\?/lib% \1${qscintilladir}%g" ${l}
+		    fi
 
     # . process expat-2.0.1 dependencies
-    if [ -n "${expatdir}" ] && [ -d "${expatdir}" ] ; then
-	sed -i "s%-L[^[:space:]]*expat[^[:space:]]*/lib%-L${expatdir}%g;s%[^[:space:]]*expat[^[:space:]]*/lib/libexpat.la%-lexpat%g" ${l}
-    fi
+		    if [ -n "${expatdir}" ] && [ -d "${expatdir}" ] ; then
+			sed -i "s%-L[^[:space:]]*expat[^[:space:]]*/lib%-L${expatdir}%g;s%[^[:space:]]*expat[^[:space:]]*/lib/libexpat.la%-lexpat%g" ${l}
+		    fi
 
     # . process ParaView dependencies
-    if [ -n "${paraviewdir}" ] && [ -d "${paraviewdir}" ] ; then
-	sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*ParaView-[0-9]\.[0-9]\+\.[0-9]/lib% \1${paraviewdir}%g" ${l}
-    fi
+		    if [ -n "${paraviewdir}" ] && [ -d "${paraviewdir}" ] ; then
+			sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*ParaView-[0-9]\.[0-9]\+\.[0-9]/lib% \1${paraviewdir}%g" ${l}
+		    fi
 
     # . process DISTENE MeshGems dependencies
-    if [ -n "${mgemsdir}" ] && [ -d "${mgemsdir}" ] ; then
-	sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*MeshGems-[0-9.]\+/Products/lib/Linux\(_64\)\?% \1${mgemsdir}%g" ${l}
-    fi
+		    if [ -n "${mgemsdir}" ] && [ -d "${mgemsdir}" ] ; then
+			sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*MeshGems-[0-9.]\+/Products/lib/Linux\(_64\)\?% \1${mgemsdir}%g" ${l}
+		    fi
 
-fi
-done
+		fi
+	    done
 
-cd ${srcdir}
-return 0
-}
-
-modif_cfg_file(){
-    local nf=$1
-    if [ "${nf}" = "" ] || [ ! -e ${nf} ] ; then
-	return
-    fi
-    if [ "${PYTHON_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/Python-[0-9.]\+%\1${PYTHON_ROOT_DIR}%g" $1
-    fi
-    if [ "${SWIG_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/swig-[0-9.]\+%\1${SWIG_ROOT_DIR}%g" $1
-    fi
-    if [ "${OMNIORB_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/omniORB-[0-9.]\+%\1${OMNIORB_ROOT_DIR}%g" $1
-    fi
-    if [ "${HDF5_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/hdf5-[0-9.]\+%\1${HDF5_ROOT_DIR}%g" $1
-    fi
-    if [ "${BOOST_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/boost-[0-9.]\+%\1${BOOST_ROOT_DIR}%g" $1
-    fi
-    if [ "${MEDFILE_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/med-[0-9.]\+%\1${MEDFILE_ROOT_DIR}%g" $1
-    fi
-    if [ "${QT4_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/qt-[0-9.]\+%\1${QT4_ROOT_DIR}%g" $1
-    fi
-    if [ "${QWT_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/qwt-[0-9.]\+%\1${QWT_ROOT_DIR}%g" $1
-    fi
-    if [ "${SIP_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/sip-[0-9.]\+%\1${SIP_ROOT_DIR}%g" $1
-    fi
-    if [ "${PYQT4_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/PyQt-[0-9.]\+%\1${PYQT4_ROOT_DIR}%g" $1
-    fi
-    if [ "${QSCINTILLA_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/QScintilla-[0-9.]\+%\1${QSCINTILLA_ROOT_DIR}%g" $1
-    fi
-    if [ "${PARAVIEW_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/ParaView-[0-9.]\+%\1${PARAVIEW_ROOT_DIR}%g" $1
-    fi
-    if [ "${LIBXML2_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/libxml2-[0-9.]\+%\1${LIBXML2_ROOT_DIR}%g" $1
-    fi
-    if [ "${EXPAT_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/expat-[0-9.]\+%\1${EXPAT_ROOT_DIR}%g" $1
-    fi
-    if [ "${FREETYPE_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/freetype-[0-9.]\+%\1${FREETYPE_ROOT_DIR}%g" $1
-    fi
-    if [ "${FREEIMAGE_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/freeimage-[0-9.]\+%\1${FREEIMAGE_ROOT_DIR}%g" $1
-    fi
-    if [ "${GL2PS_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/gl2ps-[0-9.]\+%\1${GL2PS_ROOT_DIR}%g" $1
-    fi
-    if [ "${TBB_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/tbb[^/; \"]\+%\1${TBB_ROOT_DIR}%g" $1
-    fi
-    if [ "${CAS_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/OCCT[^/]*\(/[^ /;\"]*\)\?\(\"\|/inc\|/lib\)%\1${CAS_ROOT_DIR}\3%g" $1
-    fi
-    if [ "${NETGEN_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/netgen-[0-9.]\+%\1${NETGEN_ROOT_DIR}%g" $1
-    fi
-    if [ "${CGNS_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/cgnslib-[0-9.]\+%\1${CGNS_ROOT_DIR}%g" $1
-    fi
-    if [ "${NUMPY_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/numpy-[0-9.]\+%\1${NUMPY_ROOT_DIR}%g" $1
-    fi
-    if [ "${GRAPHVIZ_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/graphviz-[0-9.]\+%\1${GRAPHVIZ_ROOT_DIR}%g" $1
-    fi
-    if [ "${DOXYGEN_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/doxygen-[0-9.]\+%\1${DOXYGEN_ROOT_DIR}%g" $1
-    fi
-    if [ "${SPHINX_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/Sphinx-[0-9.]\+%\1${SPHINX_ROOT_DIR}%g" $1
-    fi
-    if [ "${WSO2_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/wso2-wsf-cpp-[0-9.]\+%\1${WSO2_ROOT_DIR}%g" $1
-    fi
-    if [ "${MESHGEMS_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/MeshGems-[0-9.]\+%\1${MESHGEMS_ROOT_DIR}%g" $1
-    fi
-    if [ "${METIS_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/metis-[0-9.]\+%\1${METIS_ROOT_DIR}%g" $1
-    fi
-    if [ "${SCOTCH_ROOT_DIR}" != "" ] ; then
-	sed -i "s%\([^/]*\)[^; ]*/scotch-[0-9.]\+%\1${SCOTCH_ROOT_DIR}%g" $1
-    fi
-    local libglso=`where_libgl_so`
-    local sm
-    local smvar
-    for sm in LIBBATCH SIMANIO KERNEL GUI GEOM MED SMESH PARAVIS YACS HEXABLOCK HOMARD JOBMANAGER \
-	NETGENPLUGIN BLSURFPLUGIN GHS3DPLUGIN GHS3DPRLPLUGIN HexoticPLUGIN HEXABLOCKPLUGIN \
-	CALCULATOR PYCALCULATOR COMPONENT HELLO PYHELLO LIGHT PYLIGHT ATOMIC ATOMGEN ATOMSOLV RANDOMIZER SIERPINSKY ; do
-	smvar=${sm}_ROOT_DIR
-	if [ "${!smvar}" != "" ] ; then
-            sed -i "s%\([; \"]\)/[^; \"]\+/${sm}\([; \"/]\)%\1${!smvar}\2%g" $1
-	fi
-        grep libGL.so $1 > /dev/null && sed -i "s%\([; \"]\)/[^; \"]\+/libGL.so[0-9.]*%\1${libglso}%g" $1
-    done
-}
+	    cd ${srcdir}
+	    return 0
+	}
+
+	modif_cfg_file(){
+	    local nf=$1
+	    if [ "${nf}" = "" ] || [ ! -e ${nf} ] ; then
+		return
+	    fi
+	    if [ "${PYTHON_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/Python-[0-9.]\+%\1${PYTHON_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${SWIG_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/swig-[0-9.]\+%\1${SWIG_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${OMNIORB_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/omniORB-[0-9.]\+%\1${OMNIORB_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${HDF5_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/hdf5-[0-9.]\+%\1${HDF5_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${BOOST_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/boost-[0-9.]\+%\1${BOOST_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${MEDFILE_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/med-[0-9.]\+%\1${MEDFILE_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${QT4_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/qt-[0-9.]\+%\1${QT4_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${QWT_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/qwt-[0-9.]\+%\1${QWT_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${SIP_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/sip-[0-9.]\+%\1${SIP_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${PYQT4_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/PyQt-[0-9.]\+%\1${PYQT4_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${QSCINTILLA_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/QScintilla-[0-9.]\+%\1${QSCINTILLA_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${PARAVIEW_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/ParaView-[0-9.]\+%\1${PARAVIEW_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${LIBXML2_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/libxml2-[0-9.]\+%\1${LIBXML2_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${EXPAT_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/expat-[0-9.]\+%\1${EXPAT_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${FREETYPE_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/freetype-[0-9.]\+%\1${FREETYPE_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${FREEIMAGE_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/freeimage-[0-9.]\+%\1${FREEIMAGE_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${GL2PS_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/gl2ps-[0-9.]\+%\1${GL2PS_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${TBB_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/tbb[^/; \"]\+%\1${TBB_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${CAS_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/OCCT[^/]*\(/[^ /;\"]*\)\?\(\"\|/inc\|/lib\)%\1${CAS_ROOT_DIR}\3%g" $1
+	    fi
+	    if [ "${NETGEN_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/netgen-[0-9.]\+%\1${NETGEN_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${CGNS_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/cgnslib-[0-9.]\+%\1${CGNS_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${NUMPY_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/numpy-[0-9.]\+%\1${NUMPY_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${GRAPHVIZ_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/graphviz-[0-9.]\+%\1${GRAPHVIZ_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${DOXYGEN_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/doxygen-[0-9.]\+%\1${DOXYGEN_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${SPHINX_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/Sphinx-[0-9.]\+%\1${SPHINX_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${WSO2_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/wso2-wsf-cpp-[0-9.]\+%\1${WSO2_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${MESHGEMS_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/MeshGems-[0-9.]\+%\1${MESHGEMS_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${METIS_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/metis-[0-9.]\+%\1${METIS_ROOT_DIR}%g" $1
+	    fi
+	    if [ "${SCOTCH_ROOT_DIR}" != "" ] ; then
+		sed -i "s%\([^/]*\)[^; ]*/scotch-[0-9.]\+%\1${SCOTCH_ROOT_DIR}%g" $1
+	    fi
+	    local libglso=`where_libgl_so`
+	    local sm
+	    local smvar
+	    for sm in LIBBATCH SIMANIO KERNEL GUI GEOM MED SMESH PARAVIS YACS HEXABLOCK HOMARD JOBMANAGER \
+		NETGENPLUGIN BLSURFPLUGIN GHS3DPLUGIN GHS3DPRLPLUGIN HexoticPLUGIN HEXABLOCKPLUGIN \
+		CALCULATOR PYCALCULATOR COMPONENT HELLO PYHELLO LIGHT PYLIGHT ATOMIC ATOMGEN ATOMSOLV RANDOMIZER SIERPINSKY ; do
+		smvar=${sm}_ROOT_DIR
+		if [ "${!smvar}" != "" ] ; then
+		    sed -i "s%\([; \"]\)/[^; \"]\+/${sm}\([; \"/]\)%\1${!smvar}\2%g" $1
+		fi
+		grep libGL.so $1 > /dev/null && sed -i "s%\([; \"]\)/[^; \"]\+/libGL.so[0-9.]*%\1${libglso}%g" $1
+	    done
+	}
diff --git a/config_files/docutils.sh b/config_files/docutils.sh
index bfc6827..7e1163b 100755
--- a/config_files/docutils.sh
+++ b/config_files/docutils.sh
@@ -121,9 +121,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="docutils-${VERSION_DOCUTILS}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/doxygen.sh b/config_files/doxygen.sh
index 3356bf3..122e551 100755
--- a/config_files/doxygen.sh
+++ b/config_files/doxygen.sh
@@ -20,135 +20,152 @@ DOXYGEN_XVERSION=`echo ${VERSION_DOXYGEN} | awk -F. '{printf("%d",$1*10000+$2*10
 
 check_version()
 {
-check_lib_version doxygen ${PATH}
-if [ "$?" -ne "0" ]; then
-   return 1
-fi
-ver=`doxygen --version`
-maj_ver=`echo ${ver} | awk -F. '{if(NF>0) print $1; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
-min_ver=`echo ${ver} | awk -F. '{if(NF>1) print $2; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
-rel_ver=`echo ${ver} | awk -F. '{if(NF>2) print $3; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
-let ver=${maj_ver}*10000+${min_ver}*100+${rel_ver}
-if [ ${ver} -eq ${DOXYGEN_XVERSION} ] ; then
-    return 0
-fi
-return 1
+    check_lib_version doxygen ${PATH}
+    if [ "$?" -ne "0" ]; then
+	return 1
+    fi
+    ver=`doxygen --version`
+    maj_ver=`echo ${ver} | awk -F. '{if(NF>0) print $1; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+    min_ver=`echo ${ver} | awk -F. '{if(NF>1) print $2; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+    rel_ver=`echo ${ver} | awk -F. '{if(NF>2) print $3; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+    let ver=${maj_ver}*10000+${min_ver}*100+${rel_ver}
+    if [ ${ver} -ge ${DOXYGEN_XVERSION} ] ; then
+	return 0
+    fi
+    return 1
 }
 
 print_env_bin()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF
 #${DELIM} ${PRODUCT_TYPE} ${DELIM}
 export DOXYGEN_ROOT_DIR=\${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PATH=\${DOXYGEN_ROOT_DIR}/bin:\${PATH}
 ##
 EOF
-(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+	(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
 
-print_env_src()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
+    print_env_src()
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
 #${DELIM} ${PRODUCT_TYPE}_src ${DELIM}
 # nothing to do
 ##
 EOF
-(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+	(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
 
-try_preinstalled(){
-try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-return $?
-}
+    try_preinstalled(){
+	try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	return $?
+    }
 
-install_source()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-source ${INSTALL_WORK}/${SHRC}
+    install_source()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	source ${INSTALL_WORK}/${SHRC}
 
 # unpack
-check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
 
 # apply general patch for doxygen
-local patch_sources=1
-if [ "${patch_sources}" = "1" ] ; then
-    if [ -f patches/doxygen-${VERSION_DOXYGEN}.patch ] ; then
-	cp patches/doxygen-${VERSION_DOXYGEN}.patch ${PRODUCT_SRC_DIR}
-	( cd ${PRODUCT_SRC_DIR}; patch -p1 < doxygen-${VERSION_DOXYGEN}.patch )
-    fi
-fi
-
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
-fi
+	local patch_sources=1
+	if [ "${patch_sources}" = "1" ] ; then
+	    if [ -f patches/doxygen-${VERSION_DOXYGEN}.patch ] ; then
+		cp patches/doxygen-${VERSION_DOXYGEN}.patch ${PRODUCT_SRC_DIR}
+		( cd ${PRODUCT_SRC_DIR}; patch -p1 < doxygen-${VERSION_DOXYGEN}.patch )
+	    fi
+	fi
+
+	if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+	    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
+	fi
 
 # to generate environment scripts
-try_preinstalled
-}
-
-install_source_and_build()
-{
+	try_preinstalled
+    }
+
+    install_source_and_build()
+    {
+#set -x
+	ver=`doxygen --version`
+	maj_ver=`echo ${ver} | awk -F. '{if(NF>0) print $1; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	min_ver=`echo ${ver} | awk -F. '{if(NF>1) print $2; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	rel_ver=`echo ${ver} | awk -F. '{if(NF>2) print $3; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	let ver=${maj_ver}*10000+${min_ver}*100+${rel_ver}
+	if [ ${ver} -ge ${DOXYGEN_XVERSION} ] ; then
+	    echo "use built-in doxygen"
+	else
 # install sources
-install_source
+	    install_source
 
 # build sources
-cd ${PRODUCT_SRC_DIR}
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	    cd ${PRODUCT_SRC_DIR}
+	    test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
-check_job ${PRODUCT_DIR}/CONFIGURE.LOG ./configure --prefix ${PRODUCT_DIR}
-GCC=`which gcc`
-cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
+	    check_job ${PRODUCT_DIR}/CONFIGURE.LOG ./configure --prefix ${PRODUCT_DIR}
+	    GCC=`which gcc`
+	    cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
 used gcc=${GCC}
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make
-check_job ${PRODUCT_DIR}/MAKEINSTALL.LOG make install
+	    check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
+	    check_job ${PRODUCT_DIR}/MAKEINSTALL.LOG make install
 
-cd ${PRODUCT_DIR}
+	    cd ${PRODUCT_DIR}
 
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build.size
-    du -sk ${PRODUCT_DIR}     > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
-fi
+	    if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+		du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build.size
+		du -sk ${PRODUCT_DIR}     > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
+	    fi
 
 # remove sources and temporary files after building
-if [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
-    test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
-fi
+	    if [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
+		test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
+	    fi
 
 # to generate environment scripts
-try_preinstalled
-}
+	    try_preinstalled
+	fi
+#set +x
+    }
 
-install_binary()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-source ${INSTALL_WORK}/${SHRC}
+    install_binary()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	source ${INSTALL_WORK}/${SHRC}
 
 # create a product directory
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
-check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
 
 # to generate environment script for sources
-try_preinstalled
-}
-
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-shift
-REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
-export PRODUCT="doxygen-${VERSION_DOXYGEN}"
-export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
-export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
-export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
-source ./common.sh
-${PROCEDURE}
+	try_preinstalled
+    }
+
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    shift
+    SINGLE_DIR=${11};
+
+    export PRODUCT="doxygen-${VERSION_DOXYGEN}"
+    export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
+    export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
+    export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
+    source ./common.sh
+    ${PROCEDURE}
diff --git a/config_files/expat.sh b/config_files/expat.sh
index 53c9e11..7ec4849 100755
--- a/config_files/expat.sh
+++ b/config_files/expat.sh
@@ -16,6 +16,7 @@
 # expat version
 #
 VERSION_EXPAT=2.0.1
+EXPAT_XVERSION=`echo ${VERSION_EXPAT} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
 
 check_version(){
 if [ "${EXPAT_ROOT_DIR}" != "" ] && [ -f ${EXPAT_ROOT_DIR}/include/expat.h ] ; then
@@ -77,6 +78,23 @@ try_preinstalled
 
 install_source_and_build()
 {
+EXPAT_XVERSION=`echo ${VERSION_EXPAT} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
+
+status=1
+if [ -f /usr/include/expat.h ] ; then
+    ver_major=`grep "#define XML_MAJOR_VERSION" /usr/include/expat.h | awk '{print $3}'`
+    ver_minor=`grep "#define XML_MINOR_VERSION" /usr/include/expat.h | awk '{print $3}'`
+    ver_maint=`grep "#define XML_MICRO_VERSION" /usr/include/expat.h | awk '{print $3}'`
+    ver="${ver_major}.${ver_minor}.${ver_maint}"
+    ver=`echo ${ver} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
+    if [ ${ver} -ge ${EXPAT_XVERSION} ] ; then
+        status=0
+    fi
+fi
+
+if [ "$status" = "0" ]; then
+   echo "use built-in expat"
+else
 # install sources
 install_source
 
@@ -90,8 +108,8 @@ GCC=`which gcc`
 cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
 used gcc=${GCC}
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make
-check_job ${PRODUCT_DIR}/MAKE.LOG make install
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP} install
 
 cd ${PRODUCT_DIR}
 
@@ -107,6 +125,7 @@ fi
 
 # to generate environment scripts
 try_preinstalled
+fi
 }
 
 install_binary()
@@ -136,9 +155,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="expat-${VERSION_EXPAT}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/freeimage.sh b/config_files/freeimage.sh
index f0b21d5..5941545 100755
--- a/config_files/freeimage.sh
+++ b/config_files/freeimage.sh
@@ -16,14 +16,15 @@
 # freeimage version
 #
 VERSION_FREEIMAGE=3.15.4
+FREEIMAGE_XVERSION=`echo ${VERSION_FREEIMAGE} | awk -F. '{printf("%d",$1*10000+$2*100)}'`
 
 check_version()
 {
 # check existance of freeimage and its version
 if [ "${FREEIMAGE_ROOT_DIR}" != "" ] && [ -f ${FREEIMAGE_ROOT_DIR}/include/FreeImage.h ] ; then
-    ver_major=`grep "#define FREEIMAGE_MAJOR_VERSION"  ${FREEIMAGE_ROOT_DIR}/include/FreeImage.h | awk '{print $3}'`
-    ver_minor=`grep "#define FREEIMAGE_MINOR_VERSION"  ${FREEIMAGE_ROOT_DIR}/include/FreeImage.h | awk '{print $3}'`
-    ver_maint=`grep "#define FREEIMAGE_RELEASE_SERIAL" ${FREEIMAGE_ROOT_DIR}/include/FreeImage.h | awk '{print $3}'`
+    ver_major=`grep "#define FREEIMAGE_MAJOR_VERSION"  ${FREEIMAGE_ROOT_DIR}/include/FreeImage.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+    ver_minor=`grep "#define FREEIMAGE_MINOR_VERSION"  ${FREEIMAGE_ROOT_DIR}/include/FreeImage.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+    ver_maint=`grep "#define FREEIMAGE_RELEASE_SERIAL" ${FREEIMAGE_ROOT_DIR}/include/FreeImage.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
     ver="${ver_major}.${ver_minor}.${ver_maint}"
     if [ "${ver}" = "${VERSION_FREEIMAGE}" ] ; then
         return 0
@@ -32,6 +33,17 @@ fi
 return 1
 }
 
+print_env_sys()
+{
+cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+#${DELIM} ${PRODUCT_TYPE} ${DELIM}
+export FREEIMAGE_ROOT_DIR="/usr"
+##
+EOF
+(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+}
+
 print_env_bin()
 {
 cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
@@ -95,6 +107,20 @@ try_preinstalled
 
 install_source_and_build()
 {
+status=1
+if [ -f /usr/include/FreeImage.h ] ; then
+    ver_major=`grep "#define FREEIMAGE_MAJOR_VERSION"  /usr/include/FreeImage.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+    ver_minor=`grep "#define FREEIMAGE_MINOR_VERSION"  /usr/include/FreeImage.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+    ver_maint=`grep "#define FREEIMAGE_RELEASE_SERIAL" /usr/include/FreeImage.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+    ver="${ver_major}.${ver_minor}"
+    if [ "${ver}" = "3.15" ]; then
+       status=0
+    fi
+fi
+if [ "$status" = "0" ]; then
+    echo "use built-in freeimage"
+    print_env_sys
+else
 # install sources
 install_source
 
@@ -106,7 +132,7 @@ cd ${PRODUCT_SRC_DIR}
 ## building FreeImage library
 
 # compile
-check_job ${PRODUCT_DIR}/MAKE.LOG make -f Makefile.gnu
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP} -f Makefile.gnu
 
 # install
 check_job ${PRODUCT_DIR}/INSTALL.LOG make -f Makefile.gnu DESTDIR=${PRODUCT_DIR} install 
@@ -139,6 +165,7 @@ fi
 
 # to generate environment scripts
 try_preinstalled
+fi
 }
 
 install_binary()
@@ -162,9 +189,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="freeimage-${VERSION_FREEIMAGE}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/freetype.sh b/config_files/freetype.sh
index 4857cbd..049281a 100755
--- a/config_files/freetype.sh
+++ b/config_files/freetype.sh
@@ -16,14 +16,15 @@
 # freetype version
 #
 VERSION_FREETYPE=2.4.11
+FREETYPE_XVERSION_MIN=`echo ${VERSION_FREETYPE} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
 
 check_version()
 {
 # check existance of freetype and its version
 if [ "${FREETYPE_ROOT_DIR}" != "" ] && [ -f ${FREETYPE_ROOT_DIR}/include/freetype2/freetype/freetype.h ] ; then
-    ver_major=`grep "#define FREETYPE_MAJOR" ${FREETYPE_ROOT_DIR}/include/freetype2/freetype/freetype.h | awk '{print $3}'`
-    ver_minor=`grep "#define FREETYPE_MINOR" ${FREETYPE_ROOT_DIR}/include/freetype2/freetype/freetype.h | awk '{print $3}'`
-    ver_maint=`grep "#define FREETYPE_PATCH" ${FREETYPE_ROOT_DIR}/include/freetype2/freetype/freetype.h | awk '{print $3}'`
+    ver_major=`grep "#define FREETYPE_MAJOR" ${FREETYPE_ROOT_DIR}/include/freetype2/freetype/freetype.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+    ver_minor=`grep "#define FREETYPE_MINOR" ${FREETYPE_ROOT_DIR}/include/freetype2/freetype/freetype.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+    ver_maint=`grep "#define FREETYPE_PATCH" ${FREETYPE_ROOT_DIR}/include/freetype2/freetype/freetype.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
     ver="${ver_major}.${ver_minor}.${ver_maint}"
     if [ "${ver}" = "${VERSION_FREETYPE}" ] ; then
         return 0
@@ -32,6 +33,17 @@ fi
 return 1
 }
 
+print_env_sys()
+{
+cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+#${DELIM} ${PRODUCT_TYPE} ${DELIM}
+export FREETYPE_ROOT_DIR="/usr"
+##
+EOF
+(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+}
+
 print_env_bin()
 {
 cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
@@ -79,6 +91,31 @@ try_preinstalled
 
 install_source_and_build()
 {
+status=1
+# On Ubuntu
+if [ -f /usr/include/freetype2/freetype/freetype.h ] ; then
+    ver_major=`grep "#define FREETYPE_MAJOR" /usr/include/freetype2/freetype/freetype.h | awk '{print $3}'`
+    ver_minor=`grep "#define FREETYPE_MINOR" /usr/include/freetype2/freetype/freetype.h | awk '{print $3}'`
+    ver_maint=`grep "#define FREETYPE_PATCH" /usr/include/freetype2/freetype/freetype.h | awk '{print $3}'`
+	let ver=${ver_major}*10000+${ver_minor}*100+${ver_maint}
+	if [ ${ver} -ge ${FREETYPE_XVERSION_MIN} ] ; then
+	    status=0
+	fi 
+fi
+# On Debian
+if [ "$status" = "1" ] && [ -f /usr/include/freetype2/freetype.h ] ; then
+    ver_major=`grep "#define FREETYPE_MAJOR" /usr/include/freetype2/freetype.h | awk '{print $3}'`
+    ver_minor=`grep "#define FREETYPE_MINOR" /usr/include/freetype2/freetype.h | awk '{print $3}'`
+    ver_maint=`grep "#define FREETYPE_PATCH" /usr/include/freetype2/freetype.h | awk '{print $3}'`
+	let ver=${ver_major}*10000+${ver_minor}*100+${ver_maint}
+	if [ ${ver} -ge ${FREETYPE_XVERSION_MIN} ] ; then
+	    status=0
+	fi 
+fi
+if [ "$status" = 0 ]; then
+   echo "Use built-in freetype"
+   print_env_sys
+else
 # install sources
 install_source
 
@@ -96,7 +133,7 @@ fi
 check_job ${PRODUCT_DIR}/CONFIGURE.LOG ./configure --prefix=${PRODUCT_DIR} ${FREETYPE_CONFIGURE_OPTIONS}
 
 # compile
-check_job ${PRODUCT_DIR}/MAKE.LOG make
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
 
 # install
 check_job ${PRODUCT_DIR}/INSTALL.LOG make install 
@@ -115,6 +152,7 @@ fi
 
 # to generate environment scripts
 try_preinstalled
+fi
 }
 
 install_binary()
@@ -153,9 +191,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="freetype-${VERSION_FREETYPE}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/ftgl.sh b/config_files/ftgl.sh
index aa6664a..7fecbb3 100755
--- a/config_files/ftgl.sh
+++ b/config_files/ftgl.sh
@@ -16,6 +16,8 @@
 # ftgl version
 #
 VERSION_FTGL=2.1.3
+FTGL_XVERSION=`echo ${VERSION_FTGL} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
+
 
 check_version()
 {
@@ -90,6 +92,7 @@ try_preinstalled
 
 install_source_and_build()
 {
+
 # install sources
 install_source
 
@@ -113,7 +116,7 @@ fi
 check_job ${PRODUCT_DIR}/CONFIGURE.LOG ./configure --prefix=${PRODUCT_DIR} ${FTGL_CONFIGURE_OPTIONS}
 
 # compile
-check_job ${PRODUCT_DIR}/MAKE.LOG make
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
 
 # install
 check_job ${PRODUCT_DIR}/INSTALL.LOG make install 
@@ -174,9 +177,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="ftgl-${VERSION_FTGL}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/gcc-common.sh b/config_files/gcc-common.sh
index b79f88d..d6645d8 100755
--- a/config_files/gcc-common.sh
+++ b/config_files/gcc-common.sh
@@ -62,7 +62,10 @@ EOF
 #######       THIS COULD BE USED FOR STRICT COMPARISON  ##############################
 #	if [ ${maj_ver} -eq 3 ] && [ ${min_ver} -eq 2 ] && [ ${rel_ver} -eq 0 ] ;  then 
 ######################################################################################
-	if [ ${maj_ver} -eq ${GCC_VERSION_MAJ} ] && [ ${min_ver} -eq ${GCC_VERSION_MIN} ] && [ ${rel_ver} -ge ${GCC_VERSION_REL} ] ;  then 
+#echo ${maj_ver} "eq" ${GCC_VERSION_MAJ}
+#echo ${min_ver} "eq" ${GCC_VERSION_MIN}
+#echo ${rel_ver} "eq" ${GCC_VERSION_REL}
+	if [ ${maj_ver} -ge ${GCC_VERSION_MAJ} ] && [ ${min_ver} -ge ${GCC_VERSION_MIN} ] && [ ${rel_ver} -ge ${GCC_VERSION_REL} ] ;  then 
 	    return 0
 	else
 	    return 2
diff --git a/config_files/gl2ps.sh b/config_files/gl2ps.sh
index 204c828..8478944 100755
--- a/config_files/gl2ps.sh
+++ b/config_files/gl2ps.sh
@@ -16,14 +16,15 @@
 # gl2ps version
 #
 VERSION_GL2PS=1.3.8
+GL2PS_XVERSION=`echo ${VERSION_GL2PS} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
 
 check_version()
 {
 # check availability of glp2s and its version
 if [ "${GL2PS_ROOT_DIR}" != "" ] && [ -f ${GL2PS_ROOT_DIR}/include/gl2ps.h ] ; then
-    ver_major=`grep "#define GL2PS_MAJOR_VERSION" ${GL2PS_ROOT_DIR}/include/gl2ps.h | awk '{print $3}'`
-    ver_minor=`grep "#define GL2PS_MINOR_VERSION" ${GL2PS_ROOT_DIR}/include/gl2ps.h | awk '{print $3}'`
-    ver_maint=`grep "#define GL2PS_PATCH_VERSION" ${GL2PS_ROOT_DIR}/include/gl2ps.h | awk '{print $3}'`
+    ver_major=`grep "#define GL2PS_MAJOR_VERSION" ${GL2PS_ROOT_DIR}/include/gl2ps.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+    ver_minor=`grep "#define GL2PS_MINOR_VERSION" ${GL2PS_ROOT_DIR}/include/gl2ps.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+    ver_maint=`grep "#define GL2PS_PATCH_VERSION" ${GL2PS_ROOT_DIR}/include/gl2ps.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
     ver="${ver_major}.${ver_minor}.${ver_maint}"
     if [ "${ver}" = "${VERSION_GL2PS}" ] ; then
         return 0
@@ -32,6 +33,28 @@ fi
 return 1
 }
 
+print_env_sys()
+{
+cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+#${DELIM} ${PRODUCT_TYPE} ${DELIM}
+export GL2PS_ROOT_DIR="/usr"
+##
+EOF
+(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+}
+
+print_env_sys()
+{
+cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+#${DELIM} ${PRODUCT_TYPE} ${DELIM}
+export GL2PS_ROOT_DIR="/usr"
+##
+EOF
+(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+}
+
 print_env_bin()
 {
 cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
@@ -86,6 +109,21 @@ try_preinstalled
 
 install_source_and_build()
 {
+status=1
+if [ -f /usr/include/gl2ps.h ] ; then
+    ver_major=`grep "#define GL2PS_MAJOR_VERSION" /usr/include/gl2ps.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+    ver_minor=`grep "#define GL2PS_MINOR_VERSION" /usr/include/gl2ps.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+    ver_maint=`grep "#define GL2PS_PATCH_VERSION" /usr/include/gl2ps.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+    let ver=${ver_major}*10000+${ver_minor}*100+${ver_maint}
+    if [ "${ver}" -ge "${GL2PS_XVERSION}" ] ; then
+        status=0
+    fi
+fi
+
+if [ "$status" = "0" ]; then
+   echo "use built-in gl2ps"
+   print_env_sys
+else
 # install sources
 install_source
 
@@ -98,7 +136,7 @@ cd ${PRODUCT_SRC_DIR}
 check_job ${PRODUCT_DIR}/CONFIGURE.LOG cmake -DCMAKE_INSTALL_PREFIX=${PRODUCT_DIR} -DCMAKE_BUILD_TYPE=Release
 
 # compile
-check_job ${PRODUCT_DIR}/MAKE.LOG make
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
 
 # install
 check_job ${PRODUCT_DIR}/INSTALL.LOG make install 
@@ -117,6 +155,7 @@ fi
 
 # to generate environment scripts
 try_preinstalled
+fi
 }
 
 install_binary()
@@ -140,9 +179,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="gl2ps-${VERSION_GL2PS}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/graphviz.sh b/config_files/graphviz.sh
index e8d920a..75206ba 100755
--- a/config_files/graphviz.sh
+++ b/config_files/graphviz.sh
@@ -20,176 +20,199 @@ GRAPHVIZ_XVERSION=`echo ${VERSION_GRAPHVIZ} | awk -F. '{printf("%d",$1*10000+$2*
 
 check_version()
 {
-isdot=`which dot 2>/dev/null`
-if [ -n "${isdot}" ]; then
-  ver=`dot -V 2>&1 |  sed -e "s%[A-Za-z-]%%g" | awk '{print $1}'`
-  maj_ver=`echo ${ver} | awk -F. '{if(NF>0) print $1; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
-  min_ver=`echo ${ver} | awk -F. '{if(NF>1) print $2; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
-  rel_ver=`echo ${ver} | awk -F. '{if(NF>2) print $3; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
-  let ver=${maj_ver}*10000+${min_ver}*100+${rel_ver}
-  if [ ${ver} -eq ${GRAPHVIZ_XVERSION} ] ; then
-    return 0
-  fi
-fi
-return 1
+    isdot=`which dot 2>/dev/null`
+    if [ -n "${isdot}" ]; then
+	ver=`dot -V 2>&1 |  sed -e "s%[A-Za-z-]%%g" | awk '{print $1}'`
+	maj_ver=`echo ${ver} | awk -F. '{if(NF>0) print $1; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	min_ver=`echo ${ver} | awk -F. '{if(NF>1) print $2; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	rel_ver=`echo ${ver} | awk -F. '{if(NF>2) print $3; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	let ver=${maj_ver}*10000+${min_ver}*100+${rel_ver}
+	if [ ${ver} -eq ${GRAPHVIZ_XVERSION} ] ; then
+	    return 0
+	fi
+    fi
+    return 1
 }
 
 print_env_bin()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
 #${DELIM} ${PRODUCT_TYPE} ${DELIM}
 export GRAPHVIZ_ROOT_DIR=\${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PATH=\${GRAPHVIZ_ROOT_DIR}/bin:\${PATH}
 export LD_LIBRARY_PATH=\${GRAPHVIZ_ROOT_DIR}/lib:\${GRAPHVIZ_ROOT_DIR}/lib/graphviz:\${LD_LIBRARY_PATH}
 ##
 EOF
-(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+	(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
 
-print_env_src()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
+    print_env_src()
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
 #${DELIM} ${PRODUCT_TYPE}_src ${DELIM}
 # nothing to do
 ##
 EOF
-(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+	(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
 
-try_preinstalled(){
-try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-return $?
-}
+    try_preinstalled(){
+	try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	return $?
+    }
 
-install_source()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-source ${INSTALL_WORK}/${SHRC}
+    install_source()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	source ${INSTALL_WORK}/${SHRC}
 
 # unpack
-check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
 
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
-fi
+	if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+	    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
+	fi
 
 # to generate environment scripts
-try_preinstalled
-}
+	try_preinstalled
+    }
+
+    install_source_and_build()
+    {
+	status=1
+	isdot=`which dot 2>/dev/null`
+	if [ -n "${isdot}" ]; then
+	    ver=`dot -V 2>&1 |  sed -e "s%[A-Za-z-]%%g" | awk '{print $1}'`
+	    maj_ver=`echo ${ver} | awk -F. '{if(NF>0) print $1; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	    min_ver=`echo ${ver} | awk -F. '{if(NF>1) print $2; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	    rel_ver=`echo ${ver} | awk -F. '{if(NF>2) print $3; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	    let ver=${maj_ver}*10000+${min_ver}*100+${rel_ver}
+	    if [ ${ver} -ge ${GRAPHVIZ_XVERSION} ] ; then
+		status=0
+	    fi
+	fi
+	if [ "$status" = "0" ]; then
+	    echo "Use built-in graphviz"
+	else
 
-install_source_and_build()
-{
 # install sources
-install_source
+	    install_source
 
 # build sources
-cd ${PRODUCT_SRC_DIR}
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
-
-local patch_build_procedure=1
-if [ "${patch_build_procedure}" = "1" ] ; then
-    sed -i 's%PYTHON_LIBS="\(.*\)"%PYTHON_LIBS="-L\$PYTHON_PREFIX/lib \1"%g' configure
-    sed -i "s%echo 'puts \[info tclversion\]' | \$TCLSH%echo 'puts \[info tclversion\]' | \$TCLSH 2>/dev/null | grep -E '^[0-9.]+$'%g" configure
-fi
-
-CONFIGURE_FLAGS="--disable-rpath --disable-tcl --without-qt"
-if [ "${EXPAT_ROOT_DIR}" != "" ] ; then
-    CONFIGURE_FLAGS="${CONFIGURE_FLAGS} --with-expat --with-expatincludedir=${EXPAT_ROOT_DIR}/include --with-expatlibdir=${EXPAT_ROOT_DIR}/lib  --enable-perl=no "
-fi
-if test `uname -m` = "x86_64" ; then
-    CONFIGURE_FLAGS="${CONFIGURE_FLAGS} CFLAGS=-m64 CXXFLAGS=-m64"
-fi
-local without_cgraph=1
-if [ "${without_cgraph}" = "1" ] ; then
-    CONFIGURE_FLAGS="${CONFIGURE_FLAGS} --with-cgraph=no"
-fi
-
-check_job ${PRODUCT_DIR}/CONFIGURE.LOG configure --prefix=${PRODUCT_DIR} ${CONFIGURE_FLAGS}
-
-GCC=`which gcc`
-cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
+	    cd ${PRODUCT_SRC_DIR}
+	    test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+
+	    local patch_build_procedure=1
+	    if [ "${patch_build_procedure}" = "1" ] ; then
+		sed -i 's%PYTHON_LIBS="\(.*\)"%PYTHON_LIBS="-L\$PYTHON_PREFIX/lib \1"%g' configure
+		sed -i "s%echo 'puts \[info tclversion\]' | \$TCLSH%echo 'puts \[info tclversion\]' | \$TCLSH 2>/dev/null | grep -E '^[0-9.]+$'%g" configure
+	    fi
+
+	    CONFIGURE_FLAGS="--disable-rpath --disable-tcl --without-qt"
+	    if [ "${EXPAT_ROOT_DIR}" != "" ] ; then
+		CONFIGURE_FLAGS="${CONFIGURE_FLAGS} --with-expat --with-expatincludedir=${EXPAT_ROOT_DIR}/include --with-expatlibdir=${EXPAT_ROOT_DIR}/lib  --enable-perl=no "
+	    fi
+	    if test `uname -m` = "x86_64" ; then
+		CONFIGURE_FLAGS="${CONFIGURE_FLAGS} CFLAGS=-m64 CXXFLAGS=-m64"
+	    fi
+	    local without_cgraph=1
+	    if [ "${without_cgraph}" = "1" ] ; then
+		CONFIGURE_FLAGS="${CONFIGURE_FLAGS} --with-cgraph=no"
+	    fi
+
+	    check_job ${PRODUCT_DIR}/CONFIGURE.LOG ./configure --prefix=${PRODUCT_DIR} ${CONFIGURE_FLAGS}
+
+	    GCC=`which gcc`
+	    cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
 used gcc=${GCC}
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make
-check_job ${PRODUCT_DIR}/MAKEINSTALL.LOG make install
+	    check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
+	    check_job ${PRODUCT_DIR}/MAKEINSTALL.LOG make install
 
-cd ${PRODUCT_DIR}
+	    cd ${PRODUCT_DIR}
 
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build.size
-    du -sk ${PRODUCT_DIR}     > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
-fi
+	    if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+		du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build.size
+		du -sk ${PRODUCT_DIR}     > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
+	    fi
 
 # remove sources and temporary files after building
-if [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
-    test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
-fi
+	    if [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
+		test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
+	    fi
 
 # to generate environment scripts
-try_preinstalled
-}
+	    try_preinstalled
+	fi
+    }
 
-install_binary()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-source ${INSTALL_WORK}/${SHRC}
+    install_binary()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	source ${INSTALL_WORK}/${SHRC}
 
 # create a product directory
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
-check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
 
 # modify *.la files
-pydir=""
-tcldir=""
-freetypedir=""
-expatdir=""
-if [ -n "${PYTHON_ROOT_DIR}" ] ; then pydir=${PYTHON_ROOT_DIR} ; fi
-if [ -n "${TCLHOME}" ] ; then tcldir=${TCLHOME} ; fi
-if [ -n "${FREETYPE_ROOT_DIR}" ] ; then freetypedir=${FREETYPE_ROOT_DIR} ; fi
-if [ "${EXPAT_ROOT_DIR}" != "" ] ; then expatdir=${EXPAT_ROOT_DIR}/lib ; fi
-
-for l in X `find ${PRODUCT_DIR}/lib -name "*.la"`; do
-    if [ "${l}" != "X" ] ; then
-        sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*${PRODUCT}% \1${PRODUCT_DIR}%g" ${l}
-        sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*Python[^[:space:]]*/lib% \1${pydir}/lib%g" ${l}
-        sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*tcltk[^[:space:]]*/lib% \1${tcldir}/lib%g" ${l}
-	sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*freetype[^[:space:]]*/lib\(/libfreetype\.la\)% \1${freetypedir}/lib\2%g" ${l}
-        sed -i "s%-L[^[:space:]]*expat[^[:space:]]*/lib%-L${expatdir}%g;s%[^[:space:]]*expat[^[:space:]]*/lib/libexpat.la%-lexpat%g" ${l}
-
-        lpath=`dirname ${l}`
-        libdir=`grep -e "^libdir=.*" ${l} | sed -e "s/^libdir=[\'|\"]\(.*\)[\'|\"]/\1/g"`
-        sed -i "s%${libdir}%${lpath}%g" ${l}
-    fi
-done
+	pydir=""
+	tcldir=""
+	freetypedir=""
+	expatdir=""
+	if [ -n "${PYTHON_ROOT_DIR}" ] ; then pydir=${PYTHON_ROOT_DIR} ; fi
+	if [ -n "${TCLHOME}" ] ; then tcldir=${TCLHOME} ; fi
+	if [ -n "${FREETYPE_ROOT_DIR}" ] ; then freetypedir=${FREETYPE_ROOT_DIR} ; fi
+	if [ "${EXPAT_ROOT_DIR}" != "" ] ; then expatdir=${EXPAT_ROOT_DIR}/lib ; fi
+
+	for l in X `find ${PRODUCT_DIR}/lib -name "*.la"`; do
+	    if [ "${l}" != "X" ] ; then
+		sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*${PRODUCT}% \1${PRODUCT_DIR}%g" ${l}
+		sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*Python[^[:space:]]*/lib% \1${pydir}/lib%g" ${l}
+		sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*tcltk[^[:space:]]*/lib% \1${tcldir}/lib%g" ${l}
+		sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*freetype[^[:space:]]*/lib\(/libfreetype\.la\)% \1${freetypedir}/lib\2%g" ${l}
+		sed -i "s%-L[^[:space:]]*expat[^[:space:]]*/lib%-L${expatdir}%g;s%[^[:space:]]*expat[^[:space:]]*/lib/libexpat.la%-lexpat%g" ${l}
+
+		lpath=`dirname ${l}`
+		libdir=`grep -e "^libdir=.*" ${l} | sed -e "s/^libdir=[\'|\"]\(.*\)[\'|\"]/\1/g"`
+		sed -i "s%${libdir}%${lpath}%g" ${l}
+	    fi
+	done
 
 # modify pkgconfig
-for l in X `find ${PRODUCT_DIR}/lib/pkgconfig -name "*.pc"`; do
-    if [ "${l}" != "X" ] ; then
-	sed -i "s%^prefix=.*%prefix=${PRODUCT_DIR}%g" ${l}
-    fi
-done
+	for l in X `find ${PRODUCT_DIR}/lib/pkgconfig -name "*.pc"`; do
+	    if [ "${l}" != "X" ] ; then
+		sed -i "s%^prefix=.*%prefix=${PRODUCT_DIR}%g" ${l}
+	    fi
+	done
 
 # to generate environment scripts
-try_preinstalled
-}
-
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-shift
-REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
-export PRODUCT="graphviz-${VERSION_GRAPHVIZ}"
-export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
-export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
-export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
-source ./common.sh
-${PROCEDURE} 
+	try_preinstalled
+    }
+
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    shift
+    SINGLE_DIR=${11};
+
+    export PRODUCT="graphviz-${VERSION_GRAPHVIZ}"
+    export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
+    export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
+    export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
+    source ./common.sh
+    ${PROCEDURE} 
diff --git a/config_files/hdf5.sh b/config_files/hdf5.sh
index affae8d..d5e7c90 100755
--- a/config_files/hdf5.sh
+++ b/config_files/hdf5.sh
@@ -16,6 +16,7 @@
 # HDF5 version
 #
 VERSION_HDF5=1.8.10
+HDF5_XVERSION=`echo ${VERSION_HDF5} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
 #
 # Default API version for hdf5: 1.6
 #
@@ -23,158 +24,178 @@ V16_COMPATIBILITY=yes
 
 check_version()
 {
-if [ -z "${HDF5_ROOT_DIR}" ]; then
-    return 1 
-fi
-check_lib_version libhdf5.so.0.0.0 ${HDF5_ROOT_DIR}/lib
-if [ "$?" -ne "0" ]; then
-    return 1
-fi
-cfg_file=${HDF5_ROOT_DIR}/lib/libhdf5.settings
-if [ ! -e ${cfg_file} ] ; then
-    cfg_file=${HDF5_ROOT_DIR}/share/cmake/hdf5/libhdf5.settings
-fi
-if [ "$?" -eq "0" ]; then
-    ver=`grep "HDF5 Version:" ${cfg_file} | awk '{print $3}'` 
-    if [ "${ver}" = "${VERSION_HDF5}" ]; then 
-	return 0
+    if [ -z "${HDF5_ROOT_DIR}" ]; then
+	return 1 
+    fi
+    check_lib_version libhdf5.so.0.0.0 ${HDF5_ROOT_DIR}/lib
+    if [ "$?" -ne "0" ]; then
+	return 1
+    fi
+    cfg_file=${HDF5_ROOT_DIR}/lib/libhdf5.settings
+    if [ ! -e ${cfg_file} ] ; then
+	cfg_file=${HDF5_ROOT_DIR}/share/cmake/hdf5/libhdf5.settings
     fi
-fi
-return 1
+    if [ "$?" -eq "0" ]; then
+	ver=`grep "HDF5 Version:" ${cfg_file} | awk '{print $3}'` 
+	if [ "${ver}" = "${VERSION_HDF5}" ]; then 
+	    return 0
+	fi
+    fi
+    return 1
 }
 
 print_env_bin()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
 #${DELIM} ${PRODUCT_TYPE} ${DELIM}
 export HDF5_ROOT_DIR=\${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PATH=\${HDF5_ROOT_DIR}/bin:\${PATH}
 export LD_LIBRARY_PATH=\${HDF5_ROOT_DIR}/lib:\${LD_LIBRARY_PATH}
 ##
 EOF
-(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+	(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
 
-print_env_src()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
+    print_env_src()
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
 #${DELIM} ${PRODUCT_TYPE}_src ${DELIM}
 # nothing to do
 ##
 EOF
-(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+	(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
 
-try_preinstalled(){
-try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-return $?
-}
+    try_preinstalled(){
+	try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	return $?
+    }
 
-install_source()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-source ${INSTALL_WORK}/${SHRC}
+    install_source()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	source ${INSTALL_WORK}/${SHRC}
 
 # unpack
-check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
 
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
-fi
+	if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+	    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
+	fi
 
 # to generate environment scripts
-try_preinstalled
-}
-
-install_source_and_build()
-{
+	try_preinstalled
+    }
+
+    install_source_and_build()
+    {
+	status=1
+	if [ -f /usr/lib/`uname -m`-linux-gnu/libhdf5.settings ]; then
+	    cfg_file=/usr/lib/`uname -m`-linux-gnu/libhdf5.settings
+	    ver=`grep "HDF5 Version:" ${cfg_file} | awk '{print $3}'` 
+	    ver=`echo ${ver} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
+	    if [ ${ver} -ge ${HDF5_XVERSION} ] ; then
+		status=0
+	    fi
+	fi
+	if [ "$status" = 0 ]; then
+	    echo "Use built-in hdf5"
+   #print_env_sys
+	else 
 # install sources
-install_source
+	    install_source
 
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	    test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
 # create build directory
-export PRODUCT_BUILD_DIR=${PRODUCT_DIR}_build
-mkdir ${PRODUCT_BUILD_DIR}
-cd ${PRODUCT_BUILD_DIR}
+	    export PRODUCT_BUILD_DIR=${PRODUCT_DIR}_build
+	    mkdir ${PRODUCT_BUILD_DIR}
+	    cd ${PRODUCT_BUILD_DIR}
 
 # build options
-CMAKE_OPTIONS=""
-CMAKE_OPTIONS="${CMAKE_OPTIONS} -DCMAKE_INSTALL_PREFIX=${PRODUCT_DIR}"
-CMAKE_OPTIONS="${CMAKE_OPTIONS} -DCMAKE_BUILD_TYPE=Release -DHDF5_ENABLE_THREADSAFE=ON -DBUILD_SHARED_LIBS=ON"
-CMAKE_OPTIONS="${CMAKE_OPTIONS} -DHDF5_BUILD_TOOLS=ON -DHDF5_BUILD_HL_LIB=ON -DHDF5_ENABLE_Z_LIB_SUPPORT=ON"
-if test "${V16_COMPATIBILITY}" = "yes" ; then
-    CMAKE_OPTIONS="${CMAKE_OPTIONS} -DHDF5_USE_16_API_DEFAULT=ON"
-fi
-
-cat > ${PRODUCT_DIR}/CONFIGURE.LOG <<EOF
+	    CMAKE_OPTIONS=""
+	    CMAKE_OPTIONS="${CMAKE_OPTIONS} -DCMAKE_INSTALL_PREFIX=${PRODUCT_DIR}"
+	    CMAKE_OPTIONS="${CMAKE_OPTIONS} -DCMAKE_BUILD_TYPE=Release -DHDF5_ENABLE_THREADSAFE=ON -DBUILD_SHARED_LIBS=ON"
+	    CMAKE_OPTIONS="${CMAKE_OPTIONS} -DHDF5_BUILD_TOOLS=ON -DHDF5_BUILD_HL_LIB=ON -DHDF5_ENABLE_Z_LIB_SUPPORT=ON"
+	    if test "${V16_COMPATIBILITY}" = "yes" ; then
+		CMAKE_OPTIONS="${CMAKE_OPTIONS} -DHDF5_USE_16_API_DEFAULT=ON"
+	    fi
+
+	    cat > ${PRODUCT_DIR}/CONFIGURE.LOG <<EOF
 cmake  : `which cmake`
 
 used settings:
 ${CMAKE_OPTIONS}
 EOF
-check_job ${PRODUCT_DIR}/CONFIGURE.LOG cmake ${PRODUCT_SRC_DIR} ${CMAKE_OPTIONS}
-cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
-used gcc=`which gcc`
+	    check_job ${PRODUCT_DIR}/CONFIGURE.LOG cmake ${PRODUCT_SRC_DIR} ${CMAKE_OPTIONS}
+	    cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
+used gcc=${GCC}
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make 
-check_job ${PRODUCT_DIR}/INSTALL.LOG make install
+	    check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP} 
+	    check_job ${PRODUCT_DIR}/INSTALL.LOG make install
 
-cd ${PRODUCT_DIR}
+	    cd ${PRODUCT_DIR}
 
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    du -sk ${PRODUCT_SRC_DIR}   > ${INST_ROOT}/${PRODUCT_TYPE}.build_src.size
-    du -sk ${PRODUCT_BUILD_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build_bld.size
-    du -sk ${PRODUCT_DIR}       > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
-fi
+	    if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+		du -sk ${PRODUCT_SRC_DIR}   > ${INST_ROOT}/${PRODUCT_TYPE}.build_src.size
+		du -sk ${PRODUCT_BUILD_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build_bld.size
+		du -sk ${PRODUCT_DIR}       > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
+	    fi
 
 # remove sources and temporary files after building
-if [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
-    test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
-    test -d ${PRODUCT_BUILD_DIR} && rm -fr ${PRODUCT_BUILD_DIR}
-fi
+	    if [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
+		test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
+		test -d ${PRODUCT_BUILD_DIR} && rm -fr ${PRODUCT_BUILD_DIR}
+	    fi
 
 # to generate environment scripts
-try_preinstalled
-}
+	    try_preinstalled
+	fi
+    }
 
-install_binary()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-source ${INSTALL_WORK}/${SHRC}
+    install_binary()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	source ${INSTALL_WORK}/${SHRC}
 
 # create a product directory
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
-check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
 
 # modify settings file
-cfg_file=${PRODUCT_DIR}/lib/libhdf5.settings
-if [ ! -e ${cfg_file} ] ; then cfg_file=${PRODUCT_DIR}/share/cmake/hdf5/libhdf5.settings ; fi
-if [   -e ${cfg_file} ] ; then 
-    sed -i "s%Installation point: .*%Installation point: ${PRODUCT_DIR}%g" ${cfg_file}
-fi
+	cfg_file=${PRODUCT_DIR}/lib/libhdf5.settings
+	if [ ! -e ${cfg_file} ] ; then cfg_file=${PRODUCT_DIR}/share/cmake/hdf5/libhdf5.settings ; fi
+	if [   -e ${cfg_file} ] ; then 
+	    sed -i "s%Installation point: .*%Installation point: ${PRODUCT_DIR}%g" ${cfg_file}
+	fi
 
 # to generate environment script for sources
-try_preinstalled
-}
-
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-shift
-REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
-export PRODUCT="hdf5-${VERSION_HDF5}"
-export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
-export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
-export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
-source ./common.sh
-${PROCEDURE} 
+	try_preinstalled
+    }
+
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    shift
+    SINGLE_DIR=${11};
+
+    export PRODUCT="hdf5-${VERSION_HDF5}"
+    export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
+    export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
+    export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
+    source ./common.sh
+    ${PROCEDURE} 
diff --git a/config_files/homard.sh b/config_files/homard.sh
index 4205b7b..358ef6f 100755
--- a/config_files/homard.sh
+++ b/config_files/homard.sh
@@ -29,83 +29,108 @@ fi
 
 check_version(){
 # No way to check version!
-return 0
+    return 0
 }
 
 print_env_bin()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
 #${DELIM} ${PRODUCT_TYPE} ${DELIM}
 export HOMARDHOME=\${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PATH=\${HOMARDHOME}/${HOMARD_DIR}:\${PATH}
 ##
 EOF
-(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+	(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
 
-print_env_src()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
+    print_env_src()
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
 #${DELIM} ${PRODUCT_TYPE}_src ${DELIM}
 # nothing to do
 ##
 EOF
-(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
-
-try_preinstalled(){
-try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-return $?
-}
-
-install_source()
-{
-echo "It's impossible to install ${PRODUCT} from sources"
-}
-
-install_source_and_build()
-{
-install_binary
-
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    echo "0" > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
-    du -sk ${PRODUCT_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
-    cp ${INST_ROOT}/${PRODUCT_TYPE}.bin.size ${INST_ROOT}/${PRODUCT_TYPE}.build.size
-fi
-}
-
-install_binary()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-source ${INSTALL_WORK}/${SHRC}
+	(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
+
+    try_preinstalled(){
+	try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	return $?
+    }
+
+    install_source()
+    {
+	echo "It's impossible to install ${PRODUCT} from sources"
+    }
+
+    install_source_and_build()
+    {
+	install_binary
+
+	if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+	    echo "0" > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
+	    du -sk ${PRODUCT_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
+	    cp ${INST_ROOT}/${PRODUCT_TYPE}.bin.size ${INST_ROOT}/${PRODUCT_TYPE}.build.size
+	fi
+    }
+
+    install_binary()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	source ${INSTALL_WORK}/${SHRC}
 
 # create a product directory
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
-check_jb tar xfz ${BIN_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
+	check_jb tar xfz ${BIN_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
 
 # to generate environment scripts
-try_preinstalled
-}
-
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-SRC_DIR=$8;
-REMOVE_SRC_TMP=$9;
-shift
-BIN_DIR=$9;
-test $# = 10 && shift && SINGLE_DIR=$9
-export PRODUCT="homard-${VERSION_HOMARD}"
-export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
-export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
-export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
-source ./common.sh
-${PROCEDURE}
+	try_preinstalled
+    }
+
+#    echo
+#    echo "homard: number of args = " $#
+##loop over args
+#    i=1
+#    for var in "$@"
+#    do
+#	echo "var[$i]=$var"
+#	let i=i+1
+#    done
+
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    REMOVE_SRC_TMP=$9;
+    shift
+    BIN_DIR=$9;
+    [ $# -ge 10 ] && shift && export NP=$9
+    [ $# -ge 11 ] && shift && SINGLE_DIR=${11}shift
+
+#    echo 
+#    echo "PROCEDURE=" ${PROCEDURE}
+#    echo "INSTALL_WORK=" ${INSTALL_WORK}
+#    echo "SOURCE_DIR=" ${SOURCE_DIR}
+#    echo "INST_ROOT=" ${INST_ROOT}
+#    echo "PRODUCT_SEQUENCE=" ${PRODUCT_SEQUENCE}
+#    echo "PRODUCT_TYPE=" ${PRODUCT_TYPE}
+#    echo "INSTALL_PRODUCTS=" ${INSTALL_PRODUCTS}
+#    echo "NP=" ${NP}
+#    echo "HOMARD bin_dir=" ${BIN_DIR}
+#    echo "HOMARD single_dir=" ${SINGLE_DIR}
+    if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
+
+    export PRODUCT="homard-${VERSION_HOMARD}"
+    export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
+    export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
+    export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
+    source ./common.sh
+    ${PROCEDURE}
diff --git a/config_files/libBatch.sh b/config_files/libBatch.sh
index cbda4ae..2c0d65d 100755
--- a/config_files/libBatch.sh
+++ b/config_files/libBatch.sh
@@ -75,7 +75,7 @@ GCC=`which gcc`
 cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
 used gcc=${GCC}
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
 check_job ${PRODUCT_DIR}/INSTALL.LOG make install
 
 cd ${PRODUCT_DIR};
@@ -112,9 +112,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="libBatch-${LIBBATCH_VERSION}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/libgd.sh b/config_files/libgd.sh
new file mode 100755
index 0000000..6f01499
--- /dev/null
+++ b/config_files/libgd.sh
@@ -0,0 +1,194 @@
+#!/bin/bash -noprofile
+
+####################################################################################
+#  File      : libgd.sh
+#  Created   : Thu Dec 18 12:01:00 2002
+#  Author    : Vadim SANDLER, Open CASCADE SAS (vadim.sandler@opencascade.com)
+#  Project   : SALOME
+#  Module    : Installation Wizard
+#  Copyright : 2002-2013 CEA
+#
+#  This script is the part of the SALOME installation procedure.
+#
+####################################################################################
+
+#
+# libgd version
+#
+VERSION_LIBGD=2.1.0
+LIBGD_XVERSION=`echo ${VERSION_LIBGD} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
+
+check_version()
+{
+# check availability of libgd and its version
+    if [ "${LIBGD_ROOT_DIR}" != "" ] && [ -f ${LIBGD_ROOT_DIR}/include/gd.h ] ; then
+	ver_major=`grep "#define GD_MAJOR_VERSION" ${LIBGD_ROOT_DIR}/include/gd.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	ver_minor=`grep "#define GD_MINOR_VERSION" ${LIBGD_ROOT_DIR}/include/gd.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	ver_maint=`grep "#define GD_RELEASE_VERSION" ${LIBGD_ROOT_DIR}/include/gd.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	ver="${ver_major}.${ver_minor}.${ver_maint}"
+	if [ "${ver}" = "${VERSION_LIBGD}" ] ; then
+            return 0
+	fi
+    fi
+    return 1
+}
+
+print_env_bin()
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+#${DELIM} ${PRODUCT_TYPE} ${DELIM}
+export LIBGD_ROOT_DIR=\${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
+export PATH=\${LIBGD_ROOT_DIR}/bin:\${PATH}
+export LD_LIBRARY_PATH=\${LIBGD_ROOT_DIR}/lib:\${LIBGD_ROOT_DIR}/lib/gd:\${LD_LIBRARY_PATH}
+##
+EOF
+	(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
+
+    print_env_src()
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
+#${DELIM} ${PRODUCT_TYPE}_src ${DELIM}
+# nothing to do
+##
+EOF
+	(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
+
+    try_preinstalled(){
+	try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	return $?
+    }
+
+    install_source()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	source ${INSTALL_WORK}/${SHRC}
+
+# unpack
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
+
+	if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+	    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
+	fi
+
+# to generate environment scripts
+	try_preinstalled
+    }
+
+    install_source_and_build()
+    {
+	status=1
+# check availability of libgd and its version
+	if [ -f /usr/include/gd.h ] ; then
+	    ver_major=`grep "#define GD_MAJOR_VERSION" /usr/include/gd.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	    ver_minor=`grep "#define GD_MINOR_VERSION" /usr/include/gd.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	    ver_maint=`grep "#define GD_RELEASE_VERSION" /usr/include/gd.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	    let ver=${ver_major}*10000+${ver_minor}*100+${ver_maint}
+	    if [ "${ver}" -ge "${LIBGD_XVERSION}" ] ; then
+		status=0
+	    fi
+	fi
+
+	if [ "$status" = "0" ]; then
+	    echo "Use built-in libgd"
+	else
+
+# install sources
+	    install_source
+
+# build sources
+	    cd ${PRODUCT_SRC_DIR}
+	    test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+
+	    if test `uname -m` = "x86_64" ; then
+		CONFIGURE_FLAGS="${CONFIGURE_FLAGS} CFLAGS=-m64 CXXFLAGS=-m64"
+	    fi
+
+#
+# should maybe patch to use freetype from xml
+	    check_job ${PRODUCT_DIR}/CONFIGURE.LOG ./configure --prefix=${PRODUCT_DIR} ${CONFIGURE_FLAGS}
+
+	    GCC=`which gcc`
+	    cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
+used gcc=${GCC}
+EOF
+	    check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
+	    check_job ${PRODUCT_DIR}/MAKEINSTALL.LOG make install
+
+	    cd ${PRODUCT_DIR}
+
+	    if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+		du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build.size
+		du -sk ${PRODUCT_DIR}     > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
+	    fi
+
+# remove sources and temporary files after building
+	    if [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
+		test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
+	    fi
+
+# to generate environment scripts
+	    try_preinstalled
+	fi
+    }
+
+    install_binary()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	source ${INSTALL_WORK}/${SHRC}
+
+# create a product directory
+	test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
+
+# modify *.la files
+
+	for l in X `find ${PRODUCT_DIR}/lib -name "*.la"`; do
+	    if [ "${l}" != "X" ] ; then
+		sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*${PRODUCT}% \1${PRODUCT_DIR}%g" ${l}
+		sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*freetype[^[:space:]]*/lib\(/libfreetype\.la\)% \1${freetypedir}/lib\2%g" ${l}
+		
+		lpath=`dirname ${l}`
+		libdir=`grep -e "^libdir=.*" ${l} | sed -e "s/^libdir=[\'|\"]\(.*\)[\'|\"]/\1/g"`
+		sed -i "s%${libdir}%${lpath}%g" ${l}
+	    fi
+	done
+
+# modify pkgconfig
+	for l in X `find ${PRODUCT_DIR}/lib/pkgconfig -name "*.pc"`; do
+	    if [ "${l}" != "X" ] ; then
+		sed -i "s%^prefix=.*%prefix=${PRODUCT_DIR}%g" ${l}
+	    fi
+	done
+
+# to generate environment scripts
+	try_preinstalled
+    }
+
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    shift
+    SINGLE_DIR=${11};
+
+    export PRODUCT="libgd-${VERSION_LIBGD}"
+    export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
+    export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
+    export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
+    source ./common.sh
+    ${PROCEDURE} 
diff --git a/config_files/libxml2.sh b/config_files/libxml2.sh
index e0a54ad..190a713 100755
--- a/config_files/libxml2.sh
+++ b/config_files/libxml2.sh
@@ -16,6 +16,7 @@
 # libxml version
 #
 VERSION_LIBXML=2.9.0
+LIBXML_XVERSION=`echo ${VERSION_LIBXML} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
 
 check_version(){
 # No way to check version!
@@ -78,6 +79,16 @@ try_preinstalled
 
 install_source_and_build()
 {
+status=1
+if [ -f /usr/include/libxml2/libxml/xmlversion.h ]; then
+   ver=`grep "#define LIBXML_VERSION_STRING" /usr/include/libxml2/libxml/xmlversion.h | awk '{print $3}' | sed -e 's/\"//g'` 
+	if [ ${ver} -ge ${LIBXML_XVERSION} ] ; then
+	    status=0
+	fi 
+fi
+if [ "$status" = 0 ]; then
+   echo "Use built-in libxml2"
+else
 # install sources
 install_source
 
@@ -91,7 +102,7 @@ GCC=`which gcc`
 cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
 used gcc=${GCC}
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
 check_job ${PRODUCT_DIR}/INSTALL.LOG make install 
 
 cd ${PRODUCT_DIR}
@@ -108,6 +119,7 @@ fi
 
 # to generate environment scripts
 try_preinstalled
+fi
 }
 
 install_binary()
@@ -144,9 +156,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="libxml2-${VERSION_LIBXML}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/med.sh b/config_files/med.sh
index c05fd9b..c4925b4 100755
--- a/config_files/med.sh
+++ b/config_files/med.sh
@@ -85,7 +85,7 @@ test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
 # create build directory
 export PRODUCT_BUILD_DIR=${PRODUCT_DIR}_build
-mkdir ${PRODUCT_BUILD_DIR}
+mkdir -p ${PRODUCT_BUILD_DIR}
 cd ${PRODUCT_BUILD_DIR}
     
 CMAKE_OPTIONS=""
@@ -95,10 +95,12 @@ CMAKE_OPTIONS="${CMAKE_OPTIONS} -DCMAKE_BUILD_TYPE=Release"
 CMAKE_OPTIONS="${CMAKE_OPTIONS} -DMEDFILE_BUILD_SHARED_LIBS=ON"
 CMAKE_OPTIONS="${CMAKE_OPTIONS} -DMEDFILE_BUILD_TESTS=OFF -DMEDFILE_INSTALL_DOC=ON"
 # Python options
-if [ "${PYTHON_ROOT_DIR}" != "" ] ; then
+if [ "${python_version}" != "" ] ; then
     CMAKE_OPTIONS="${CMAKE_OPTIONS} -DMEDFILE_BUILD_PYTHON=ON"
-    CMAKE_OPTIONS="${CMAKE_OPTIONS} -DPYTHON_INCLUDE_DIR=${PYTHON_ROOT_DIR}/include/python${PYTHON_VERSION}"
-    CMAKE_OPTIONS="${CMAKE_OPTIONS} -DPYTHON_LIBRARY=${PYTHON_ROOT_DIR}/lib/python${PYTHON_VERSION}/config/libpython${PYTHON_VERSION}.so"
+    if [ "${PYTHON_ROOT_DIR}" != "" ] ; then
+	CMAKE_OPTIONS="${CMAKE_OPTIONS} -DPYTHON_INCLUDE_DIR=${PYTHON_ROOT_DIR}/include/python${PYTHON_VERSION}"
+	CMAKE_OPTIONS="${CMAKE_OPTIONS} -DPYTHON_LIBRARY=${PYTHON_ROOT_DIR}/lib/python${PYTHON_VERSION}/config/libpython${PYTHON_VERSION}.so"
+    fi
 fi
 # -DMEDFILE_BUILD_STATIC_LIBS=ON
 
@@ -108,11 +110,11 @@ cmake  : `which cmake`
 used settings:
 ${CMAKE_OPTIONS}
 EOF
-check_job ${PRODUCT_DIR}/CONFIGURE.LOG cmake ${PRODUCT_SRC_DIR} ${CMAKE_OPTIONS}
+check_job ${PRODUCT_DIR}/CONFIGURE.LOG cmake ${PRODUCT_SRC_DIR} ${CMAKE_OPTIONS} ${CONF_OPTS}
 cat > ${PRODUCT_DIR}/MAKE.LOG <<EOF
-used gcc=`which gcc`
+used gcc=${GCC}
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
 check_job ${PRODUCT_DIR}/INSTALL.LOG make install
 
 cd ${PRODUCT_DIR}
@@ -171,6 +173,16 @@ fi
 try_preinstalled
 }
 
+#echo
+#echo "med: number of args = " $#
+##loop over args
+#    i=1
+#    for var in "$@"
+#    do
+#	echo "var[$i]=$var"
+#	let i=i+1
+#    done
+
 export PROCEDURE=$1;
 export INSTALL_WORK=$2;
 export SOURCE_DIR=$3;
@@ -178,13 +190,32 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="med-${VERSION_MED}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
 export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
+
+#echo 
+#echo "PROCEDURE=" ${PROCEDURE}
+#echo "INSTALL_WORK=" ${INSTALL_WORK}
+#echo "SOURCE_DIR=" ${SOURCE_DIR}
+#echo "INST_ROOT=" ${INST_ROOT}
+#echo "PRODUCT_SEQUENCE=" ${PRODUCT_SEQUENCE}
+#echo "PRODUCT_TYPE=" ${PRODUCT_TYPE}
+#echo "PRODUCT_DIR=" ${PRODUCT_DIR}
+#echo "INSTALL_PRODUCTS=" ${INSTALL_PRODUCTS}
+#echo "SINGLE_DIR=" ${SINGLE_DIR}
+#echo "med NP=" ${NP}
+#echo "med Conf_opts=" ${CONF_OPTS}
+
 source ./common.sh
 ${PROCEDURE} 
diff --git a/config_files/metis.sh b/config_files/metis.sh
index aa583ce..2ff600f 100755
--- a/config_files/metis.sh
+++ b/config_files/metis.sh
@@ -18,138 +18,173 @@
 VERSION_METIS=4.0
 # 5.0.2
 METIS_MAJOR_VERSION=`echo ${VERSION_METIS} | awk -F. '{print $1}'`
+METIS_XVERSION=`echo ${VERSION_METIS} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
 
 check_version(){
 # No way to check version!
-return 0
+    if [ "${METIS_ROOT_DIR}" != "" ] && [ -f ${METIS_ROOT_DIR}/Lib/metis.h ] ; then
+	ver_major=`grep "#define METIS_VER_MAJOR" ${METIS_ROOT_DIR}/Lib/metis.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	ver_minor=`grep "#define METIS_VER_MINOR" ${METIS_ROOT_DIR}/Lib/metis.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	ver_maint=`grep "#define METIS_VER_SUBMINOR" ${METIS_ROOT_DIR}/Lib/metis.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	if [ -n "${ver_maint}" ]; then
+            ver="${ver_major}.${ver_minor}.${ver_maint}"
+        else
+            ver="${ver_major}.${ver_minor}"
+        fi
+	if [ "${ver}" = "${VERSION_METIS}" ] ; then
+            return 0
+	fi
+    fi
+    return 1
 }
 
 print_env_bin()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
 #${DELIM} ${PRODUCT_TYPE} ${DELIM} 
 export METIS_ROOT_DIR=\${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 ##
 EOF
-(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+	(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
 
-print_env_src()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
+    print_env_src()
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
 #${DELIM} ${PRODUCT_TYPE}_src ${DELIM}
 # nothing to do
 ##
 EOF
-(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+	(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
 
-try_preinstalled(){
-try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-return $?
-}
+    try_preinstalled(){
+	try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	return $?
+    }
 
-install_source()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-source ${INSTALL_WORK}/${SHRC}
+    install_source()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	source ${INSTALL_WORK}/${SHRC}
 
-check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
 
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
-fi
+	if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+	    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
+	fi
 
 # to generate environment scripts
-try_preinstalled
-}
+	try_preinstalled
+    }
+
+    install_source_and_build()
+    {
+	status=1
+	if [ -f /usr/include/metis.h ] ; then
+	    ver_major=`grep "#define METIS_VER_MAJOR" /usr/include/metis.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	    ver_minor=`grep "#define METIS_VER_MINOR" /usr/include/metis.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	    ver_maint=`grep "#define METIS_VER_SUBMINOR" /usr/include/metis.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	    let ver=${ver_major}*10000+${ver_minor}*100+${ver_maint}
+	    if [ "${ver}" -ge "${METIS_XVERSION}" ] ; then
+		status=0
+	    fi
+	fi
+	if [ "$status" = "0" ]; then
+	    echo "Use built-in metis"
+	else
 
-install_source_and_build()
-{
 # install sources
-install_source
+	    install_source
 
 # build sources
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	    test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
-cd ${PRODUCT_SRC_DIR}
+	    cd ${PRODUCT_SRC_DIR}
 
-if [ "${METIS_MAJOR_VERSION}" = "5" ] ; then
+	    if [ "${METIS_MAJOR_VERSION}" = "5" ] ; then
     # for version 5
 
     # make config
-    check_job ${PRODUCT_DIR}/MAKE_CONFIG.LOG make config shared=1 prefix=${PRODUCT_DIR}
+		check_job ${PRODUCT_DIR}/MAKE_CONFIG.LOG make config shared=1 prefix=${PRODUCT_DIR}
 
     # make
-    check_job ${PRODUCT_DIR}/MAKE.LOG make
+		check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
 
     # make install
-    check_job ${PRODUCT_DIR}/MAKE_INSTALL.LOG make install
-else
+		check_job ${PRODUCT_DIR}/MAKE_INSTALL.LOG make install
+	    else
     # for version 4
 
     # patch for 64bit platforms
-    local patch_64bits=1
-    if [ "${patch_64bits}" = "1" ] ; then
-	if test `uname -m` = "x86_64" ; then
-            sed -i "s%COPTIONS[[:space:]]*=[[:space:]]*\(.*\)%COPTIONS = -fPIC \1%g" Makefile.in
-	fi
-    fi
+		local patch_64bits=1
+		if [ "${patch_64bits}" = "1" ] ; then
+		    if test `uname -m` = "x86_64" ; then
+			sed -i "s%COPTIONS[[:space:]]*=[[:space:]]*\(.*\)%COPTIONS = -fPIC \1%g" Makefile.in
+		    fi
+		fi
 
     # make
-    check_job ${PRODUCT_DIR}/MAKE.LOG make
+		check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
 
     # install
-    cp -rf Doc Graphs libmetis.a pmetis kmetis oemetis onmetis partdmesh partnmesh mesh2dual mesh2nodal graphchk ${PRODUCT_DIR}
-    ( mkdir -p ${PRODUCT_DIR}/Lib && cp Lib/*.h ${PRODUCT_DIR}/Lib )
-fi
+		cp -rf Doc Graphs libmetis.a pmetis kmetis oemetis onmetis partdmesh partnmesh mesh2dual mesh2nodal graphchk ${PRODUCT_DIR}
+		( mkdir -p ${PRODUCT_DIR}/Lib && cp Lib/*.h ${PRODUCT_DIR}/Lib )
+	    fi
 
-cd ${PRODUCT_DIR}
+	    cd ${PRODUCT_DIR}
 
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build.size
-    du -sk ${PRODUCT_DIR}     > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
-fi
+	    if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+		du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build.size
+		du -sk ${PRODUCT_DIR}     > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
+	    fi
 
 # remove sources and temporary files after building
-if [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
-    test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
-fi
+	    if [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
+		test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
+	    fi
 
 # to generate environment scripts
-try_preinstalled
-}
+	    try_preinstalled
+	fi
+    }
 
-install_binary()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-source ${INSTALL_WORK}/${SHRC}
+    install_binary()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	source ${INSTALL_WORK}/${SHRC}
 
 # create a product directory
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
-check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
 
 # to generate environment scripts
-try_preinstalled
-}
-
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-shift
-REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
-export PRODUCT="metis-${VERSION_METIS}"
-export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
-export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
-export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
-source ./common.sh
-${PROCEDURE}
+	try_preinstalled
+    }
+
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    shift
+    SINGLE_DIR=${11};
+
+    export PRODUCT="metis-${VERSION_METIS}"
+    export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
+    export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
+    export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
+    source ./common.sh
+    ${PROCEDURE}
diff --git a/config_files/netgen.sh b/config_files/netgen.sh
index 92eab60..388c231 100755
--- a/config_files/netgen.sh
+++ b/config_files/netgen.sh
@@ -21,15 +21,15 @@ check_version()
 {
 # check existance of netgen
 # unfortunarely we can't find anything about netgen version
-if [ -n "${NETGEN_ROOT_DIR}" ]; then
-  return 0
-fi
-return 1
+    if [ -n "${NETGEN_ROOT_DIR}" ]; then
+	return 0
+    fi
+    return 1
 }
 
 print_env_bin()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
 #${DELIM} ${PRODUCT_TYPE} ${DELIM}
 export NETGEN_ROOT_DIR=\${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export LD_LIBRARY_PATH=\${NETGEN_ROOT_DIR}/lib:\${LD_LIBRARY_PATH}
@@ -37,162 +37,172 @@ export LD_LIBRARY_PATH=\${NETGEN_ROOT_DIR}/lib:\${LD_LIBRARY_PATH}
 EOF
 (test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
 make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+    }
 
-print_env_src()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
+    print_env_src()
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
 #${DELIM} ${PRODUCT_TYPE}_src ${DELIM}
 # nothing to do
 ##
 EOF
 (test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
 make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
-
-try_preinstalled(){
-try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-return $?
-}
-
-install_source()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-source ${INSTALL_WORK}/${SHRC}
+    }
+
+    try_preinstalled(){
+	try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	return $?
+    }
+
+    install_source()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	source ${INSTALL_WORK}/${SHRC}
 # unpack
-check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
 
-local patch_sources=1
-local patch_build=1
-local patch_gcc43=1
+	local patch_sources=1
+	local patch_build=1
+	local patch_gcc43=1
 # apply general patch for SALOME
-if [ "${patch_sources}" = "1" ] ; then
-    if [ -f patches/netgen-${VERSION_NETGEN}-for-SALOME.patch ] ; then
-	cp patches/netgen-${VERSION_NETGEN}-for-SALOME.patch ${PRODUCT_SRC_DIR}
-	cd ${PRODUCT_SRC_DIR}
-	patch -p1 < netgen-${VERSION_NETGEN}-for-SALOME.patch
-    fi
-fi
+	if [ "${patch_sources}" = "1" ] ; then
+	    if [ -f patches/netgen-${VERSION_NETGEN}-for-SALOME.patch ] ; then
+		cp patches/netgen-${VERSION_NETGEN}-for-SALOME.patch ${PRODUCT_SRC_DIR}
+		cd ${PRODUCT_SRC_DIR}
+		patch -p1 < netgen-${VERSION_NETGEN}-for-SALOME.patch
+	    fi
+	fi
 # patch for gcc 4.3 compatibility
-if [ "${patch_gcc43}" = "1" ] ; then
-    sed -i "s%#include <string>%#include <string>\n#include <string.h>%g" ${PRODUCT_SRC_DIR}/libsrc/include/mystdlib.h
-fi
+	if [ "${patch_gcc43}" = "1" ] ; then
+	    sed -i "s%#include <string>%#include <string>\n#include <string.h>%g" ${PRODUCT_SRC_DIR}/libsrc/include/mystdlib.h
+	fi
 # patch to make nglib only:
-if [ "${patch_build}" = "1" ] ; then
-    sed -i "s/^\(SUBDIRS = .* \)ng /\1nglib #/g" ${PRODUCT_SRC_DIR}/Makefile.in
-fi
+	if [ "${patch_build}" = "1" ] ; then
+	    sed -i "s/^\(SUBDIRS = .* \)ng /\1nglib #/g" ${PRODUCT_SRC_DIR}/Makefile.in
+	fi
 
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
-fi
+	if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+	    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
+	fi
 
 # to generate environment scripts
-try_preinstalled
-}
+	try_preinstalled
+    }
 
-install_source_and_build()
-{
+    install_source_and_build()
+    {
 # install sources
-install_source
+	install_source
 
 # build sources
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
-cd ${PRODUCT_SRC_DIR}
+	cd ${PRODUCT_SRC_DIR}
 
 # configure
-NETGEN_CONFIGURE_OPTIONS="--with-occ=${CAS_ROOT_DIR} --with-tcl=${TCLHOME}/lib --with-tk=${TCLHOME}/lib --with-tclinclude=${TCLHOME}/include"
-if test `uname -m` = "x86_64" ; then
-    ./configure --prefix=${PRODUCT_DIR} ${NETGEN_CONFIGURE_OPTIONS} CXXFLAGS='-O2 -m64' >> ${PRODUCT_DIR}/CONFIGURE.LOG 
-else
-    ./configure --prefix=${PRODUCT_DIR} ${NETGEN_CONFIGURE_OPTIONS} CXXFLAGS=-O0 >> ${PRODUCT_DIR}/CONFIGURE.LOG 
-fi
+	NETGEN_CONFIGURE_OPTIONS="--with-occ=${CAS_ROOT_DIR} --with-tcl=${TCL_CFG_DIR} --with-tk=${TK_CFG_DIR} --with-tclinclude=${TCL_INCLUDE_DIR}"
+	if test `uname -m` = "x86_64" ; then
+	    ./configure --prefix=${PRODUCT_DIR} ${NETGEN_CONFIGURE_OPTIONS} CXXFLAGS='-O2 -m64' >> ${PRODUCT_DIR}/CONFIGURE.LOG 
+	else
+	    ./configure --prefix=${PRODUCT_DIR} ${NETGEN_CONFIGURE_OPTIONS} CXXFLAGS=-O0 >> ${PRODUCT_DIR}/CONFIGURE.LOG 
+	fi
 
 # compile
-check_job ${PRODUCT_DIR}/MAKE.LOG make
+	check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
 
 # install
-check_job ${PRODUCT_DIR}/INSTALL.LOG make install 
+	check_job ${PRODUCT_DIR}/INSTALL.LOG make install 
 
 # copy additional headers
-for directory in general gprim linalg meshing ; do
-    cp -f ${PRODUCT_SRC_DIR}/libsrc/${directory}/*.hpp ${PRODUCT_DIR}/include
-done
-cp -f ${PRODUCT_SRC_DIR}/libsrc/include/mystdlib.h ${PRODUCT_SRC_DIR}/libsrc/include/mydefs.hpp ${PRODUCT_DIR}/include
-cp -f ${PRODUCT_SRC_DIR}/libsrc/occ/occgeom.hpp ${PRODUCT_SRC_DIR}/libsrc/occ/occmeshsurf.hpp ${PRODUCT_DIR}/include
+	for directory in general gprim linalg meshing ; do
+	    cp -f ${PRODUCT_SRC_DIR}/libsrc/${directory}/*.hpp ${PRODUCT_DIR}/include
+	done
+	cp -f ${PRODUCT_SRC_DIR}/libsrc/include/mystdlib.h ${PRODUCT_SRC_DIR}/libsrc/include/mydefs.hpp ${PRODUCT_DIR}/include
+	cp -f ${PRODUCT_SRC_DIR}/libsrc/occ/occgeom.hpp ${PRODUCT_SRC_DIR}/libsrc/occ/occmeshsurf.hpp ${PRODUCT_DIR}/include
 
 # fix libGL dependencies
-( cd ${PRODUCT_DIR}/lib && fix_gl_libs )
+	( cd ${PRODUCT_DIR}/lib && fix_gl_libs )
 
-cd ${PRODUCT_DIR}
+	cd ${PRODUCT_DIR}
 
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build.size
-    du -sk ${PRODUCT_DIR}     > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
-fi
+	if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+	    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build.size
+	    du -sk ${PRODUCT_DIR}     > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
+	fi
 
 # remove sources and temporary files after building
-if [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
-    test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
-fi
+	if [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
+	    test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
+	fi
 
 # to generate environment scripts
-try_preinstalled
-}
+	try_preinstalled
+    }
 
-install_binary()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-source ${INSTALL_WORK}/${SHRC}
+    install_binary()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	source ${INSTALL_WORK}/${SHRC}
 
 # create a product directory
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
-check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
 
 ### modifing la files
-if [ -f ${PRODUCT_DIR}/lib/libnglib.la ] ; then
-    if [ "${FREETYPE_ROOT_DIR}" != "" ] ; then
-	sed -i "s%-L[^[:space:]]\+/freetype-[0-9.]\+/lib%-L${FREETYPE_ROOT_DIR}/lib%g;s%[^[:space:]]\+/libfreetype.la%-lfreetype%g" ${PRODUCT_DIR}/lib/libnglib.la
-    fi
-    if [ "${GL2PS_ROOT_DIR}" != "" ] ; then
-	sed -i "s%-L[^[:space:]]\+/gl2ps-[0-9.]\+/lib%-L${GL2PS_ROOT_DIR}/lib%g" ${PRODUCT_DIR}/lib/libnglib.la
-    fi
-    if [ "${FREEIMAGE_ROOT_DIR}" != "" ] ; then
-	sed -i "s%-L[^[:space:]]\+/freeimage-[0-9.]\+/lib%-L${FREEIMAGE_ROOT_DIR}/lib%g" ${PRODUCT_DIR}/lib/libnglib.la
-    fi
-    if [ "${TBB_ROOT_DIR}" != "" ] ; then
-	if test `uname -m` = "x86_64" ; then
-	    tbbdir=${TBB_ROOT_DIR}/lib/intel64/cc4.1.0_libc2.4_kernel2.6.16.21
-	else
-	    tbbdir=${TBB_ROOT_DIR}/lib/ia32/cc4.1.0_libc2.4_kernel2.6.16.21
+	if [ -f ${PRODUCT_DIR}/lib/libnglib.la ] ; then
+	    if [ "${FREETYPE_ROOT_DIR}" != "" ] ; then
+		sed -i "s%-L[^[:space:]]\+/freetype-[0-9.]\+/lib%-L${FREETYPE_ROOT_DIR}/lib%g;s%[^[:space:]]\+/libfreetype.la%-lfreetype%g" ${PRODUCT_DIR}/lib/libnglib.la
+	    fi
+	    if [ "${GL2PS_ROOT_DIR}" != "" ] ; then
+		sed -i "s%-L[^[:space:]]\+/gl2ps-[0-9.]\+/lib%-L${GL2PS_ROOT_DIR}/lib%g" ${PRODUCT_DIR}/lib/libnglib.la
+	    fi
+	    if [ "${FREEIMAGE_ROOT_DIR}" != "" ] ; then
+		sed -i "s%-L[^[:space:]]\+/freeimage-[0-9.]\+/lib%-L${FREEIMAGE_ROOT_DIR}/lib%g" ${PRODUCT_DIR}/lib/libnglib.la
+	    fi
+	    if [ "${TBB_ROOT_DIR}" != "" ] ; then
+		if [ "${TBB_ROOT_DIR}" = "/usr" ] ; then
+		    flags="${flags} --with-tbb-library=${TBB_ROOT_DIR}/lib"
+		else
+		    if test `uname -m` = "x86_64" ; then
+			tbbdir=${TBB_ROOT_DIR}/lib/intel64/cc4.1.0_libc2.4_kernel2.6.16.21
+		    else
+			tbbdir=${TBB_ROOT_DIR}/lib/ia32/cc4.1.0_libc2.4_kernel2.6.16.21
+		    fi
+		fi
+		sed -i "s%-L[^[:space:]]\+/tbb[^[:space:]]*/lib[^[:space:]]*%-L${tbbdir}%g" ${PRODUCT_DIR}/lib/libnglib.la
+	    fi
+	    if [ "${CAS_ROOT_DIR}" != "" ] ; then
+		sed -i "s%-L[^[:space:]]\+/\(OCCT\|CAS\)[^[:space:]]*/lib\?%-L${CAS_ROOT_DIR}/lib%g;s%[^[:space:]]\+/\(OCCT\|CAS\)[^[:space:]]*/lib/lib\?%${CAS_ROOT_DIR}/lib/lib%g" ${PRODUCT_DIR}/lib/libnglib.la
+	    fi
+	    sed -i "s%^libdir='\(.*\)'%libdir='${PRODUCT_DIR}/lib'%g" ${PRODUCT_DIR}/lib/libnglib.la
 	fi
-	sed -i "s%-L[^[:space:]]\+/tbb[^[:space:]]*/lib[^[:space:]]*%-L${tbbdir}%g" ${PRODUCT_DIR}/lib/libnglib.la
-    fi
-    if [ "${CAS_ROOT_DIR}" != "" ] ; then
-	sed -i "s%-L[^[:space:]]\+/\(OCCT\|CAS\)[^[:space:]]*/lib\?%-L${CAS_ROOT_DIR}/lib%g;s%[^[:space:]]\+/\(OCCT\|CAS\)[^[:space:]]*/lib/lib\?%${CAS_ROOT_DIR}/lib/lib%g" ${PRODUCT_DIR}/lib/libnglib.la
-    fi
-    sed -i "s%^libdir='\(.*\)'%libdir='${PRODUCT_DIR}/lib'%g" ${PRODUCT_DIR}/lib/libnglib.la
-fi
 
 # to generate environment script for sources
-try_preinstalled
-}
-
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-shift
-REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
-export PRODUCT="netgen-${VERSION_NETGEN}"
-export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
-export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
-export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
-source ./common.sh
-${PROCEDURE} 
+	try_preinstalled
+    }
+
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    shift
+    SINGLE_DIR=${11};
+
+    export PRODUCT="netgen-${VERSION_NETGEN}"
+    export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
+    export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
+    export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
+    source ./common.sh
+    ${PROCEDURE} 
diff --git a/config_files/numpy.sh b/config_files/numpy.sh
index 363d0f5..9f7f0e0 100755
--- a/config_files/numpy.sh
+++ b/config_files/numpy.sh
@@ -17,6 +17,7 @@
 #
 VERSION_NUMPY=1.7.1
 VERSION_LAPACK=3.4.2
+NUMPY_XVERSION=`echo ${VERSION_NUMPY} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
 
 check_version(){
 # It is not necessary to check version!
@@ -74,6 +75,18 @@ try_preinstalled
 
 install_source_and_build()
 {
+status=1
+ver=`python -c 'import numpy; print numpy.__version__'`
+if test -n "${ver}"; then
+   ver=`echo ${ver} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
+   if [ ${ver} -ge ${NUMPY_XVERSION} ]; then
+      status=0
+   fi
+fi
+
+if [ "$status" = 0 ]; then
+   echo "use built-in numpy"
+else
 # install sources
 install_source
 
@@ -93,7 +106,7 @@ used gcc=${GCC}
 EOF
 cd ${PRODUCT_SRC_DIR}/lapack-${VERSION_LAPACK}_SRC
 check_job ${PRODUCT_DIR}/CONFIGURE.LOG cmake . ${CMAKE_OPTIONS}
-check_job ${PRODUCT_DIR}/MAKE.LOG make
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
 check_job ${PRODUCT_DIR}/INSTALL.LOG make install
 
 # install numpy
@@ -114,6 +127,7 @@ fi
 
 # to generate environment scripts
 try_preinstalled
+fi
 }
 
 install_binary()
@@ -146,9 +160,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="numpy-${VERSION_NUMPY}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/omniORB.sh b/config_files/omniORB.sh
index b799997..cbf4571 100755
--- a/config_files/omniORB.sh
+++ b/config_files/omniORB.sh
@@ -18,6 +18,7 @@
 VERSION_OMNIORB=4.1.6
 VERSION_OMNIORBPY=3.6
 VERSION_OMNINOTIFY=2.1
+OMNIORBPY_XVERSION=`echo ${VERSION_OMNIORBPY} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
 
 # major, and minor+release omniORB version info
 OMNIORB_MAJOR=`echo ${VERSION_OMNIORB} | awk -F. '{print $1}'`
@@ -52,6 +53,18 @@ fi
 return 0
 }
 
+print_env_sys()
+{
+cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+#${DELIM} ${PRODUCT_TYPE} ${DELIM}
+export OMNIORB_ROOT_DIR="/usr"
+#export OMNIORBPY_ROOT_DIR=\${OMNIORB_ROOT_DIR}
+##
+EOF
+(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+}
+
 print_env_bin()
 {
 cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
@@ -125,6 +138,19 @@ try_preinstalled
 
 install_source_and_build()
 {
+status=1
+ver=`python -c 'import omniORB; print omniORB.__version__'`
+if test -n "${ver}"; then
+   ver=`echo ${ver} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
+   if [ ${ver} -ge ${OMNIORBPY_XVERSION} ]; then
+      status=0
+   fi
+fi
+
+if [ "$status" = 0 ]; then
+   echo "use built-in OmniOrb"
+   print_env_sys
+else
 # install sources
 install_source
 
@@ -155,7 +181,7 @@ GCC=`which gcc`
 cat >> ${PRODUCT_DIR}/MAKE_OMNIORBPY.LOG <<EOF
 used gcc=${GCC}
 EOF
-check_job ${PRODUCT_DIR}/MAKE_OMNIORBPY.LOG make
+check_job ${PRODUCT_DIR}/MAKE_OMNIORBPY.LOG make -j${NP}
 check_job ${PRODUCT_DIR}/INSTALL_OMNIORBPY.LOG make install
 
 # patch omniORBpy binaries : path to Python
@@ -178,7 +204,7 @@ GCC=`which gcc`
 cat >> ${PRODUCT_DIR}/MAKE_OMNINOTIFY.LOG <<EOF
 used gcc=${GCC}
 EOF
-check_job ${PRODUCT_DIR}/MAKE_OMNINOTIFY.LOG make
+check_job ${PRODUCT_DIR}/MAKE_OMNINOTIFY.LOG make -j${NP}
 check_job ${PRODUCT_DIR}/INSTALL_OMNINOTIFY.LOG make install
 
 cd ${PRODUCT_DIR}
@@ -195,6 +221,7 @@ fi
 
 # to generate environment scripts
 try_preinstalled
+fi
 }
 
 install_binary()
@@ -235,9 +262,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="omniORB-${VERSION_OMNIORB}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/qscintilla.sh b/config_files/qscintilla.sh
index 6092705..5c4470c 100755
--- a/config_files/qscintilla.sh
+++ b/config_files/qscintilla.sh
@@ -16,6 +16,7 @@
 # QSCINTILLA  version
 #
 VERSION_QSCINTILLA=2.7
+QSCINTILLA_XVERSION=`echo ${VERSION_QSCINTILLA} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
 
 check_version(){
 if [ -z "${QSCINTILLA_ROOT_DIR}" ]; then
@@ -85,6 +86,20 @@ try_preinstalled
 
 install_source_and_build()
 {
+status=1
+ver=`grep "QSCINTILLA_VERSION_STR" /usr/include/qt4/Qsci/qsciglobal.h | sed -e 's%^#define QSCINTILLA_VERSION_STR\([[:space:]]*\)%%g' -e 's%\"%%g'`
+    if [ -n "${ver}" ] ; then
+	maj_ver=`echo ${ver} | awk -F. '{if(NF>0) print $1; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	min_ver=`echo ${ver} | awk -F. '{if(NF>1) print $2; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	rel_ver=`echo ${ver} | awk -F. '{if(NF>2) print $3; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	let ver=${maj_ver}*10000+${min_ver}*100+${rel_ver}
+	if [ ${ver} -ge ${QSCINTILLA_XVERSION} ] ; then
+	    status=0
+	fi
+    fi
+if [ "$status" = 0 ]; then
+   echo "Use built-in QScintilla"
+else
 # install sources
 install_source
 
@@ -99,7 +114,7 @@ unset INSTALL_ROOT
 cd ${PRODUCT_SRC_DIR}/Qt4Qt5
 
 qmake -o Makefile qscintilla.pro
-check_job ${PRODUCT_DIR}/MAKE.LOG make 
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP} 
 check_job ${PRODUCT_DIR}/MAKEINSTALL.LOG make install
 
 if [ "${PYQT4_ROOT_DIR}" != "" ] ; then
@@ -126,6 +141,7 @@ fi
 
 # to generate environment scripts
 try_preinstalled
+fi
 }
 
 install_binary()
@@ -156,9 +172,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="QScintilla-${VERSION_QSCINTILLA}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/qt.sh b/config_files/qt.sh
index 6d85817..f56eb56 100755
--- a/config_files/qt.sh
+++ b/config_files/qt.sh
@@ -13,21 +13,34 @@
 ####################################################################################
 
 VERSION_QT="4.8.4"
+QT_XVERSION=`echo ${VERSION_QT} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
 
 check_version(){
-if [ -z "${QT4_ROOT_DIR}" ]; then
-   return 1
-fi
-ver=`grep "QT_VERSION_STR" ${QT4_ROOT_DIR}/include/Qt/qglobal.h | sed -e 's%^#define QT_VERSION_STR\([[:space:]]*\)%%g' -e 's%\"%%g'`
-if [ "${ver}" = "${VERSION_QT}" ] ; then
-    return 0
-fi
-return 1
+    if [ -z "${QT4_ROOT_DIR}" ]; then
+	return 1
+    fi
+    ver=`grep "QT_VERSION_STR" ${QT4_ROOT_DIR}/include/Qt/qglobal.h | sed -e 's%^#define QT_VERSION_STR\([[:space:]]*\)%%g' -e 's%\"%%g'`
+    if [ "${ver}" = "${VERSION_QT}" ] ; then
+	return 0
+    fi
+    return 1
 }
 
-print_env_bin()
+print_env_sys()
 {
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+    cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+#${DELIM} ${PRODUCT_TYPE} ${DELIM}
+export QT4_ROOT_DIR="/usr"
+export QT_PLUGIN_PATH="/usr/lib/`uname -m`/qt4/plugins"
+##
+EOF
+    (test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+    make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+}
+
+print_env_bin()
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
 #${DELIM} ${PRODUCT_TYPE} ${DELIM}
 export QT4_ROOT_DIR=\${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export QT_PLUGIN_PATH=\${QT4_ROOT_DIR}/plugins
@@ -35,168 +48,186 @@ export PATH=\${QT4_ROOT_DIR}/bin:\${PATH}
 export LD_LIBRARY_PATH=\${QT4_ROOT_DIR}/lib:\${LD_LIBRARY_PATH}
 ##
 EOF
-(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+	(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
 
-print_env_src()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF 
+    print_env_src()
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF 
 #${DELIM} ${PRODUCT_TYPE}_src ${DELIM}
 # nothing to do
 ##
 EOF
-(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+	(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
 
-try_preinstalled(){
-try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-return $?
-}
+    try_preinstalled(){
+	try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	return $?
+    }
 
-install_source()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-source ${INSTALL_WORK}/${SHRC}
+    install_source()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	source ${INSTALL_WORK}/${SHRC}
 
-check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
 
 # patch sources
-local patch_for_gstreamer=1
-if [ "${patch_for_gstreamer}" = "1" ] ; then
+	local patch_for_gstreamer=1
+	if [ "${patch_for_gstreamer}" = "1" ] ; then
     # check that we need a patch for problem with gstreamer (note that it does not always help!)
-    pkg-config --libs gstreamer-app-0.10 >& /dev/null
-    if [ "$?" != "0" ] ; then
-	sed -i "s%glib-2.0 gio-2.0 gstreamer-0.10%glib-2.0 gio-2.0 '\\\\'gstreamer-0.10 >= 0.10.28\\\\''%g" ${PRODUCT_SRC_DIR}/src/3rdparty/webkit/Source/WebCore/features.pri >& /dev/null
-    fi
-fi
+	    pkg-config --libs gstreamer-app-0.10 >& /dev/null
+	    if [ "$?" != "0" ] ; then
+		sed -i "s%glib-2.0 gio-2.0 gstreamer-0.10%glib-2.0 gio-2.0 '\\\\'gstreamer-0.10 >= 0.10.28\\\\''%g" ${PRODUCT_SRC_DIR}/src/3rdparty/webkit/Source/WebCore/features.pri >& /dev/null
+	    fi
+	fi
 
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
-fi
+	if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+	    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
+	fi
 
 # to generate environment scripts
-try_preinstalled
-}
-
-install_source_and_build()
-{
+	try_preinstalled
+    }
+
+    install_source_and_build()
+    {
+	status=1
+	ver=`grep "QT_VERSION_STR" /usr/include/qt4/Qt/qglobal.h | sed -e 's%^#define QT_VERSION_STR\([[:space:]]*\)%%g' -e 's%\"%%g'`
+	ver=`echo ${ver} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
+	if [ ${ver} -ge ${QT_XVERSION} ] ; then
+	    status=0
+	fi
+
+	if [ "$status" = "0" ] ; then
+	    echo "use built-in Qt4"
+	    #print_env_sys
+	else
 # install sources
-install_source
+	    install_source
 
 # build sources
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	    test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
-cd ${PRODUCT_SRC_DIR}
+	    cd ${PRODUCT_SRC_DIR}
 
 # configure
-check_job ${PRODUCT_DIR}/CONFIGURE.LOG ./configure -prefix ${PRODUCT_DIR} -no-separate-debug-info -release -opensource -confirm-license
+	    check_job ${PRODUCT_DIR}/CONFIGURE.LOG ./configure -prefix ${PRODUCT_DIR} -no-separate-debug-info -release -opensource -confirm-license
 
-GCC=`which gcc`
-cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
+	    GCC=`which gcc`
+	    cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
 used gcc=${GCC}
 EOF
 
-check_job ${PRODUCT_DIR}/MAKE.LOG make 
-check_job ${PRODUCT_DIR}/MAKEINSTALL.LOG make install
+	    check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP} 
+	    check_job ${PRODUCT_DIR}/MAKEINSTALL.LOG make install
 
 #if test `uname -m` = "x86_64" ; then
 #    ( cd ${PRODUCT_DIR} && ln -sf lib lib64 )
 #fi
 
 # patch binaries
-local patch_webkit_deps=1
-if [ "${patch_webkit_deps}" = "1" ] ; then
-    sed -i "s% -L../../WebCore/release%%g;s% -L../../JavaScriptCore/release%%g;s% -lwebcore%%g;s% -ljscore%%g" ${PRODUCT_DIR}/lib/libQtWebKit.la >& /dev/null
-fi
+	    local patch_webkit_deps=1
+	    if [ "${patch_webkit_deps}" = "1" ] ; then
+		sed -i "s% -L../../WebCore/release%%g;s% -L../../JavaScriptCore/release%%g;s% -lwebcore%%g;s% -ljscore%%g" ${PRODUCT_DIR}/lib/libQtWebKit.la >& /dev/null
+	    fi
 
-cd ${PRODUCT_DIR}
+	    cd ${PRODUCT_DIR}
 
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build.size
-    du -sk ${PRODUCT_DIR}     > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
-fi
+	    if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+		du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build.size
+		du -sk ${PRODUCT_DIR}     > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
+	    fi
 
 # remove sources and temporary files after building
-if [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
-    test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
-fi
+	    if [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
+		test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
+	    fi
 
 # to generate environment scripts
-try_preinstalled
-}
+	    try_preinstalled
+	fi
+    }
 
-install_binary()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-source ${INSTALL_WORK}/${SHRC}
+    install_binary()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	source ${INSTALL_WORK}/${SHRC}
 
 # create a product directory
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
-check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
 
 # change installation path
 
 # - modify qt la files
-for l in X `find ${PRODUCT_DIR}/lib -name "*.la"` ; do
-    if [ "${l}" != "X" ] ; then
-	sed -i "s%^libdir='\(.*\)'%libdir='${PRODUCT_DIR}/lib'%g" ${l}
-	sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*${PRODUCT}% \1${PRODUCT_DIR}%g" ${l}
-	sed -i "s%^dependency_libs='\(-L\)\?[^[:space:]]*${PRODUCT}%dependency_libs=\'\1${PRODUCT_DIR}%g" ${l}
-    fi
-done
+	for l in X `find ${PRODUCT_DIR}/lib -name "*.la"` ; do
+	    if [ "${l}" != "X" ] ; then
+		sed -i "s%^libdir='\(.*\)'%libdir='${PRODUCT_DIR}/lib'%g" ${l}
+		sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*${PRODUCT}% \1${PRODUCT_DIR}%g" ${l}
+		sed -i "s%^dependency_libs='\(-L\)\?[^[:space:]]*${PRODUCT}%dependency_libs=\'\1${PRODUCT_DIR}%g" ${l}
+	    fi
+	done
 
 # - modify libGL.so flags
-has_gl_dep=`grep -E "^dependency_libs=.*-lGL.*" ${PRODUCT_DIR}/lib/libQtOpenGL.la`
-gllibdir="`where_gl_libs`"
-if [ "${has_gl_dep}" != "" ] && [ "${gllibdir}" != "" ] ; then
-    sed -i "s%-lGL\b%%g;s%^dependency_libs='\(.*\)%dependency_libs='-L${gllibdir} -lGL \1%g" ${PRODUCT_DIR}/lib/libQtOpenGL.la
-fi
+	has_gl_dep=`grep -E "^dependency_libs=.*-lGL.*" ${PRODUCT_DIR}/lib/libQtOpenGL.la`
+	gllibdir="`where_gl_libs`"
+	if [ "${has_gl_dep}" != "" ] && [ "${gllibdir}" != "" ] ; then
+	    sed -i "s%-lGL\b%%g;s%^dependency_libs='\(.*\)%dependency_libs='-L${gllibdir} -lGL \1%g" ${PRODUCT_DIR}/lib/libQtOpenGL.la
+	fi
 
 # - modify qt package config
-for l in X `find ${PRODUCT_DIR}/lib/pkgconfig -name "*.pc"` ; do
-    if [ "${l}" != "X" ] ; then
-        sed -i "s%^prefix=\(.*\)%prefix=${PRODUCT_DIR}%g;s%[[:space:]]\(-L\)\?[^[:space:]]*qt-${VERSION_QT}% \1${PRODUCT_DIR}%g;s%[[:space:]]\(-L\)\?[^[:space:]]*qt-x11-opensource-src-${VERSION_QT}% \1${PRODUCT_DIR}%g" ${l}
-        sed -i "s%moc_location=.*%moc_location=${PRODUCT_DIR}/bin/moc%g;s%uic_location=.*%uic_location=${PRODUCT_DIR}/bin/uic%g;s%rcc_location=.*%uic_location=${PRODUCT_DIR}/bin/rcc%g" ${l}
-        sed -i "s%lupdate_location=.*%uic_location=${PRODUCT_DIR}/bin/lupdate%g;s%lrelease_location=.*%uic_location=${PRODUCT_DIR}/bin/lrelease%g" ${l}
-    fi
-done
+	for l in X `find ${PRODUCT_DIR}/lib/pkgconfig -name "*.pc"` ; do
+	    if [ "${l}" != "X" ] ; then
+		sed -i "s%^prefix=\(.*\)%prefix=${PRODUCT_DIR}%g;s%[[:space:]]\(-L\)\?[^[:space:]]*qt-${VERSION_QT}% \1${PRODUCT_DIR}%g;s%[[:space:]]\(-L\)\?[^[:space:]]*qt-x11-opensource-src-${VERSION_QT}% \1${PRODUCT_DIR}%g" ${l}
+		sed -i "s%moc_location=.*%moc_location=${PRODUCT_DIR}/bin/moc%g;s%uic_location=.*%uic_location=${PRODUCT_DIR}/bin/uic%g;s%rcc_location=.*%uic_location=${PRODUCT_DIR}/bin/rcc%g" ${l}
+		sed -i "s%lupdate_location=.*%uic_location=${PRODUCT_DIR}/bin/lupdate%g;s%lrelease_location=.*%uic_location=${PRODUCT_DIR}/bin/lrelease%g" ${l}
+	    fi
+	done
 
 # - modify qt prl files
-for l in X `find ${PRODUCT_DIR} -name "*.prl"` ; do
-    if [ "${l}" != "X" ] ; then
-        sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*qt-${VERSION_QT}% \1${PRODUCT_DIR}%g;s%[[:space:]]\(-L\)\?[^[:space:]]*qt-x11-opensource-src-${VERSION_QT}% \1${PRODUCT_DIR}%g" ${l}
-    fi
-done
+	for l in X `find ${PRODUCT_DIR} -name "*.prl"` ; do
+	    if [ "${l}" != "X" ] ; then
+		sed -i "s%[[:space:]]\(-L\)\?[^[:space:]]*qt-${VERSION_QT}% \1${PRODUCT_DIR}%g;s%[[:space:]]\(-L\)\?[^[:space:]]*qt-x11-opensource-src-${VERSION_QT}% \1${PRODUCT_DIR}%g" ${l}
+	    fi
+	done
 
 # - modify qt mkspecs
-sed -i "s%QMAKE_RPATHDIR += \".*\"%QMAKE_RPATHDIR += \"${PRODUCT_DIR}/lib\"%g" ${PRODUCT_DIR}/mkspecs/qconfig.pri
+	sed -i "s%QMAKE_RPATHDIR += \".*\"%QMAKE_RPATHDIR += \"${PRODUCT_DIR}/lib\"%g" ${PRODUCT_DIR}/mkspecs/qconfig.pri
 
 # generate qt.conf file
-cat > ${PRODUCT_DIR}/bin/qt.conf <<EOF
-[Paths]
-Prefix=${PRODUCT_DIR}
+	cat > ${PRODUCT_DIR}/bin/qt.conf <<EOF
+	[Paths]
+	Prefix=${PRODUCT_DIR}
 EOF
 # to generate environment scripts
-try_preinstalled
-}
-
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-shift
-REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
-export PRODUCT="qt-${VERSION_QT}"
-export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
-export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
-export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
-source ./common.sh
-${PROCEDURE} 
+	try_preinstalled
+    }
+
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    shift
+    SINGLE_DIR=${11};
+
+    export PRODUCT="qt-${VERSION_QT}"
+    export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
+    export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
+    export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
+    source ./common.sh
+    ${PROCEDURE} 
diff --git a/config_files/qwt.sh b/config_files/qwt.sh
index 686dfe8..0339ffc 100755
--- a/config_files/qwt.sh
+++ b/config_files/qwt.sh
@@ -17,164 +17,186 @@
 #
 VERSION_QWT=5.2.1
 QWT_MAJOR_VERSION=`echo ${VERSION_QWT} | awk -F. '{print $1}'`
+QWT_MAJOR_XVERSION=`echo ${VERSION_QWT} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}' |  sed -e 's/^\([0-9]*\).*$/\1/'`
 
 check_version()
 {
-if [ -n "${QWT_ROOT_DIR}" ] ; then 
-    qwtinc=${QWT_ROOT_DIR}/include/qwt_global.h
-    if [ ! -f ${qwtinc} ] ; then
-	qwtinc=${QWT_ROOT_DIR}/include/qwt/qwt_global.h
-    fi
-    if [ -f ${qwtinc} ] ; then
-	ver=`grep -e "^#define[[:space:]]\+QWT_VERSION_STR" ${qwtinc} | sed -e 's/^#define[[:space:]]\+QWT_VERSION_STR[[:space:]]*"\(.*\)"/\1/'`
-	if [ "${ver}" = "${VERSION_QWT}" ]; then
-	    return 0
+    if [ -n "${QWT_ROOT_DIR}" ] ; then 
+	qwtinc=${QWT_ROOT_DIR}/include/qwt_global.h
+	if [ ! -f ${qwtinc} ] ; then
+	    qwtinc=${QWT_ROOT_DIR}/include/qwt/qwt_global.h
+	fi
+	if [ -f ${qwtinc} ] ; then
+	    ver=`grep -e "^#define[[:space:]]\+QWT_VERSION_STR" ${qwtinc} | sed -e 's/^#define[[:space:]]\+QWT_VERSION_STR[[:space:]]*"\(.*\)"/\1/'`
+	    if [ "${ver}" = "${VERSION_QWT}" ]; then
+		return 0
+	    fi
 	fi
     fi
-fi
-return 1
+    return 1
 }
 
 print_env_bin()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
 #${DELIM} ${PRODUCT_TYPE} ${DELIM}
 export QWT_ROOT_DIR=\${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export LD_LIBRARY_PATH=\${QWT_ROOT_DIR}/lib:\${LD_LIBRARY_PATH} 
 ##
 EOF
-(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+	(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
 
-print_env_src()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
+    print_env_src()
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
 #${DELIM} ${PRODUCT_TYPE}_src ${DELIM}
 # nothing to do
 ##
 EOF
-(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+	(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
 
-try_preinstalled(){
-try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-return $?
-}
+    try_preinstalled(){
+	try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	return $?
+    }
 
-install_source()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-source ${INSTALL_WORK}/${SHRC}
+    install_source()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	source ${INSTALL_WORK}/${SHRC}
 
-check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
 
-local patch_build_procedure=1
-if [ "${patch_build_procedure}" = "1" ] ; then
+	local patch_build_procedure=1
+	if [ "${patch_build_procedure}" = "1" ] ; then
     # specify install path
-    if [ "${QWT_MAJOR_VERSION}" = "5" ] ; then
+	    if [ "${QWT_MAJOR_VERSION}" = "5" ] ; then
         # for Qwt 5.x the variable is INSTALLBASE
-	sed -i "s%\(INSTALLBASE[[:space:]]*\)=\([[:space:]]*\).*%\1=\2${PRODUCT_DIR}%g" ${PRODUCT_SRC_DIR}/qwtconfig.pri
-    else
+		sed -i "s%\(INSTALLBASE[[:space:]]*\)=\([[:space:]]*\).*%\1=\2${PRODUCT_DIR}%g" ${PRODUCT_SRC_DIR}/qwtconfig.pri
+	    else
         # for Qwt 6.x the variable is QWT_INSTALL_PREFIX
-	sed -i "s%\(QWT_INSTALL_PREFIX[[:space:]]*\)=\([[:space:]]*\).*%\1=\2${PRODUCT_DIR}%g" ${PRODUCT_SRC_DIR}/qwtconfig.pri
-    fi
-    
-    if [ "${QWT_MAJOR_VERSION}" = "5" ] ; then
+		sed -i "s%\(QWT_INSTALL_PREFIX[[:space:]]*\)=\([[:space:]]*\).*%\1=\2${PRODUCT_DIR}%g" ${PRODUCT_SRC_DIR}/qwtconfig.pri
+	    fi
+	    
+	    if [ "${QWT_MAJOR_VERSION}" = "5" ] ; then
         # include QwtSvg support (required only for qwt 5.x)
-	sed -i "s%#\(CONFIG[[:space:]]*+=[[:space:]]*QwtSVGItem\)%\1%g" ${PRODUCT_SRC_DIR}/qwtconfig.pri
+		sed -i "s%#\(CONFIG[[:space:]]*+=[[:space:]]*QwtSVGItem\)%\1%g" ${PRODUCT_SRC_DIR}/qwtconfig.pri
         # specify correct installation path for the designer plugin (required only for qwt 5.x)
-	sed -i "s%\(target\.path[[:space:]]*\)=\([[:space:]]*\).*%\1=\2\$\$INSTALLBASE/plugins/designer%g" ${PRODUCT_SRC_DIR}/designer/designer.pro
-    fi
-fi
+		sed -i "s%\(target\.path[[:space:]]*\)=\([[:space:]]*\).*%\1=\2\$\$INSTALLBASE/plugins/designer%g" ${PRODUCT_SRC_DIR}/designer/designer.pro
+	    fi
+	fi
 
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
-fi
+	if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+	    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
+	fi
 
 # to generate environment scripts
-try_preinstalled
-}
-
-install_source_and_build()
-{
+	try_preinstalled
+    }
+
+    install_source_and_build()
+    {
+	status=1
+	if [ -f /usr/include/qwt-qt4/qwt_global.h ]; then
+	    qwtinc=/usr/include/qwt-qt4/qwt_global.h
+	    ver=`grep -e "^#define[[:space:]]\+QWT_VERSION_STR" ${qwtinc} | sed -e 's/^#define[[:space:]]\+QWT_VERSION_STR[[:space:]]*"\(.*\)"/\1/'`
+	    ver=`echo ${ver} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	    if [ "${ver}" -ge "${QWT_MAJOR_XVERSION}" ]; then
+		status=0
+	    fi
+	fi
+	if [ "$status" = "0" ]; then
+	    echo "Use built-in qwt"
+	    #print_env_sys
+	else 
+#
 # install sources
-install_source
+	    install_source
 
 # build sources
-cd ${PRODUCT_SRC_DIR}
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	    cd ${PRODUCT_SRC_DIR}
+	    test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
 # workaround : clear INSTALL_ROOT env.var if it is set
-unset INSTALL_ROOT
+	    unset INSTALL_ROOT
 
 # configure with qmake
 
-qmake
+	    qmake
 
 # make
 
-GCC=`which gcc`
-cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
+	    GCC=`which gcc`
+	    cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
 used gcc=${GCC}
 EOF
 
-check_job ${PRODUCT_DIR}/MAKE.LOG make
+	    check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
 
 # make install
 
-check_job ${PRODUCT_DIR}/MAKE_INSTALL.LOG make install
+	    check_job ${PRODUCT_DIR}/MAKE_INSTALL.LOG make install
 
-cd ${PRODUCT_DIR}
+	    cd ${PRODUCT_DIR}
 
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build.size
-    du -sk ${PRODUCT_DIR}     > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
-fi
+	    if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+		du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build.size
+		du -sk ${PRODUCT_DIR}     > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
+	    fi
 
 # remove sources and temporary files after building
-if [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
-    test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
-fi
+	    if [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
+		test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
+	    fi
 
 # to generate environment scripts
-try_preinstalled
-}
+	    try_preinstalled
+	fi
+    }
 
-install_binary()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-source ${INSTALL_WORK}/${SHRC}
+    install_binary()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	source ${INSTALL_WORK}/${SHRC}
 
 # create a product directory
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
-check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
 
 # patch features files (required for Qwt 6.x only)
-if [ "${QWT_MAJOR_VERSION}" = "6" ] ; then
-    test -f ${PRODUCT_DIR}/features/qwtconfig.pri && cd ${PRODUCT_DIR}/features && sed -i "s%\(QWT_INSTALL_PREFIX[[:space:]]*\)=\([[:space:]]*\).*%\1=\2${PRODUCT_DIR}%g" qwtconfig.pri
-fi
+	if [ "${QWT_MAJOR_VERSION}" = "6" ] ; then
+	    test -f ${PRODUCT_DIR}/features/qwtconfig.pri && cd ${PRODUCT_DIR}/features && sed -i "s%\(QWT_INSTALL_PREFIX[[:space:]]*\)=\([[:space:]]*\).*%\1=\2${PRODUCT_DIR}%g" qwtconfig.pri
+	fi
 
 # to generate environment script for sources
-try_preinstalled
-}
-
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-shift
-REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
-export PRODUCT="qwt-${VERSION_QWT}"
-export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
-export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
-export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
-source ./common.sh
-${PROCEDURE} 
+	try_preinstalled
+    }
+
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    shift
+    SINGLE_DIR=${11};
+
+    export PRODUCT="qwt-${VERSION_QWT}"
+    export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
+    export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
+    export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
+    source ./common.sh
+    ${PROCEDURE} 
diff --git a/config_files/scotch.sh b/config_files/scotch.sh
index 313a58e..585dda5 100755
--- a/config_files/scotch.sh
+++ b/config_files/scotch.sh
@@ -16,130 +16,165 @@
 # scotch version
 #
 VERSION_SCOTCH=5.1.11
+SCOTCH_XVERSION=`echo ${VERSION_SCOTCH} | awk -F. '{printf("%d",$1*10000+$2*100+$3)}'`
 
 check_version(){
 # No way to check version!
-return 0
+    if [ "${SCOTCH_ROOT_DIR}" != "" ] && [ -f ${SCOTCH_ROOT_DIR}/include/scotch.h ] ; then
+	ver_major=`grep "#define SCOTCH_VERSION" ${SCOTCH_ROOT_DIR}/include/scotch.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	ver_minor=`grep "#define SCOTCH_RELEASE" ${SCOTCH_ROOT_DIR}/include/scotch.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	ver_maint=`grep "#define SCOTCH_PATCHLEVEL" ${SCOTCH_ROOT_DIR}/include/scotch.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+        
+        let ver=${ver_major}*10000+${ver_minor}*100+${ver_maint}
+
+	if [ "${ver}" -ge "${SCOTCH_XVERSION}" ] ; then
+            return 0
+	fi
+    fi
+    return 1
 }
 
 print_env_bin()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
 #${DELIM} ${PRODUCT_TYPE} ${DELIM} 
 export SCOTCH_ROOT_DIR=\${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 ##
 EOF
-(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+	(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
 
-print_env_src()
-{
-cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
+    print_env_src()
+    {
+	cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh <<EOF
 #${DELIM} ${PRODUCT_TYPE}_src ${DELIM}
 # nothing to do
 ##
 EOF
-(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
-}
+	(test -w ${PRODUCT_SRC_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}_src.sh ${PRODUCT_SRC_DIR})
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+    }
 
-try_preinstalled(){
-try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-return $?
-}
+    try_preinstalled(){
+	try_existing ${PRODUCT_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	try_existing ${PRODUCT_SRC_DIR} ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	return $?
+    }
 
-install_source()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
-source ${INSTALL_WORK}/${SHRC}
+    install_source()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}_src
+	source ${INSTALL_WORK}/${SHRC}
 
-check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${INST_ROOT}
 
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
-fi
+	if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+	    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.src.size
+	fi
 
 # to generate environment scripts
-try_preinstalled
-}
+	try_preinstalled
+    }
+
+    install_source_and_build()
+    {
+	status=1
+	if [ -f /usr/include/scotch/scotch.h ] ; then
+	    ver_major=`grep "#define SCOTCH_VERSION" /usr/include/scotch/scotch.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	    ver_minor=`grep "#define SCOTCH_RELEASE" /usr/include/scotch/scotch.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	    ver_maint=`grep "#define SCOTCH_PATCHLEVEL" /usr/include/scotch/scotch.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	    
+            let ver=${ver_major}*10000+${ver_minor}*100+${ver_maint}
+	    if [ "${ver}" -ge "${SCOTCH_XVERSION}" ] ; then
+		status=0
+	    fi
+	fi
+	
+	if [ "$status" = "0" ]; then
+	    echo "Use built-in scotch"
+	else
 
-install_source_and_build()
-{
 # install sources
-install_source
+	    install_source
 
 # build sources
-cd ${PRODUCT_SRC_DIR}
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	    cd ${PRODUCT_SRC_DIR}
+	    test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
-cd src
+	    cd src
 
-if test `uname -m` = "x86_64" ; then
+	    if test `uname -m` = "x86_64" ; then
     # create Makefile for Linux 64bit platforms
-    sed -e "s%CFLAGS\([[:space:]]*\)=\([[:space:]]*\)\(.*\)%CFLAGS\1=\2-fPIC \3%g" \
-        Make.inc/Makefile.inc.i686_pc_linux2.prof > Make.inc/Makefile.inc.x86-64_pc_linux2.prof
-    ln -sf Make.inc/Makefile.inc.x86-64_pc_linux2.prof Makefile.inc
-else
-    ln -sf Make.inc/Makefile.inc.i686_pc_linux2.prof Makefile.inc
-fi
-
-local patch_pthread=1
-if [ "${patch_pthread}" = "1" ] ; then
-    cd ${PRODUCT_SRC_DIR}/src
-    sed -i "s%^\(LDFLAGS.*\)%\1 -lpthread%g" $(readlink Makefile.inc)
-fi
+		sed -e "s%CFLAGS\([[:space:]]*\)=\([[:space:]]*\)\(.*\)%CFLAGS\1=\2-fPIC \3%g" \
+		    Make.inc/Makefile.inc.i686_pc_linux2.prof > Make.inc/Makefile.inc.x86-64_pc_linux2.prof
+		ln -sf Make.inc/Makefile.inc.x86-64_pc_linux2.prof Makefile.inc
+	    else
+		ln -sf Make.inc/Makefile.inc.i686_pc_linux2.prof Makefile.inc
+	    fi
+
+	    local patch_pthread=1
+	    if [ "${patch_pthread}" = "1" ] ; then
+		cd ${PRODUCT_SRC_DIR}/src
+		sed -i "s%^\(LDFLAGS.*\)%\1 -lpthread%g" $(readlink Makefile.inc)
+	    fi
 
 # make
-check_job ${PRODUCT_DIR}/MAKE.LOG make prefix=${PRODUCT_DIR}
+	    check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP} prefix=${PRODUCT_DIR}
 
 # make install
-check_job ${PRODUCT_DIR}/INSTALL.LOG make prefix=${PRODUCT_DIR} install
+	    check_job ${PRODUCT_DIR}/INSTALL.LOG make prefix=${PRODUCT_DIR} install
 
-cd ${PRODUCT_DIR}
+	    cd ${PRODUCT_DIR}
 
-if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
-    du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build.size
-    du -sk ${PRODUCT_DIR}     > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
-fi
+	    if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
+		du -sk ${PRODUCT_SRC_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.build.size
+		du -sk ${PRODUCT_DIR}     > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
+	    fi
 
 # remove sources and temporary files after building
-if [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
-    test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
-fi
+	    if [ ${REMOVE_SRC_TMP} = "TRUE" ] ; then
+		test -d ${PRODUCT_SRC_DIR} && rm -fr ${PRODUCT_SRC_DIR}
+	    fi
 
 # to generate environment scripts
-try_preinstalled
-}
+	    try_preinstalled
+	fi
+    }
 
-install_binary()
-{
-make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
-source ${INSTALL_WORK}/${SHRC}
+    install_binary()
+    {
+	make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}" ${PRODUCT_TYPE}
+	source ${INSTALL_WORK}/${SHRC}
 
 # create a product directory
-test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
+	test -z ${SINGLE_DIR} && makedir ${PRODUCT_DIR} || mkdir -p ${PRODUCT_DIR}
 
-check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
+	check_jb tar xfz ${SOURCE_DIR}/${PRODUCT}.tar.gz -C ${PRODUCT_DIR}
 
 # to generate environment scripts
-try_preinstalled
-}
-
-export PROCEDURE=$1;
-export INSTALL_WORK=$2;
-export SOURCE_DIR=$3;
-export INST_ROOT=$4;
-export PRODUCT_SEQUENCE=$5;
-export PRODUCT_TYPE=$6;
-export INSTALL_PRODUCTS=$7;
-shift
-REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
-export PRODUCT="scotch-${VERSION_SCOTCH}"
-export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
-export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
-export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
-source ./common.sh
-${PROCEDURE}
+	try_preinstalled
+    }
+
+    export PROCEDURE=$1;
+    export INSTALL_WORK=$2;
+    export SOURCE_DIR=$3;
+    export INST_ROOT=$4;
+    export PRODUCT_SEQUENCE=$5;
+    export PRODUCT_TYPE=$6;
+    export INSTALL_PRODUCTS=$7;
+    SRC_DIR=$8;
+    shift
+    REMOVE_SRC_TMP=$8;
+    shift
+    export NP=$9;
+    export CONF_OPTS=${10};
+    shift
+    SINGLE_DIR=${11};
+
+    export PRODUCT="scotch-${VERSION_SCOTCH}"
+    export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
+    export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
+    export PRODUCT_SRC_DIR=${INST_ROOT}/${PRODUCT}_SRC
+    source ./common.sh
+    ${PROCEDURE}
diff --git a/config_files/simanio.sh b/config_files/simanio.sh
index 3c313eb..c1b14cf 100755
--- a/config_files/simanio.sh
+++ b/config_files/simanio.sh
@@ -89,7 +89,7 @@ GCC=`which gcc`
 cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
 used gcc=${GCC}
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
 check_job ${PRODUCT_DIR}/INSTALL.LOG make install
 
 cd ${PRODUCT_DIR}
@@ -132,9 +132,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="simanio-${VERSION_SIMANIO}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/sip.sh b/config_files/sip.sh
index b38bc0d..3d24b06 100755
--- a/config_files/sip.sh
+++ b/config_files/sip.sh
@@ -26,13 +26,24 @@ if [ -n "${SIP_ROOT_DIR}" ]; then
     min_ver=`echo ${ver} | awk -F. '{if(NF>1) print $2; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
     rel_ver=`echo ${ver} | awk -F. '{if(NF>2) print $3; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
     let ver=${maj_ver}*10000+${min_ver}*100+${rel_ver}
-    if [ ${ver} -eq ${SIP_XVERSION} ] ; then
+    if [ ${ver} -ge ${SIP_XVERSION} ] ; then
 	return 0
     fi
 fi
 return 1
 }
 
+print_env_sys()
+{
+cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+#${DELIM} ${PRODUCT_TYPE} ${DELIM}
+export SIP_ROOT_DIR="/usr"
+##
+EOF
+(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+}
+
 print_env_bin()
 {
 cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
@@ -81,6 +92,12 @@ try_preinstalled
 
 install_source_and_build()
 {
+SIP_ROOT_DIR="/usr"
+check_version
+if [ "$?" = "0" ]; then
+   echo "use built-in SIP"
+   print_env_sys
+else
 # install sources
 install_source
 
@@ -101,7 +118,7 @@ GCC=`which gcc`
 cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
 used gcc=${GCC}
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
 check_job ${PRODUCT_DIR}/INSTALL.LOG make install
 
 cd ${PRODUCT_DIR};
@@ -118,6 +135,7 @@ fi
 
 # to generate environment scripts
 try_preinstalled
+fi
 }
 
 install_binary()
@@ -169,9 +187,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="sip-${VERSION_SIP}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/swig.sh b/config_files/swig.sh
index e319039..204c08e 100755
--- a/config_files/swig.sh
+++ b/config_files/swig.sh
@@ -16,12 +16,13 @@
 # swig version
 #
 VERSION_SWIG=2.0.8
-SWIG_VERSION_SUFFIX=`echo ${VERSION_SWIG} | awk -F. '{printf("%d.%d", $1, $2)}'`
+SWIG_VERSION_SUFFIX=`echo ${SWIG_VERSION} | awk -F. '{printf("%d.%d", $1, $2)}'`
+SWIG_XVERSION=`echo ${SWIG_VERSION} | awk -F. '{printf("%d",$1*100000+$2*100+$3)}'`
 
 check_version(){
 if [ -n "`which swig 2>/dev/null`" ]; then
     ver=`swig -version 2>&1 | grep -i version | awk '{ print $3 }' | sed -e 's/^\([0-9.]*\)\(.*\)/\1/'`
-    if [ "${ver}" = "${VERSION_SWIG}" ] ;  then 
+    if [ "${ver}" = "${SWIG_VERSION}" ] ;  then 
 	return 0;
     fi
 fi
@@ -75,6 +76,20 @@ try_preinstalled
 
 install_source_and_build()
 {
+status=1
+ver=`swig -version 2>&1 | grep -i version | awk '{ print $3 }' | sed -e 's/^\([0-9.]*\)\(.*\)/\1/'`
+if [ -n "${ver}" ] ; then
+	maj_ver=`echo ${ver} | awk -F. '{if(NF>0) print $1; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	min_ver=`echo ${ver} | awk -F. '{if(NF>1) print $2; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+	rel_ver=`echo ${ver} | awk -F. '{if(NF>2) print $3; else print 0}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+        let ver=${maj_ver}*10000+${min_ver}*100+${rel_ver}
+        if [ ${ver} -ge ${SWIG_XVERSION} ] ;  then
+           status=0
+        fi
+fi
+if [ "$status" = 0 ]; then
+   echo "Use built-in SWIG"
+else
 # install sources
 install_source
 
@@ -91,7 +106,7 @@ GCC=`which gcc`
 cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
 used gcc=${GCC}
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
 check_job ${PRODUCT_DIR}/INSTALL.LOG make install 
 
 for l in swig ccache-swig ; do
@@ -114,6 +129,7 @@ fi
 
 # to generate environment scripts
 try_preinstalled
+fi
 }
 
 install_binary()
@@ -140,7 +156,12 @@ export INSTALL_PRODUCTS=$7;
 SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="swig-${VERSION_SWIG}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/tbb.sh b/config_files/tbb.sh
index 5675581..89ee9f2 100755
--- a/config_files/tbb.sh
+++ b/config_files/tbb.sh
@@ -26,6 +26,17 @@ check_version(){
 return 0
 }
 
+print_env_sys()
+{
+cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+#${DELIM} ${PRODUCT_TYPE} ${DELIM}
+export TBB_ROOT_DIR="/usr"
+#
+EOF
+(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+}
+
 print_env_bin()
 {
 cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
@@ -63,6 +74,15 @@ echo "It's impossible to install ${PRODUCT} from sources"
 
 install_source_and_build()
 {
+status=0
+if [ -f /usr/include/tbb/tbb_stddef.h ]; then
+    ver_major=`grep "#define TBB_VERSION_MAJOR" /usr/include/tbb/tbb_stddef.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+    ver_minor=`grep "#define TBB_VERSION_MINOR" /usr/include/tbb/tbb_stddef.h | awk '{print $3}' | sed -e 's/^\([0-9]*\).*$/\1/'`
+    echo "use built-in tbb (" ${ver_major}.${ver_minor} ")"
+    #print_env_sys
+else
+
+
 install_binary
 
 if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
@@ -70,6 +90,7 @@ if [ "${SALOME_IW_COMPSIZE}" = "1" ] ; then
     du -sk ${PRODUCT_DIR} > ${INST_ROOT}/${PRODUCT_TYPE}.bin.size
     cp ${INST_ROOT}/${PRODUCT_TYPE}.bin.size ${INST_ROOT}/${PRODUCT_TYPE}.build.size
 fi
+fi
 }
 
 install_binary()
@@ -94,10 +115,14 @@ export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
 SRC_DIR=$8;
-REMOVE_SRC_TMP=$9;
 shift
-BIN_DIR=$9;
-test $# = 10 && shift && SINGLE_DIR=$9
+REMOVE_SRC_TMP=$8;
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="tbb-${VERSION_TBB}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/tcltk.sh b/config_files/tcltk.sh
index e29620d..9ddc1e5 100755
--- a/config_files/tcltk.sh
+++ b/config_files/tcltk.sh
@@ -61,11 +61,31 @@ fi
 return 0
 }
 
+print_env_sys()
+{
+cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
+#${DELIM} ${PRODUCT_TYPE} ${DELIM}
+export TCLHOME=/usr
+export TCL_CFG_DIR=/usr/lib/tcl${TCL_LIBVERSION}
+export TK_CFG_DIR=/usr/lib/tk${TCL_LIBVERSION}
+export TCL_INCLUDE_DIR=/usr/include/tcl${TCL_LIBVERSION}
+export TCLLIBPATH="\${TCLHOME}/lib/`uname -m`-linux-gnu \${TCLHOME}/lib/tcl${TCL_LIBVERSION} \${TCLHOME}/lib/tk${TK_LIBVERSION}"
+export PATH=\${TCLHOME}/bin:\${PATH}
+export LD_LIBRARY_PATH=\${TCLHOME}/lib:\${LD_LIBRARY_PATH}
+##
+EOF
+(test -w ${PRODUCT_DIR} && cp ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh ${PRODUCT_DIR})
+make_env ${INST_ROOT} ${INSTALL_WORK} "${PRODUCT_SEQUENCE}" "${INSTALL_PRODUCTS}"
+}
+
 print_env_bin()
 {
 cat > ${INSTALL_WORK}/env_${PRODUCT_TYPE}.sh <<EOF 
 #${DELIM} ${PRODUCT_TYPE} ${DELIM}
 export TCLHOME=\${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
+export TCL_CFG_DIR=${TCLHOME}/lib
+export TK_CFG_DIR=${TCLHOME}/lib
+export TCL_INCLUDE_DIR=${TCLHOME}/include
 export TCLLIBPATH="\${TCLHOME}/lib \${TCLHOME}/lib/tcl${TCL_LIBVERSION} \${TCLHOME}/lib/tk${TK_LIBVERSION}"
 export PATH=\${TCLHOME}/bin:\${PATH}
 export LD_LIBRARY_PATH=\${TCLHOME}/lib:\${LD_LIBRARY_PATH}
@@ -113,6 +133,12 @@ try_preinstalled
 
 install_source_and_build()
 {
+#use system
+where_tcl
+status=$?
+if [ "$status" = "0" ]; then
+   print_env_sys
+else
 # install sources
 install_source
 
@@ -137,7 +163,7 @@ used gcc=${GCC}
 Making tcl...
 -------------------
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
 cat >> ${PRODUCT_DIR}/MAKEINSTALL.LOG <<EOF
 -------------------
 Installing tcl...
@@ -165,7 +191,7 @@ cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
 Making tk...
 -------------------
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
 cat >> ${PRODUCT_DIR}/MAKEINSTALL.LOG <<EOF
 -------------------
 Installing tk...
@@ -192,7 +218,7 @@ cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
 Making tclx...
 -------------------
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
 cat >> ${PRODUCT_DIR}/MAKEINSTALL.LOG <<EOF
 -------------------
 Installing tclx...
@@ -218,6 +244,7 @@ fi
 
 # to generate environment scripts
 try_preinstalled
+fi
 }
 
 install_binary()
@@ -252,9 +279,15 @@ export INST_ROOT=$4;
 export PRODUCT_SEQUENCE=$5;
 export PRODUCT_TYPE=$6;
 export INSTALL_PRODUCTS=$7;
+SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="tcltk-${VERSION_TCL}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/wso2.sh b/config_files/wso2.sh
index 446f46d..a05056f 100755
--- a/config_files/wso2.sh
+++ b/config_files/wso2.sh
@@ -87,7 +87,7 @@ GCC=`which gcc`
 cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
 used gcc=${GCC}
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make
+check_job ${PRODUCT_DIR}/MAKE.LOG make -j${NP}
 check_job ${PRODUCT_DIR}/INSTALL.LOG make install 
 
 cd ${PRODUCT_DIR}
@@ -148,7 +148,12 @@ export INSTALL_PRODUCTS=$7;
 SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
-test $# = 10 && shift && SINGLE_DIR=$9
+shift
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 export PRODUCT="wso2-wsf-cpp-${VERSION_WSO2}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
 export PRODUCT_WORK=${INSTALL_WORK}/${PRODUCT}
diff --git a/config_files/xdata.sh b/config_files/xdata.sh
index 95fcc31..3e4acf3 100755
--- a/config_files/xdata.sh
+++ b/config_files/xdata.sh
@@ -78,7 +78,7 @@ GCC=`which gcc`
 cat >> ${PRODUCT_DIR}/MAKE.LOG <<EOF
 used gcc=${GCC}
 EOF
-check_job ${PRODUCT_DIR}/MAKE.LOG make
+check_job ${PRODUCT_DIR}/MAKE.LOG make # do not build in // -j${NP}
 check_job ${PRODUCT_DIR}/INSTALL.LOG make install
 
 cd ${PRODUCT_DIR}
@@ -124,7 +124,11 @@ SRC_DIR=$8;
 shift
 REMOVE_SRC_TMP=$8;
 shift
-SINGLE_DIR=$9;
+export NP=$9;
+export CONF_OPTS=${10};
+shift
+SINGLE_DIR=${11};
+
 if [ -n "${SINGLE_DIR}" ] ; then SINGLE_DIR=${SDIR_NAME}; fi
 export PRODUCT="xdata-${XDATA_VERSION}"
 export PRODUCT_DIR=${INST_ROOT}/${SINGLE_DIR:-${PRODUCT}}
diff --git a/runInstall b/runInstall
index b7f7f21..6a76829 100755
--- a/runInstall
+++ b/runInstall
@@ -124,13 +124,13 @@ class ArgOption:
             setattr(self, arg, kwargs[arg])
         # check short option key
         if self.short_opt and \
-               not re.match("^-[a-zA-Z]$",self.short_opt):
+                not re.match("^-[a-zA-Z]$",self.short_opt):
             msg  = "invalid short option key; "
             msg += "should be of the form -x (x is letter)"
             raise OptError(msg, self)
         # check long option key
         if self.long_opt and \
-               not re.match("^--[a-zA-Z][a-zA-Z0-9]*(-[a-zA-Z0-9]+)*$",self.long_opt):
+                not re.match("^--[a-zA-Z][a-zA-Z0-9]*(-[a-zA-Z0-9]+)*$",self.long_opt):
             msg  = "invalid long option key; "
             msg += "should be of the form --word[[-word]...] "
             msg += "(word is letters and digits sequence)"
@@ -201,7 +201,7 @@ class Values:
     """
     def __init__(self):
         pass
-        
+    
 #===================================================================
 # class ArgParser : command line arguments parser
 #===================================================================
@@ -235,7 +235,7 @@ class ArgParser:
             self._error(e.msg)
 
         return (values, args)
-            
+    
     def print_usage(self):
         """Print usage"""
         print "usage: %s [options]" % os.path.basename(sys.argv[0])
@@ -279,7 +279,7 @@ class ArgParser:
             for o in self.options:
                 if opt_key in [o.short_opt, o.long_opt]: return o
         return None
-        
+    
     def _error(self, msg):
         self.print_usage()
         sys.exit("\n%s: error: %s\n" % (os.path.basename(sys.argv[0]), msg))
@@ -329,7 +329,13 @@ class ArgParser:
                 pass
             elif re.match("^--[a-zA-Z][a-zA-Z0-9]*(-[a-zA-Z0-9]+)*", a):
                 oname  = ("%s="%a).split("=")[0]
-                ovalue = ("%s="%a).split("=")[1]
+                
+# A quick workaround when ovalue contains some "="
+#ovalue = ("%s="%a).split("=")[1]
+                otest = ("%s="%a).partition("=")[2]
+                ovalue = otest.rstrip("=")
+                #message("oname=%s"%oname)
+                #message("ovalue=%s"%ovalue)
                 o = self._get_option(oname)
                 if not o:
                     raise ArgError("no such option: %s" % oname)
@@ -376,22 +382,27 @@ class Config :
     - List of optional libraries for Salome
     """
     def __init__(self,
-                 theVersion   = None,
-                 theCaption   = None,
-                 theCopyright = None,
-                 theLicense   = None,
-                 thePlatforms = None,
-                 theTargetdir = None,
-                 theTmpdir    = None,
-                 theOptLibs   = None):
-        self.version   = strip(theVersion)
-        self.caption   = strip(theCaption)
-        self.copyright = strip(theCopyright)
-        self.license   = strip(theLicense)
-        self.platforms = strip(thePlatforms)
-        self.targetdir = strip(theTargetdir)
-        self.tmpdir    = strip(theTmpdir)
-        self.optlibs   = strip(theOptLibs)
+                 theVersion     = None,
+                 theCaption     = None,
+                 theCopyright   = None,
+                 theLicense     = None,
+                 thePlatforms   = None,
+                 theTargetdir   = None,
+                 theTmpdir      = None,
+                 theOptLibs     = None,
+                 theNumberCores = None,
+                 theConfOpts    = None):
+        self.version    = strip(theVersion)
+        self.caption    = strip(theCaption)
+        self.copyright  = strip(theCopyright)
+        self.license    = strip(theLicense)
+        self.platforms  = strip(thePlatforms)
+        self.targetdir  = strip(theTargetdir)
+        self.tmpdir     = strip(theTmpdir)
+        self.optlibs    = strip(theOptLibs)
+        self.np         = strip(theNumberCores)
+        self.conf_opts  = strip(theConfOpts)
+
 
 #==============================================================
 # class Product : pre-requisite product options
@@ -432,7 +443,7 @@ class Product :
             return
         self.whattodo = mode
         return
-        
+    
 #===================================================================
 # class ConfigParser : XML files parser implementation
 #===================================================================
@@ -448,7 +459,7 @@ class ConfigParser:
         self.is_force_src = is_force_src
         self.pltname = pltname
         pass
-        
+    
     def parse_config(self):
         # Parse 'config' part of the XML file
         configElem = self.docElem.getElementsByTagName('config')[0]
@@ -460,7 +471,10 @@ class ConfigParser:
                              configElem.getAttribute('platforms').strip(),
                              configElem.getAttribute('targetdir').strip(),
                              configElem.getAttribute('tempdir').strip(),
-                             configElem.getAttribute('optionallibs').strip())
+                             configElem.getAttribute('optionallibs').strip(),
+                             configElem.getAttribute('np').strip(),
+                             configElem.getAttribute('conf_opts').strip()
+                             )
         if not self.pltname and self.config.platforms:
             self.pltname = self.config.platforms.split(",")[0].strip()
         pass
@@ -737,6 +751,22 @@ def parse_parameters():
                           dest="single_dir",
                           default=False,
                           help=help_str)
+    help_str  = "Force parallel build."
+    opt_parser.add_option("-n",
+                          "--np",
+                          action="store",
+                          dest="np",
+                          default=get_cpu_count(),
+                          metavar="NP",
+                          help=help_str)
+    help_str  = "Pass extra configuration options to build."
+    opt_parser.add_option("-c",
+                          "--conf-opts",
+                          action="store",
+                          dest="conf_opts",
+                          default="",
+                          metavar="CONF_OPTS",
+                          help=help_str)
     help_str  = "Prints version information and quits."
     opt_parser.add_option("-v",
                           "--version",
@@ -761,7 +791,7 @@ def parse_parameters():
         os.system(cmd)
         print ""
         sys.exit(0)
-    return [options.xmlfile, options.target_dir, options.tmp_dir, options.gui, options.force_sources, options.single_dir, options.platform]
+    return [options.xmlfile, options.target_dir, options.tmp_dir, options.gui, options.force_sources, options.single_dir, options.platform, options.np, options.conf_opts]
 
 #=================================================================
 # strip : removes spaces at the beginning and at the end of the 
@@ -775,7 +805,7 @@ def strip(param):
     if type(param) == types.StringType:
         return param.strip()
     return param
-    
+
 #=================================================================
 # get_dependencies : extract products dependencies
 #=================================================================
@@ -908,12 +938,15 @@ def check_disk_space(products, scripts_dir, target_dir, tmp_dir, is_force_src=Fa
         install_space = install_space + prod_space
         pass
 
+    sys.stdout.flush()
+    cmd="%s/%s %s %d"%(scripts_dir, "checkSize.sh", target_dir, install_space)
     res = os.system("%s/%s %s %d"%(scripts_dir, "checkSize.sh", target_dir, install_space))
+    print 
     if res:
         msg = "There is no enough space to install the products. Stopped..."
         error_exit(msg, False)
     pass
- 
+
 #===============================================================
 # remove_dir : removes temporary directory
 #===============================================================
@@ -968,59 +1001,64 @@ def get_tmp_dir(dir):
     return "%s/%s%d"%(dir, dir_prefix, random.randint(range_bottom,range_top))
 
 #==============================================================
+# get_cpu_count : gets number of CPUs in the system
+#
+#===============================================================
+def get_cpu_count():
+    ''' Returns the number of CPUs in the system
+    '''
+    num = 1
+    if sys.platform == 'win32':
+        # fetch the cpu count for windows systems
+        try:
+            num = int(os.environ['NUMBER_OF_PROCESSORS'])
+        except (ValueError, KeyError):
+            pass
+    elif sys.platform == 'darwin':
+        # fetch teh cpu count for MacOS X systems
+        try:
+            num = int(os.popen('sysctl -n hw.ncpu').read())
+        except ValueError:
+            pass
+    else:
+        # an finally fetch the cpu count for Unix-like systems
+        try:
+            num = os.sysconf('SC_NPROCESSORS_ONLN')
+        except (ValueError, OSError, AttributeError):
+            pass
+ 
+    return num
+
+#==============================================================
 # get_os_release : gets OS release; the OS name, version and
 #                  architecture
 #                  For example:
 #                  RedHat, 8.0; Mandriva, 2006.0, 64
 #===============================================================
 def get_os_release():
-    filename = "/etc/issue"
-    # ---
+    import platform
+
     plt_name = "unknown"
     plt_ver  = ""
     plt_arch = ""   
-    if os.path.exists(filename):
-        # ---
-        f = open(filename)
-        lines = f.readlines()
-        f.close()
-        # ---
-        regvar  = re.compile("(.*)\s+[^\s]*[R|r]elease[^\s]*\s+([\d.]*)")
-        regvar1 = re.compile("(.*)\s+[^\s]*[L|l][I|i][N|n][U|u][X|x][^\s]*(.*)\s+([\d.]*)\s+")
-        regvar2 = re.compile("([A-Za-z]+)\s+([0-9.]+)\s+.*")
-        for l in lines:
-            res = re.search(regvar, l)
-            if not res:
-                res = re.search(regvar1, l)
-            if not res:
-                res = re.search(regvar2, l)
-            if res:
-                plt_name = " ".join(" ".join(res.groups()[:len(res.groups())-1]).split())
-                # workaround for Mandrake and other platforms
-                plt_name = plt_name.replace("Linux", "").replace("linux", "").replace("LINUX", "").strip()
-                # workaround for SuSe
-                plt_name = plt_name.replace("Welcome to", "").strip()
-                # ---
-                plt_name = " ".join(plt_name.split())
-                plt_ver  = res.group(len(res.groups()))
-                if re.search(r'x86_64', l):
-                    plt_arch = "64bit"
-                    pass
-                # workaround for Red Hat Enterprise
-                if not plt_arch:
-                    try:
-                        import platform
-                        if platform.machine() == "x86_64":
-                            plt_arch = "64bit"
-                            pass
-                        pass
-                    except:
-                        pass
-                    pass
-                break
-            pass
-        pass
 
+    plt_type = platform.system()
+    if plt_type=='Linux':
+        plt_name, plt_ver, plt_release  = platform.linux_distribution()
+        # On Debian system need to get rid of some part of version
+        # ex: jessie/sid
+        plt_ver = plt_ver.rsplit("/")[0]
+    if plt_type=='Windows':
+        plt_name, plt_ver, plt_release  = platform.win32_ver()
+    if plt_type=='Darwin':
+        plt_name, plt_ver, plt_release  = platform.mac_ver()
+
+    plt_arch, plt_exec = platform.architecture()
+
+    print plt_name
+    print plt_ver
+    print plt_arch
+    
     return plt_name, plt_ver, plt_arch
 
 #==============================================================
@@ -1167,7 +1205,9 @@ if __name__ == "__main__":
     # get program dir
     cur_dir = get_program_path()
     # parse command line
-    [xml_file, target_dir, tmp_dir, is_gui, is_force_src, is_single_dir, pltname] = parse_parameters()
+    [xml_file, target_dir, tmp_dir, is_gui, is_force_src, is_single_dir, pltname, np, conf_opts] = parse_parameters()
+    #message("parse_parameters np=%s"%np)
+    #message("parse_parameters conf_opts=%s"%conf_opts)
     if xml_file:   xml_file   = os.path.abspath(xml_file)
     if target_dir: target_dir = os.path.abspath(target_dir)
     if tmp_dir:    tmp_dir    = os.path.abspath(tmp_dir)
@@ -1197,6 +1237,10 @@ if __name__ == "__main__":
             cmd += " --all-from-sources"
         if is_single_dir:
             cmd += " --single-directory"
+        if np is not None:
+            cmd += " -j %s"%np
+        if conf_opts is not None:
+            cmd += ' --conf-opts="%s"'%conf_opts
         cmd += "&"
         sys.exit(os.system(cmd))
 
@@ -1282,6 +1326,16 @@ if __name__ == "__main__":
     if has_bin:
         check_dir("%s/%s"%(source_dir,subdir[__BINARIES__]))
 
+    # check/create np -----------
+    if parser.config.np:
+        np = parser.config.np
+    np = substituteVars(np)
+
+    # check/create conf_opts -----------
+    if parser.config.conf_opts:
+        conf_opts = parser.config.conf_opts
+    conf_opts = substituteVars(conf_opts)
+
     # check/create target dir -----------
     if target_dir is None:
         target_dir = parser.config.targetdir
@@ -1306,7 +1360,7 @@ if __name__ == "__main__":
 
     message("Creating temporary directory: " + tmp_dir)
     root_path = create_dir(tmp_dir, 0755)
-   
+    
     if not os.path.exists(tmp_dir):
         error_exit("Invalid temporary directory: " + tmp_dir)
 
@@ -1334,10 +1388,16 @@ if __name__ == "__main__":
     for product in parser.products:
         # remove only prerequisites temporary files
         if product.type == __CTX__PREREQUISITE__ or \
-           (product.type == __CTX__COMPONENT__ and product.whattodo == __BUILDSRC__):
+                (product.type == __CTX__COMPONENT__ and product.whattodo == __BUILDSRC__):
             rm_src_tmp = "TRUE"
-        message("... processing %s ..."%product.name)
-        cmd = '%s/%s %s %s %s/%s %s "%s" %s "%s" %s/%s %s %s/%s' % (
+        msg="... processing %s ..."%product.name
+        msg+=" ( np=%s"%np
+        msg+=" conf_opts=%s"%conf_opts
+        msg+= " )"
+        message(msg)
+        #print type(conf_opts)
+
+        cmd = '%s/%s %s %s %s/%s %s "%s" %s "%s" %s/%s %s %s/%s %s "%s"' % (
             scripts_dir, product.script,
             product.whattodo,
             tmp_dir,
@@ -1348,7 +1408,9 @@ if __name__ == "__main__":
             products_string,
             source_dir, subdir[__BUILDSRC__],
             rm_src_tmp,
-            source_dir, subdir[__BINARIES__]
+            source_dir, subdir[__BINARIES__],
+            np,
+            conf_opts
             )
         # install all modules with GUI
         if product.woguiinst is not None and product.woguiinst != "":
@@ -1356,7 +1418,16 @@ if __name__ == "__main__":
         # use single directory or not
         if product.whattodo == __BINARIES__ and product.type == __CTX__COMPONENT__ and is_single_dir:
             cmd += ' TRUE'
+	#print 
+
+        sys.stdout.flush()
         res = os.system(cmd)
+	#print "cmd=%s"%cmd
+        if res:
+	    print "cmd=%s"%cmd
+            msg = "FAILED to build %s"%product.name
+            error_exit(msg, False)
+
         rm_src_tmp = "FALSE"
         pass
 
@@ -1364,7 +1435,7 @@ if __name__ == "__main__":
     message("Creating environment files")
     for product in parser.products :
         if check_bool(product.pickupEnv):
-            cmd = '%s/%s pickup_env %s %s/%s %s "%s" %s "%s" %s/%s %s %s/%s' % (
+            cmd = '%s/%s pickup_env %s %s/%s %s "%s" %s "%s" %s/%s %s %s/%s %s "%s"' % (
                 scripts_dir, product.script,
                 tmp_dir,
                 source_dir, subdir[product.whattodo],
@@ -1374,7 +1445,9 @@ if __name__ == "__main__":
                 products_string,
                 source_dir, subdir[__BUILDSRC__],
                 rm_src_tmp,
-                source_dir, subdir[__BINARIES__]
+                source_dir, subdir[__BINARIES__],
+                np,
+                conf_opts
                 )
             # install all modules with GUI
             if product.woguiinst is not None and product.woguiinst != "":
@@ -1382,7 +1455,13 @@ if __name__ == "__main__":
             # use single directory or not
             if product.whattodo == __BINARIES__ and product.type == __CTX__COMPONENT__ and is_single_dir:
                 cmd += ' TRUE'
+	    print "cmd=%s"%cmd
+            sys.stdout.flush()
+            
             res = os.system(cmd)
+            if res:
+                msg = "FAILED to create evironment for %s"%product.name
+                error_exit(msg, False)
             pass
         pass
 
@@ -1391,11 +1470,16 @@ if __name__ == "__main__":
             # modify *.la files, if --single-directory option was pointed -----------
             message("Modifying of *.la files of SALOME modules...")
             cmd = '%s/modifyLaFiles.sh modify_la_files %s' % (scripts_dir, target_dir)
+            sys.stdout.flush()
             res = os.system(cmd)
+            if res:
+                msg = "FAILED to run %s"%cmd
+                error_exit(msg, False)
         else:
             # check that all required libraries are in system
             message("Check existence of Fortran and other required libraries...")
             cmd = '%s/checkFortran.sh find_libraries %s > %s/not_found_libs.txt' % (scripts_dir, target_dir, tmp_dir)
+            sys.stdout.flush()
             if os.system(cmd):
                 check_not_found_libs("%s/not_found_libs.txt" % (tmp_dir), parser.config.optlibs)
 
-- 
1.8.5.3

